{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Icon, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport * as Classes from \"../common/classes\";\nimport { CLASSNAME_EXCLUDED_FROM_TEXT_MEASUREMENT } from \"../common/utils\";\nimport { DragEvents } from \"../interactions/dragEvents\";\nimport { DragReorderable } from \"../interactions/reorderable\";\nimport { Resizable } from \"../interactions/resizable\";\nimport { DragSelectable } from \"../interactions/selectable\";\nimport { RegionCardinality, Regions } from \"../regions\";\nvar SHALLOW_COMPARE_PROP_KEYS_DENYLIST = [\"focusedCell\", \"selectedRegions\"];\n\nvar Header = function (_super) {\n  __extends(Header, _super);\n\n  function Header(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    _this.convertEventToIndex = function (event) {\n      var coord = _this.props.getMouseCoordinate(event);\n\n      return _this.props.convertPointToIndex(coord);\n    };\n\n    _this.locateClick = function (event) {\n      _this.activationIndex = _this.convertEventToIndex(event);\n      return _this.props.toRegion(_this.activationIndex);\n    };\n\n    _this.locateDragForSelection = function (_event, coords, returnEndOnly) {\n      if (returnEndOnly === void 0) {\n        returnEndOnly = false;\n      }\n\n      var coord = _this.props.getDragCoordinate(coords.current);\n\n      var indexStart = _this.activationIndex;\n\n      var indexEnd = _this.props.convertPointToIndex(coord);\n\n      return returnEndOnly ? _this.props.toRegion(indexEnd) : _this.props.toRegion(indexStart, indexEnd);\n    };\n\n    _this.locateDragForReordering = function (_event, coords) {\n      var coord = _this.props.getDragCoordinate(coords.current);\n\n      var guideIndex = _this.props.convertPointToIndex(coord, true);\n\n      return guideIndex < 0 ? undefined : guideIndex;\n    };\n\n    _this.renderCells = function () {\n      var _a = _this.props,\n          indexStart = _a.indexStart,\n          indexEnd = _a.indexEnd;\n      var cells = [];\n\n      for (var index = indexStart; index <= indexEnd; index++) {\n        cells.push(_this.renderNewCell(index));\n      }\n\n      return cells;\n    };\n\n    _this.renderNewCell = function (index) {\n      var extremaClasses = _this.props.getCellExtremaClasses(index, _this.props.indexEnd);\n\n      var renderer = _this.props.isGhostIndex(index) ? _this.props.ghostCellRenderer : _this.renderCell;\n      return renderer(index, extremaClasses);\n    };\n\n    _this.renderCell = function (index, extremaClasses) {\n      var _a, _b;\n\n      var _c = _this.props,\n          getIndexClass = _c.getIndexClass,\n          selectedRegions = _c.selectedRegions;\n\n      var cell = _this.props.headerCellRenderer(index);\n\n      if (cell == null) {\n        return null;\n      }\n\n      var isLoading = cell.props.loading != null ? cell.props.loading : _this.props.loading;\n\n      var isSelected = _this.props.isCellSelected(index);\n\n      var isEntireCellTargetReorderable = _this.isEntireCellTargetReorderable(index);\n\n      var className = classNames(extremaClasses, (_a = {}, _a[Classes.TABLE_HEADER_REORDERABLE] = isEntireCellTargetReorderable, _a), _this.props.getCellIndexClass(index), cell.props.className);\n      var cellProps = (_b = {\n        className: className,\n        index: index\n      }, _b[_this.props.headerCellIsSelectedPropName] = isSelected, _b[_this.props.headerCellIsReorderablePropName] = isEntireCellTargetReorderable, _b.loading = isLoading, _b.reorderHandle = _this.maybeRenderReorderHandle(index), _b);\n\n      var modifiedHandleSizeChanged = function (size) {\n        return _this.props.handleSizeChanged(index, size);\n      };\n\n      var modifiedHandleResizeEnd = function (size) {\n        return _this.props.handleResizeEnd(index, size);\n      };\n\n      var modifiedHandleResizeHandleDoubleClick = function () {\n        var _a, _b;\n\n        return (_b = (_a = _this.props).handleResizeDoubleClick) === null || _b === void 0 ? void 0 : _b.call(_a, index);\n      };\n\n      var baseChildren = React.createElement(DragSelectable, {\n        enableMultipleSelection: _this.props.enableMultipleSelection,\n        disabled: _this.isDragSelectableDisabled,\n        focusedCell: _this.props.focusedCell,\n        ignoredSelectors: [\".\" + Classes.TABLE_REORDER_HANDLE_TARGET],\n        key: getIndexClass(index),\n        locateClick: _this.locateClick,\n        locateDrag: _this.locateDragForSelection,\n        onFocusedCell: _this.props.onFocusedCell,\n        onSelection: _this.handleDragSelectableSelection,\n        onSelectionEnd: _this.handleDragSelectableSelectionEnd,\n        selectedRegions: selectedRegions,\n        selectedRegionTransform: _this.props.selectedRegionTransform\n      }, React.createElement(Resizable, {\n        isResizable: _this.props.isResizable,\n        maxSize: _this.props.maxSize,\n        minSize: _this.props.minSize,\n        // eslint-disable-next-line react/jsx-no-bind\n        onDoubleClick: modifiedHandleResizeHandleDoubleClick,\n        onLayoutLock: _this.props.onLayoutLock,\n        // eslint-disable-next-line react/jsx-no-bind\n        onResizeEnd: modifiedHandleResizeEnd,\n        // eslint-disable-next-line react/jsx-no-bind\n        onSizeChanged: modifiedHandleSizeChanged,\n        orientation: _this.props.resizeOrientation,\n        size: _this.props.getCellSize(index)\n      }, React.cloneElement(cell, cellProps)));\n      return _this.isReorderHandleEnabled() ? baseChildren // reordering will be handled by interacting with the reorder handle\n      : _this.wrapInDragReorderable(index, baseChildren, _this.isDragReorderableDisabled);\n    };\n\n    _this.handleDragSelectableSelection = function (selectedRegions) {\n      _this.props.onSelection(selectedRegions);\n\n      _this.setState({\n        hasValidSelection: false\n      });\n    };\n\n    _this.handleDragSelectableSelectionEnd = function () {\n      _this.activationIndex = null; // not strictly required, but good practice\n\n      _this.setState({\n        hasValidSelection: true\n      });\n    };\n\n    _this.isDragSelectableDisabled = function (event) {\n      if (DragEvents.isAdditive(event)) {\n        // if the meta/ctrl key was pressed, we want to forcefully ignore\n        // reordering interactions and prioritize drag-selection\n        // interactions (e.g. to make it possible to deselect a row).\n        return false;\n      }\n\n      var cellIndex = _this.convertEventToIndex(event);\n\n      return _this.isEntireCellTargetReorderable(cellIndex);\n    };\n\n    _this.isDragReorderableDisabled = function (event) {\n      var isSelectionEnabled = !_this.isDragSelectableDisabled(event);\n\n      if (isSelectionEnabled) {\n        // if drag-selection is enabled, we don't want drag-reordering\n        // interactions to compete. otherwise, a mouse-drag might both expand a\n        // selection and reorder the same selection simultaneously - confusing!\n        return true;\n      }\n\n      var cellIndex = _this.convertEventToIndex(event);\n\n      return !_this.isEntireCellTargetReorderable(cellIndex);\n    };\n\n    _this.isEntireCellTargetReorderable = function (index) {\n      var selectedRegions = _this.props.selectedRegions; // although reordering may be generally enabled for this row/column (via props.isReorderable), the\n      // row/column shouldn't actually become reorderable from a user perspective until a few other\n      // conditions are true:\n\n      return _this.props.isReorderable && // the row/column should be the only selection (or it should be part of the only selection),\n      // because reordering multiple disjoint row/column selections is a UX morass with no clear best\n      // behavior.\n      _this.props.isCellSelected(index) && _this.state.hasValidSelection && Regions.getRegionCardinality(selectedRegions[0]) === _this.props.fullRegionCardinality && // selected regions can be updated during mousedown+drag and before mouseup; thus, we\n      // add a final check to make sure we don't enable reordering until the selection\n      // interaction is complete. this prevents one click+drag interaction from triggering\n      // both selection and reordering behavior.\n      selectedRegions.length === 1 && // columns are reordered via a reorder handle, so drag-selection needn't be disabled\n      !_this.isReorderHandleEnabled();\n    };\n\n    _this.state = {\n      hasValidSelection: _this.isSelectedRegionsControlledAndNonEmpty(props)\n    };\n    return _this;\n  }\n\n  Header.prototype.componentDidUpdate = function (_, prevState) {\n    var nextHasValidSection = this.isSelectedRegionsControlledAndNonEmpty(this.props);\n\n    if (prevState.hasValidSelection !== nextHasValidSection) {\n      this.setState({\n        hasValidSelection: nextHasValidSection\n      });\n    }\n  };\n\n  Header.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    return !CoreUtils.shallowCompareKeys(this.state, nextState) || !CoreUtils.shallowCompareKeys(this.props, nextProps, {\n      exclude: SHALLOW_COMPARE_PROP_KEYS_DENYLIST\n    }) || !CoreUtils.deepCompareKeys(this.props, nextProps, SHALLOW_COMPARE_PROP_KEYS_DENYLIST);\n  };\n\n  Header.prototype.render = function () {\n    return this.props.wrapCells(this.renderCells());\n  };\n\n  Header.prototype.isSelectedRegionsControlledAndNonEmpty = function (props) {\n    if (props === void 0) {\n      props = this.props;\n    }\n\n    return props.selectedRegions != null && props.selectedRegions.length > 0;\n  };\n\n  Header.prototype.isReorderHandleEnabled = function () {\n    // the reorder handle can only appear in the column interaction bar\n    return this.isColumnHeader() && this.props.isReorderable;\n  };\n\n  Header.prototype.maybeRenderReorderHandle = function (index) {\n    return !this.isReorderHandleEnabled() ? undefined : this.wrapInDragReorderable(index, React.createElement(\"div\", {\n      className: Classes.TABLE_REORDER_HANDLE_TARGET\n    }, React.createElement(\"div\", {\n      className: classNames(Classes.TABLE_REORDER_HANDLE, CLASSNAME_EXCLUDED_FROM_TEXT_MEASUREMENT)\n    }, React.createElement(Icon, {\n      icon: \"drag-handle-vertical\",\n      title: \"Press down to drag\"\n    }))), false);\n  };\n\n  Header.prototype.isColumnHeader = function () {\n    return this.props.fullRegionCardinality === RegionCardinality.FULL_COLUMNS;\n  };\n\n  Header.prototype.wrapInDragReorderable = function (index, children, disabled) {\n    return React.createElement(DragReorderable, {\n      disabled: disabled,\n      key: this.props.getIndexClass(index),\n      locateClick: this.locateClick,\n      locateDrag: this.locateDragForReordering,\n      onReordered: this.props.onReordered,\n      onReordering: this.props.onReordering,\n      onSelection: this.props.onSelection,\n      onFocusedCell: this.props.onFocusedCell,\n      selectedRegions: this.props.selectedRegions,\n      toRegion: this.props.toRegion\n    }, children);\n  };\n\n  return Header;\n}(React.Component);\n\nexport { Header };","map":{"version":3,"sources":["../../../src/headers/header.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Icon, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport * as Classes from \"../common/classes\";\nimport { CLASSNAME_EXCLUDED_FROM_TEXT_MEASUREMENT } from \"../common/utils\";\nimport { DragEvents } from \"../interactions/dragEvents\";\nimport { DragReorderable } from \"../interactions/reorderable\";\nimport { Resizable } from \"../interactions/resizable\";\nimport { DragSelectable } from \"../interactions/selectable\";\nimport { RegionCardinality, Regions } from \"../regions\";\nvar SHALLOW_COMPARE_PROP_KEYS_DENYLIST = [\"focusedCell\", \"selectedRegions\"];\nvar Header = /** @class */ (function (_super) {\n    __extends(Header, _super);\n    function Header(props, context) {\n        var _this = _super.call(this, props, context) || this;\n        _this.convertEventToIndex = function (event) {\n            var coord = _this.props.getMouseCoordinate(event);\n            return _this.props.convertPointToIndex(coord);\n        };\n        _this.locateClick = function (event) {\n            _this.activationIndex = _this.convertEventToIndex(event);\n            return _this.props.toRegion(_this.activationIndex);\n        };\n        _this.locateDragForSelection = function (_event, coords, returnEndOnly) {\n            if (returnEndOnly === void 0) { returnEndOnly = false; }\n            var coord = _this.props.getDragCoordinate(coords.current);\n            var indexStart = _this.activationIndex;\n            var indexEnd = _this.props.convertPointToIndex(coord);\n            return returnEndOnly ? _this.props.toRegion(indexEnd) : _this.props.toRegion(indexStart, indexEnd);\n        };\n        _this.locateDragForReordering = function (_event, coords) {\n            var coord = _this.props.getDragCoordinate(coords.current);\n            var guideIndex = _this.props.convertPointToIndex(coord, true);\n            return guideIndex < 0 ? undefined : guideIndex;\n        };\n        _this.renderCells = function () {\n            var _a = _this.props, indexStart = _a.indexStart, indexEnd = _a.indexEnd;\n            var cells = [];\n            for (var index = indexStart; index <= indexEnd; index++) {\n                cells.push(_this.renderNewCell(index));\n            }\n            return cells;\n        };\n        _this.renderNewCell = function (index) {\n            var extremaClasses = _this.props.getCellExtremaClasses(index, _this.props.indexEnd);\n            var renderer = _this.props.isGhostIndex(index) ? _this.props.ghostCellRenderer : _this.renderCell;\n            return renderer(index, extremaClasses);\n        };\n        _this.renderCell = function (index, extremaClasses) {\n            var _a, _b;\n            var _c = _this.props, getIndexClass = _c.getIndexClass, selectedRegions = _c.selectedRegions;\n            var cell = _this.props.headerCellRenderer(index);\n            if (cell == null) {\n                return null;\n            }\n            var isLoading = cell.props.loading != null ? cell.props.loading : _this.props.loading;\n            var isSelected = _this.props.isCellSelected(index);\n            var isEntireCellTargetReorderable = _this.isEntireCellTargetReorderable(index);\n            var className = classNames(extremaClasses, (_a = {},\n                _a[Classes.TABLE_HEADER_REORDERABLE] = isEntireCellTargetReorderable,\n                _a), _this.props.getCellIndexClass(index), cell.props.className);\n            var cellProps = (_b = {\n                    className: className,\n                    index: index\n                },\n                _b[_this.props.headerCellIsSelectedPropName] = isSelected,\n                _b[_this.props.headerCellIsReorderablePropName] = isEntireCellTargetReorderable,\n                _b.loading = isLoading,\n                _b.reorderHandle = _this.maybeRenderReorderHandle(index),\n                _b);\n            var modifiedHandleSizeChanged = function (size) { return _this.props.handleSizeChanged(index, size); };\n            var modifiedHandleResizeEnd = function (size) { return _this.props.handleResizeEnd(index, size); };\n            var modifiedHandleResizeHandleDoubleClick = function () { var _a, _b; return (_b = (_a = _this.props).handleResizeDoubleClick) === null || _b === void 0 ? void 0 : _b.call(_a, index); };\n            var baseChildren = (React.createElement(DragSelectable, { enableMultipleSelection: _this.props.enableMultipleSelection, disabled: _this.isDragSelectableDisabled, focusedCell: _this.props.focusedCell, ignoredSelectors: [\".\" + Classes.TABLE_REORDER_HANDLE_TARGET], key: getIndexClass(index), locateClick: _this.locateClick, locateDrag: _this.locateDragForSelection, onFocusedCell: _this.props.onFocusedCell, onSelection: _this.handleDragSelectableSelection, onSelectionEnd: _this.handleDragSelectableSelectionEnd, selectedRegions: selectedRegions, selectedRegionTransform: _this.props.selectedRegionTransform },\n                React.createElement(Resizable, { isResizable: _this.props.isResizable, maxSize: _this.props.maxSize, minSize: _this.props.minSize, \n                    // eslint-disable-next-line react/jsx-no-bind\n                    onDoubleClick: modifiedHandleResizeHandleDoubleClick, onLayoutLock: _this.props.onLayoutLock, \n                    // eslint-disable-next-line react/jsx-no-bind\n                    onResizeEnd: modifiedHandleResizeEnd, \n                    // eslint-disable-next-line react/jsx-no-bind\n                    onSizeChanged: modifiedHandleSizeChanged, orientation: _this.props.resizeOrientation, size: _this.props.getCellSize(index) }, React.cloneElement(cell, cellProps))));\n            return _this.isReorderHandleEnabled()\n                ? baseChildren // reordering will be handled by interacting with the reorder handle\n                : _this.wrapInDragReorderable(index, baseChildren, _this.isDragReorderableDisabled);\n        };\n        _this.handleDragSelectableSelection = function (selectedRegions) {\n            _this.props.onSelection(selectedRegions);\n            _this.setState({ hasValidSelection: false });\n        };\n        _this.handleDragSelectableSelectionEnd = function () {\n            _this.activationIndex = null; // not strictly required, but good practice\n            _this.setState({ hasValidSelection: true });\n        };\n        _this.isDragSelectableDisabled = function (event) {\n            if (DragEvents.isAdditive(event)) {\n                // if the meta/ctrl key was pressed, we want to forcefully ignore\n                // reordering interactions and prioritize drag-selection\n                // interactions (e.g. to make it possible to deselect a row).\n                return false;\n            }\n            var cellIndex = _this.convertEventToIndex(event);\n            return _this.isEntireCellTargetReorderable(cellIndex);\n        };\n        _this.isDragReorderableDisabled = function (event) {\n            var isSelectionEnabled = !_this.isDragSelectableDisabled(event);\n            if (isSelectionEnabled) {\n                // if drag-selection is enabled, we don't want drag-reordering\n                // interactions to compete. otherwise, a mouse-drag might both expand a\n                // selection and reorder the same selection simultaneously - confusing!\n                return true;\n            }\n            var cellIndex = _this.convertEventToIndex(event);\n            return !_this.isEntireCellTargetReorderable(cellIndex);\n        };\n        _this.isEntireCellTargetReorderable = function (index) {\n            var selectedRegions = _this.props.selectedRegions;\n            // although reordering may be generally enabled for this row/column (via props.isReorderable), the\n            // row/column shouldn't actually become reorderable from a user perspective until a few other\n            // conditions are true:\n            return (_this.props.isReorderable &&\n                // the row/column should be the only selection (or it should be part of the only selection),\n                // because reordering multiple disjoint row/column selections is a UX morass with no clear best\n                // behavior.\n                _this.props.isCellSelected(index) &&\n                _this.state.hasValidSelection &&\n                Regions.getRegionCardinality(selectedRegions[0]) === _this.props.fullRegionCardinality &&\n                // selected regions can be updated during mousedown+drag and before mouseup; thus, we\n                // add a final check to make sure we don't enable reordering until the selection\n                // interaction is complete. this prevents one click+drag interaction from triggering\n                // both selection and reordering behavior.\n                selectedRegions.length === 1 &&\n                // columns are reordered via a reorder handle, so drag-selection needn't be disabled\n                !_this.isReorderHandleEnabled());\n        };\n        _this.state = { hasValidSelection: _this.isSelectedRegionsControlledAndNonEmpty(props) };\n        return _this;\n    }\n    Header.prototype.componentDidUpdate = function (_, prevState) {\n        var nextHasValidSection = this.isSelectedRegionsControlledAndNonEmpty(this.props);\n        if (prevState.hasValidSelection !== nextHasValidSection) {\n            this.setState({ hasValidSelection: nextHasValidSection });\n        }\n    };\n    Header.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n        return (!CoreUtils.shallowCompareKeys(this.state, nextState) ||\n            !CoreUtils.shallowCompareKeys(this.props, nextProps, {\n                exclude: SHALLOW_COMPARE_PROP_KEYS_DENYLIST,\n            }) ||\n            !CoreUtils.deepCompareKeys(this.props, nextProps, SHALLOW_COMPARE_PROP_KEYS_DENYLIST));\n    };\n    Header.prototype.render = function () {\n        return this.props.wrapCells(this.renderCells());\n    };\n    Header.prototype.isSelectedRegionsControlledAndNonEmpty = function (props) {\n        if (props === void 0) { props = this.props; }\n        return props.selectedRegions != null && props.selectedRegions.length > 0;\n    };\n    Header.prototype.isReorderHandleEnabled = function () {\n        // the reorder handle can only appear in the column interaction bar\n        return this.isColumnHeader() && this.props.isReorderable;\n    };\n    Header.prototype.maybeRenderReorderHandle = function (index) {\n        return !this.isReorderHandleEnabled()\n            ? undefined\n            : this.wrapInDragReorderable(index, React.createElement(\"div\", { className: Classes.TABLE_REORDER_HANDLE_TARGET },\n                React.createElement(\"div\", { className: classNames(Classes.TABLE_REORDER_HANDLE, CLASSNAME_EXCLUDED_FROM_TEXT_MEASUREMENT) },\n                    React.createElement(Icon, { icon: \"drag-handle-vertical\", title: \"Press down to drag\" }))), false);\n    };\n    Header.prototype.isColumnHeader = function () {\n        return this.props.fullRegionCardinality === RegionCardinality.FULL_COLUMNS;\n    };\n    Header.prototype.wrapInDragReorderable = function (index, children, disabled) {\n        return (React.createElement(DragReorderable, { disabled: disabled, key: this.props.getIndexClass(index), locateClick: this.locateClick, locateDrag: this.locateDragForReordering, onReordered: this.props.onReordered, onReordering: this.props.onReordering, onSelection: this.props.onSelection, onFocusedCell: this.props.onFocusedCell, selectedRegions: this.props.selectedRegions, toRegion: this.props.toRegion }, children));\n    };\n    return Header;\n}(React.Component));\nexport { Header };\n//# sourceMappingURL=header.js.map"]},"metadata":{},"sourceType":"module"}