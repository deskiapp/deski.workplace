{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nimport { Orientation } from \"../interactions/resizeHandle\";\nimport { RegionCardinality, Regions } from \"../regions\";\nimport { Header } from \"./header\";\nimport { RowHeaderCell } from \"./rowHeaderCell\";\n\nvar RowHeader = function (_super) {\n  __extends(RowHeader, _super);\n\n  function RowHeader() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.wrapCells = function (cells) {\n      var _a = _this.props,\n          rowIndexStart = _a.rowIndexStart,\n          grid = _a.grid;\n      var tableHeight = grid.getRect().height;\n\n      var scrollTopCorrection = _this.props.grid.getCumulativeHeightBefore(rowIndexStart);\n\n      var style = {\n        // reduce the height to clamp the sliding window as we approach the final headers; otherwise,\n        // we'll have tons of useless whitespace at the end.\n        height: tableHeight - scrollTopCorrection,\n        // only header cells in view will render, but we need to reposition them to stay in view\n        // as we scroll vertically.\n        transform: \"translateY(\" + (scrollTopCorrection || 0) + \"px)\"\n      }; // add a wrapper set to the full-table height to ensure container styles stretch from the first\n      // cell all the way to the last\n\n      return React.createElement(\"div\", {\n        style: {\n          height: tableHeight\n        }\n      }, React.createElement(\"div\", {\n        className: Classes.TABLE_ROW_HEADERS_CELLS_CONTAINER,\n        style: style\n      }, cells));\n    };\n\n    _this.convertPointToRow = function (clientXOrY, useMidpoint) {\n      var locator = _this.props.locator;\n      return locator != null ? locator.convertPointToRow(clientXOrY, useMidpoint) : null;\n    };\n\n    _this.getCellExtremaClasses = function (index, indexEnd) {\n      return _this.props.grid.getExtremaClasses(index, 0, indexEnd, 1);\n    };\n\n    _this.getRowHeight = function (index) {\n      return _this.props.grid.getRowRect(index).height;\n    };\n\n    _this.getDragCoordinate = function (clientCoords) {\n      return clientCoords[1]; // y-coordinate\n    };\n\n    _this.getMouseCoordinate = function (event) {\n      return event.clientY;\n    };\n\n    _this.handleResizeEnd = function (index, size) {\n      _this.props.onResizeGuide(null);\n\n      _this.props.onRowHeightChanged(index, size);\n    };\n\n    _this.handleSizeChanged = function (index, size) {\n      var rect = _this.props.grid.getRowRect(index);\n\n      _this.props.onResizeGuide([rect.top + size]);\n    };\n\n    _this.isCellSelected = function (index) {\n      return Regions.hasFullRow(_this.props.selectedRegions, index);\n    };\n\n    _this.isGhostIndex = function (index) {\n      return _this.props.grid.isGhostIndex(index, -1);\n    };\n\n    _this.renderGhostCell = function (index, extremaClasses) {\n      var rect = _this.props.grid.getGhostCellRect(index, 0);\n\n      return React.createElement(RowHeaderCell, {\n        className: classNames(extremaClasses),\n        index: index,\n        key: Classes.rowIndexClass(index),\n        loading: _this.props.loading,\n        style: {\n          height: rect.height + \"px\"\n        }\n      });\n    };\n\n    _this.toRegion = function (index1, index2) {\n      // the `this` value is messed up for Regions.row, so we have to have a wrapper function here\n      return Regions.row(index1, index2);\n    };\n\n    return _this;\n  }\n\n  RowHeader.prototype.render = function () {\n    var _a = this.props,\n        // from IRowHeaderProps\n    onRowHeightChanged = _a.onRowHeightChanged,\n        renderHeaderCell = _a.rowHeaderCellRenderer,\n        // from IRowHeights\n    minSize = _a.minRowHeight,\n        maxSize = _a.maxRowHeight,\n        defaultRowHeight = _a.defaultRowHeight,\n        // from IRowIndices\n    indexStart = _a.rowIndexStart,\n        indexEnd = _a.rowIndexEnd,\n        // from IHeaderProps\n    spreadableProps = __rest(_a, [\"onRowHeightChanged\", \"rowHeaderCellRenderer\", \"minRowHeight\", \"maxRowHeight\", \"defaultRowHeight\", \"rowIndexStart\", \"rowIndexEnd\"]);\n\n    return React.createElement(Header, __assign({\n      convertPointToIndex: this.convertPointToRow,\n      fullRegionCardinality: RegionCardinality.FULL_ROWS,\n      getCellExtremaClasses: this.getCellExtremaClasses,\n      getCellIndexClass: Classes.rowCellIndexClass,\n      getCellSize: this.getRowHeight,\n      getDragCoordinate: this.getDragCoordinate,\n      getIndexClass: Classes.rowIndexClass,\n      getMouseCoordinate: this.getMouseCoordinate,\n      ghostCellRenderer: this.renderGhostCell,\n      handleResizeEnd: this.handleResizeEnd,\n      handleSizeChanged: this.handleSizeChanged,\n      headerCellIsReorderablePropName: \"enableRowReordering\",\n      headerCellIsSelectedPropName: \"isRowSelected\",\n      headerCellRenderer: renderHeaderCell,\n      indexEnd: indexEnd,\n      indexStart: indexStart,\n      isCellSelected: this.isCellSelected,\n      isGhostIndex: this.isGhostIndex,\n      maxSize: maxSize,\n      minSize: minSize,\n      resizeOrientation: Orientation.HORIZONTAL,\n      selectedRegions: [],\n      toRegion: this.toRegion,\n      wrapCells: this.wrapCells\n    }, spreadableProps));\n  };\n\n  RowHeader.defaultProps = {\n    rowHeaderCellRenderer: renderDefaultRowHeader\n  };\n  return RowHeader;\n}(React.Component);\n\nexport { RowHeader };\n/**\n * A default implementation of `IRowHeaderRenderer` that displays 1-indexed\n * numbers for each row.\n */\n\nexport function renderDefaultRowHeader(rowIndex) {\n  return React.createElement(RowHeaderCell, {\n    index: rowIndex,\n    name: \"\" + (rowIndex + 1)\n  });\n}","map":{"version":3,"sources":["../../../src/headers/rowHeader.tsx"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;;AAEH,OAAO,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAEA,OAAO,KAAK,OAAZ,MAAyB,mBAAzB;AAIA,SAAS,WAAT,QAA4B,8BAA5B;AACA,SAAS,iBAAT,EAA4B,OAA5B,QAA2C,YAA3C;AACA,SAAS,MAAT,QAAqC,UAArC;AACA,SAA8B,aAA9B,QAAmD,iBAAnD;;AAyBA,IAAA,SAAA,GAAA,UAAA,MAAA,EAAA;AAA+B,EAAA,SAAA,CAAA,SAAA,EAAA,MAAA,CAAA;;AAA/B,WAAA,SAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AAuDY,IAAA,KAAA,CAAA,SAAA,GAAY,UAAC,KAAD,EAAsC;AAChD,UAAA,EAAA,GAA0B,KAAI,CAAC,KAA/B;AAAA,UAAE,aAAa,GAAA,EAAA,CAAA,aAAf;AAAA,UAAiB,IAAI,GAAA,EAAA,CAAA,IAArB;AAEN,UAAM,WAAW,GAAG,IAAI,CAAC,OAAL,GAAe,MAAnC;;AACA,UAAM,mBAAmB,GAAG,KAAI,CAAC,KAAL,CAAW,IAAX,CAAgB,yBAAhB,CAA0C,aAA1C,CAA5B;;AACA,UAAM,KAAK,GAAwB;AAC/B;AACA;AACA,QAAA,MAAM,EAAE,WAAW,GAAG,mBAHS;AAI/B;AACA;AACA,QAAA,SAAS,EAAE,iBAAc,mBAAmB,IAAI,CAArC,IAAsC;AANlB,OAAnC,CALsD,CActD;AACA;;AACA,aACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,KAAK,EAAE;AAAE,UAAA,MAAM,EAAE;AAAV;AAAZ,OAAA,EACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,SAAS,EAAE,OAAO,CAAC,iCAAxB;AAA2D,QAAA,KAAK,EAAE;AAAlE,OAAA,EACK,KADL,CADJ,CADJ;AAOH,KAvBO;;AAyBA,IAAA,KAAA,CAAA,iBAAA,GAAoB,UAAC,UAAD,EAAqB,WAArB,EAA0C;AAC1D,UAAA,OAAO,GAAK,KAAI,CAAC,KAAL,CAAL,OAAP;AACR,aAAO,OAAO,IAAI,IAAX,GAAkB,OAAO,CAAC,iBAAR,CAA0B,UAA1B,EAAsC,WAAtC,CAAlB,GAAuE,IAA9E;AACH,KAHO;;AAKA,IAAA,KAAA,CAAA,qBAAA,GAAwB,UAAC,KAAD,EAAgB,QAAhB,EAAgC;AAC5D,aAAO,KAAI,CAAC,KAAL,CAAW,IAAX,CAAgB,iBAAhB,CAAkC,KAAlC,EAAyC,CAAzC,EAA4C,QAA5C,EAAsD,CAAtD,CAAP;AACH,KAFO;;AAIA,IAAA,KAAA,CAAA,YAAA,GAAe,UAAC,KAAD,EAAc;AACjC,aAAO,KAAI,CAAC,KAAL,CAAW,IAAX,CAAgB,UAAhB,CAA2B,KAA3B,EAAkC,MAAzC;AACH,KAFO;;AAIA,IAAA,KAAA,CAAA,iBAAA,GAAoB,UAAC,YAAD,EAAiC;AACzD,aAAO,YAAY,CAAC,CAAD,CAAnB,CADyD,CACjC;AAC3B,KAFO;;AAIA,IAAA,KAAA,CAAA,kBAAA,GAAqB,UAAC,KAAD,EAAkB;AAC3C,aAAO,KAAK,CAAC,OAAb;AACH,KAFO;;AAIA,IAAA,KAAA,CAAA,eAAA,GAAkB,UAAC,KAAD,EAAgB,IAAhB,EAA4B;AAClD,MAAA,KAAI,CAAC,KAAL,CAAW,aAAX,CAAyB,IAAzB;;AACA,MAAA,KAAI,CAAC,KAAL,CAAW,kBAAX,CAA8B,KAA9B,EAAqC,IAArC;AACH,KAHO;;AAKA,IAAA,KAAA,CAAA,iBAAA,GAAoB,UAAC,KAAD,EAAgB,IAAhB,EAA4B;AACpD,UAAM,IAAI,GAAG,KAAI,CAAC,KAAL,CAAW,IAAX,CAAgB,UAAhB,CAA2B,KAA3B,CAAb;;AACA,MAAA,KAAI,CAAC,KAAL,CAAW,aAAX,CAAyB,CAAC,IAAI,CAAC,GAAL,GAAW,IAAZ,CAAzB;AACH,KAHO;;AAKA,IAAA,KAAA,CAAA,cAAA,GAAiB,UAAC,KAAD,EAAc;AACnC,aAAO,OAAO,CAAC,UAAR,CAAmB,KAAI,CAAC,KAAL,CAAW,eAA9B,EAA+C,KAA/C,CAAP;AACH,KAFO;;AAIA,IAAA,KAAA,CAAA,YAAA,GAAe,UAAC,KAAD,EAAc;AACjC,aAAO,KAAI,CAAC,KAAL,CAAW,IAAX,CAAgB,YAAhB,CAA6B,KAA7B,EAAoC,CAAC,CAArC,CAAP;AACH,KAFO;;AAIA,IAAA,KAAA,CAAA,eAAA,GAAkB,UAAC,KAAD,EAAgB,cAAhB,EAAwC;AAC9D,UAAM,IAAI,GAAG,KAAI,CAAC,KAAL,CAAW,IAAX,CAAgB,gBAAhB,CAAiC,KAAjC,EAAwC,CAAxC,CAAb;;AACA,aACI,KAAA,CAAA,aAAA,CAAC,aAAD,EAAc;AACV,QAAA,SAAS,EAAE,UAAU,CAAC,cAAD,CADX;AAEV,QAAA,KAAK,EAAE,KAFG;AAGV,QAAA,GAAG,EAAE,OAAO,CAAC,aAAR,CAAsB,KAAtB,CAHK;AAIV,QAAA,OAAO,EAAE,KAAI,CAAC,KAAL,CAAW,OAJV;AAKV,QAAA,KAAK,EAAE;AAAE,UAAA,MAAM,EAAK,IAAI,CAAC,MAAL,GAAW;AAAxB;AALG,OAAd,CADJ;AASH,KAXO;;AAaA,IAAA,KAAA,CAAA,QAAA,GAAW,UAAC,MAAD,EAAiB,MAAjB,EAAgC;AAC/C;AACA,aAAO,OAAO,CAAC,GAAR,CAAY,MAAZ,EAAoB,MAApB,CAAP;AACH,KAHO;;;AAIX;;AAnIU,EAAA,SAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACI,QAAM,EAAA,GAgBF,KAAK,KAhBT;AAAA,QACI;AACA,IAAA,kBAAkB,GAAA,EAAA,CAAA,kBAFtB;AAAA,QAG2B,gBAAgB,GAAA,EAAA,CAAA,qBAH3C;AAAA,QAKI;AACc,IAAA,OAAO,GAAA,EAAA,CAAA,YANzB;AAAA,QAOkB,OAAO,GAAA,EAAA,CAAA,YAPzB;AAAA,QAQI,gBAAgB,GAAA,EAAA,CAAA,gBARpB;AAAA,QAUI;AACe,IAAA,UAAU,GAAA,EAAA,CAAA,aAX7B;AAAA,QAYiB,QAAQ,GAAA,EAAA,CAAA,WAZzB;AAAA,QAcI;AACG,IAAA,eAAe,GAAA,MAAA,CAAA,EAAA,EAfhB,CAAA,oBAAA,EAAA,uBAAA,EAAA,cAAA,EAAA,cAAA,EAAA,kBAAA,EAAA,eAAA,EAAA,aAAA,CAegB,CAftB;;AAkBA,WACI,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO,QAAA,CAAA;AACH,MAAA,mBAAmB,EAAE,KAAK,iBADvB;AAEH,MAAA,qBAAqB,EAAE,iBAAiB,CAAC,SAFtC;AAGH,MAAA,qBAAqB,EAAE,KAAK,qBAHzB;AAIH,MAAA,iBAAiB,EAAE,OAAO,CAAC,iBAJxB;AAKH,MAAA,WAAW,EAAE,KAAK,YALf;AAMH,MAAA,iBAAiB,EAAE,KAAK,iBANrB;AAOH,MAAA,aAAa,EAAE,OAAO,CAAC,aAPpB;AAQH,MAAA,kBAAkB,EAAE,KAAK,kBARtB;AASH,MAAA,iBAAiB,EAAE,KAAK,eATrB;AAUH,MAAA,eAAe,EAAE,KAAK,eAVnB;AAWH,MAAA,iBAAiB,EAAE,KAAK,iBAXrB;AAYH,MAAA,+BAA+B,EAAE,qBAZ9B;AAaH,MAAA,4BAA4B,EAAE,eAb3B;AAcH,MAAA,kBAAkB,EAAE,gBAdjB;AAeH,MAAA,QAAQ,EAAE,QAfP;AAgBH,MAAA,UAAU,EAAE,UAhBT;AAiBH,MAAA,cAAc,EAAE,KAAK,cAjBlB;AAkBH,MAAA,YAAY,EAAE,KAAK,YAlBhB;AAmBH,MAAA,OAAO,EAAE,OAnBN;AAoBH,MAAA,OAAO,EAAE,OApBN;AAqBH,MAAA,iBAAiB,EAAE,WAAW,CAAC,UArB5B;AAsBH,MAAA,eAAe,EAAE,EAtBd;AAuBH,MAAA,QAAQ,EAAE,KAAK,QAvBZ;AAwBH,MAAA,SAAS,EAAE,KAAK;AAxBb,KAAA,EAyBC,eAzBD,CAAP,CADJ;AA6BH,GAhDM;;AAJO,EAAA,SAAA,CAAA,YAAA,GAAe;AACzB,IAAA,qBAAqB,EAAE;AADE,GAAf;AAuIlB,SAAA,SAAA;AAAC,CAxID,CAA+B,KAAK,CAAC,SAArC,CAAA;;SAAa,S;AA0Ib;;;AAGG;;AACH,OAAM,SAAU,sBAAV,CAAiC,QAAjC,EAAiD;AACnD,SAAO,KAAA,CAAA,aAAA,CAAC,aAAD,EAAc;AAAC,IAAA,KAAK,EAAE,QAAR;AAAkB,IAAA,IAAI,EAAE,MAAG,QAAQ,GAAG,CAAd;AAAxB,GAAd,CAAP;AACH","sourceRoot":"","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nimport { Orientation } from \"../interactions/resizeHandle\";\nimport { RegionCardinality, Regions } from \"../regions\";\nimport { Header } from \"./header\";\nimport { RowHeaderCell } from \"./rowHeaderCell\";\nvar RowHeader = /** @class */ (function (_super) {\n    __extends(RowHeader, _super);\n    function RowHeader() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.wrapCells = function (cells) {\n            var _a = _this.props, rowIndexStart = _a.rowIndexStart, grid = _a.grid;\n            var tableHeight = grid.getRect().height;\n            var scrollTopCorrection = _this.props.grid.getCumulativeHeightBefore(rowIndexStart);\n            var style = {\n                // reduce the height to clamp the sliding window as we approach the final headers; otherwise,\n                // we'll have tons of useless whitespace at the end.\n                height: tableHeight - scrollTopCorrection,\n                // only header cells in view will render, but we need to reposition them to stay in view\n                // as we scroll vertically.\n                transform: \"translateY(\" + (scrollTopCorrection || 0) + \"px)\",\n            };\n            // add a wrapper set to the full-table height to ensure container styles stretch from the first\n            // cell all the way to the last\n            return (React.createElement(\"div\", { style: { height: tableHeight } },\n                React.createElement(\"div\", { className: Classes.TABLE_ROW_HEADERS_CELLS_CONTAINER, style: style }, cells)));\n        };\n        _this.convertPointToRow = function (clientXOrY, useMidpoint) {\n            var locator = _this.props.locator;\n            return locator != null ? locator.convertPointToRow(clientXOrY, useMidpoint) : null;\n        };\n        _this.getCellExtremaClasses = function (index, indexEnd) {\n            return _this.props.grid.getExtremaClasses(index, 0, indexEnd, 1);\n        };\n        _this.getRowHeight = function (index) {\n            return _this.props.grid.getRowRect(index).height;\n        };\n        _this.getDragCoordinate = function (clientCoords) {\n            return clientCoords[1]; // y-coordinate\n        };\n        _this.getMouseCoordinate = function (event) {\n            return event.clientY;\n        };\n        _this.handleResizeEnd = function (index, size) {\n            _this.props.onResizeGuide(null);\n            _this.props.onRowHeightChanged(index, size);\n        };\n        _this.handleSizeChanged = function (index, size) {\n            var rect = _this.props.grid.getRowRect(index);\n            _this.props.onResizeGuide([rect.top + size]);\n        };\n        _this.isCellSelected = function (index) {\n            return Regions.hasFullRow(_this.props.selectedRegions, index);\n        };\n        _this.isGhostIndex = function (index) {\n            return _this.props.grid.isGhostIndex(index, -1);\n        };\n        _this.renderGhostCell = function (index, extremaClasses) {\n            var rect = _this.props.grid.getGhostCellRect(index, 0);\n            return (React.createElement(RowHeaderCell, { className: classNames(extremaClasses), index: index, key: Classes.rowIndexClass(index), loading: _this.props.loading, style: { height: rect.height + \"px\" } }));\n        };\n        _this.toRegion = function (index1, index2) {\n            // the `this` value is messed up for Regions.row, so we have to have a wrapper function here\n            return Regions.row(index1, index2);\n        };\n        return _this;\n    }\n    RowHeader.prototype.render = function () {\n        var _a = this.props, \n        // from IRowHeaderProps\n        onRowHeightChanged = _a.onRowHeightChanged, renderHeaderCell = _a.rowHeaderCellRenderer, \n        // from IRowHeights\n        minSize = _a.minRowHeight, maxSize = _a.maxRowHeight, defaultRowHeight = _a.defaultRowHeight, \n        // from IRowIndices\n        indexStart = _a.rowIndexStart, indexEnd = _a.rowIndexEnd, \n        // from IHeaderProps\n        spreadableProps = __rest(_a, [\"onRowHeightChanged\", \"rowHeaderCellRenderer\", \"minRowHeight\", \"maxRowHeight\", \"defaultRowHeight\", \"rowIndexStart\", \"rowIndexEnd\"]);\n        return (React.createElement(Header, __assign({ convertPointToIndex: this.convertPointToRow, fullRegionCardinality: RegionCardinality.FULL_ROWS, getCellExtremaClasses: this.getCellExtremaClasses, getCellIndexClass: Classes.rowCellIndexClass, getCellSize: this.getRowHeight, getDragCoordinate: this.getDragCoordinate, getIndexClass: Classes.rowIndexClass, getMouseCoordinate: this.getMouseCoordinate, ghostCellRenderer: this.renderGhostCell, handleResizeEnd: this.handleResizeEnd, handleSizeChanged: this.handleSizeChanged, headerCellIsReorderablePropName: \"enableRowReordering\", headerCellIsSelectedPropName: \"isRowSelected\", headerCellRenderer: renderHeaderCell, indexEnd: indexEnd, indexStart: indexStart, isCellSelected: this.isCellSelected, isGhostIndex: this.isGhostIndex, maxSize: maxSize, minSize: minSize, resizeOrientation: Orientation.HORIZONTAL, selectedRegions: [], toRegion: this.toRegion, wrapCells: this.wrapCells }, spreadableProps)));\n    };\n    RowHeader.defaultProps = {\n        rowHeaderCellRenderer: renderDefaultRowHeader,\n    };\n    return RowHeader;\n}(React.Component));\nexport { RowHeader };\n/**\n * A default implementation of `IRowHeaderRenderer` that displays 1-indexed\n * numbers for each row.\n */\nexport function renderDefaultRowHeader(rowIndex) {\n    return React.createElement(RowHeaderCell, { index: rowIndex, name: \"\" + (rowIndex + 1) });\n}\n//# sourceMappingURL=rowHeader.js.map"]},"metadata":{},"sourceType":"module"}