{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nimport { Utils } from \"../common/index\";\nimport { Orientation } from \"../interactions/resizeHandle\";\nimport { RegionCardinality, Regions } from \"../regions\";\nimport { ColumnHeaderCell } from \"./columnHeaderCell\";\nimport { Header } from \"./header\";\n\nvar ColumnHeader = function (_super) {\n  __extends(ColumnHeader, _super);\n\n  function ColumnHeader() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.wrapCells = function (cells) {\n      var _a = _this.props,\n          columnIndexStart = _a.columnIndexStart,\n          grid = _a.grid;\n      var tableWidth = grid.getRect().width;\n\n      var scrollLeftCorrection = _this.props.grid.getCumulativeWidthBefore(columnIndexStart);\n\n      var style = {\n        // only header cells in view will render, but we need to reposition them to stay in view\n        // as we scroll horizontally.\n        transform: \"translateX(\" + (scrollLeftCorrection || 0) + \"px)\",\n        // reduce the width to clamp the sliding window as we approach the final headers; otherwise,\n        // we'll have tons of useless whitespace at the end.\n        width: tableWidth - scrollLeftCorrection\n      };\n      var classes = classNames(Classes.TABLE_THEAD, Classes.TABLE_COLUMN_HEADER_TR); // add a wrapper set to the full-table width to ensure container styles stretch from the first\n      // cell all the way to the last\n\n      return React.createElement(\"div\", {\n        style: {\n          width: tableWidth\n        }\n      }, React.createElement(\"div\", {\n        style: style,\n        className: classes,\n        ref: _this.props.measurableElementRef\n      }, cells));\n    };\n\n    _this.convertPointToColumn = function (clientXOrY, useMidpoint) {\n      var locator = _this.props.locator;\n      return locator != null ? locator.convertPointToColumn(clientXOrY, useMidpoint) : null;\n    };\n\n    _this.getCellExtremaClasses = function (index, indexEnd) {\n      return _this.props.grid.getExtremaClasses(0, index, 1, indexEnd);\n    };\n\n    _this.getColumnWidth = function (index) {\n      return _this.props.grid.getColumnRect(index).width;\n    };\n\n    _this.getDragCoordinate = function (clientCoords) {\n      return clientCoords[0]; // x-coordinate\n    };\n\n    _this.getMouseCoordinate = function (event) {\n      return event.clientX;\n    };\n\n    _this.handleResizeEnd = function (index, size) {\n      _this.props.onResizeGuide(null);\n\n      _this.props.onColumnWidthChanged(index, size);\n    };\n\n    _this.handleResizeDoubleClick = function (index) {\n      var _a = _this.props,\n          minColumnWidth = _a.minColumnWidth,\n          maxColumnWidth = _a.maxColumnWidth;\n\n      var width = _this.props.locator.getWidestVisibleCellInColumn(index);\n\n      var clampedWidth = Utils.clamp(width, minColumnWidth, maxColumnWidth);\n\n      _this.props.onResizeGuide(null);\n\n      _this.props.onColumnWidthChanged(index, clampedWidth);\n    };\n\n    _this.handleSizeChanged = function (index, size) {\n      var rect = _this.props.grid.getColumnRect(index);\n\n      _this.props.onResizeGuide([rect.left + size]);\n    };\n\n    _this.isCellSelected = function (index) {\n      return Regions.hasFullColumn(_this.props.selectedRegions, index);\n    };\n\n    _this.isGhostIndex = function (index) {\n      return _this.props.grid.isGhostIndex(-1, index);\n    };\n\n    _this.renderGhostCell = function (index, extremaClasses) {\n      var _a = _this.props,\n          grid = _a.grid,\n          loading = _a.loading;\n      var rect = grid.getGhostCellRect(0, index);\n      var style = {\n        flexBasis: rect.width + \"px\",\n        width: rect.width + \"px\"\n      };\n      return React.createElement(ColumnHeaderCell, {\n        className: classNames(extremaClasses),\n        index: index,\n        key: Classes.columnIndexClass(index),\n        loading: loading,\n        style: style\n      });\n    };\n\n    _this.toRegion = function (index1, index2) {\n      return Regions.column(index1, index2);\n    };\n\n    return _this;\n  }\n\n  ColumnHeader.prototype.render = function () {\n    var _a = this.props,\n        // from IColumnHeaderProps\n    renderHeaderCell = _a.cellRenderer,\n        onColumnWidthChanged = _a.onColumnWidthChanged,\n        // from IColumnWidths\n    minSize = _a.minColumnWidth,\n        maxSize = _a.maxColumnWidth,\n        defaultColumnWidth = _a.defaultColumnWidth,\n        // from IColumnIndices\n    indexStart = _a.columnIndexStart,\n        indexEnd = _a.columnIndexEnd,\n        // from IHeaderProps\n    spreadableProps = __rest(_a, [\"cellRenderer\", \"onColumnWidthChanged\", \"minColumnWidth\", \"maxColumnWidth\", \"defaultColumnWidth\", \"columnIndexStart\", \"columnIndexEnd\"]);\n\n    return React.createElement(Header, __assign({\n      convertPointToIndex: this.convertPointToColumn,\n      fullRegionCardinality: RegionCardinality.FULL_COLUMNS,\n      getCellExtremaClasses: this.getCellExtremaClasses,\n      getCellIndexClass: Classes.columnCellIndexClass,\n      getCellSize: this.getColumnWidth,\n      getDragCoordinate: this.getDragCoordinate,\n      getIndexClass: Classes.columnIndexClass,\n      getMouseCoordinate: this.getMouseCoordinate,\n      ghostCellRenderer: this.renderGhostCell,\n      handleResizeDoubleClick: this.handleResizeDoubleClick,\n      handleResizeEnd: this.handleResizeEnd,\n      handleSizeChanged: this.handleSizeChanged,\n      headerCellIsReorderablePropName: \"enableColumnReordering\",\n      headerCellIsSelectedPropName: \"isColumnSelected\",\n      headerCellRenderer: renderHeaderCell,\n      indexEnd: indexEnd,\n      indexStart: indexStart,\n      isCellSelected: this.isCellSelected,\n      isGhostIndex: this.isGhostIndex,\n      maxSize: maxSize,\n      minSize: minSize,\n      resizeOrientation: Orientation.VERTICAL,\n      selectedRegions: [],\n      toRegion: this.toRegion,\n      wrapCells: this.wrapCells\n    }, spreadableProps));\n  };\n\n  ColumnHeader.defaultProps = {\n    isReorderable: false,\n    isResizable: true,\n    loading: false\n  };\n  return ColumnHeader;\n}(React.Component);\n\nexport { ColumnHeader };","map":{"version":3,"sources":["../../../src/headers/columnHeader.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nimport { Utils } from \"../common/index\";\nimport { Orientation } from \"../interactions/resizeHandle\";\nimport { RegionCardinality, Regions } from \"../regions\";\nimport { ColumnHeaderCell } from \"./columnHeaderCell\";\nimport { Header } from \"./header\";\nvar ColumnHeader = /** @class */ (function (_super) {\n    __extends(ColumnHeader, _super);\n    function ColumnHeader() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.wrapCells = function (cells) {\n            var _a = _this.props, columnIndexStart = _a.columnIndexStart, grid = _a.grid;\n            var tableWidth = grid.getRect().width;\n            var scrollLeftCorrection = _this.props.grid.getCumulativeWidthBefore(columnIndexStart);\n            var style = {\n                // only header cells in view will render, but we need to reposition them to stay in view\n                // as we scroll horizontally.\n                transform: \"translateX(\" + (scrollLeftCorrection || 0) + \"px)\",\n                // reduce the width to clamp the sliding window as we approach the final headers; otherwise,\n                // we'll have tons of useless whitespace at the end.\n                width: tableWidth - scrollLeftCorrection,\n            };\n            var classes = classNames(Classes.TABLE_THEAD, Classes.TABLE_COLUMN_HEADER_TR);\n            // add a wrapper set to the full-table width to ensure container styles stretch from the first\n            // cell all the way to the last\n            return (React.createElement(\"div\", { style: { width: tableWidth } },\n                React.createElement(\"div\", { style: style, className: classes, ref: _this.props.measurableElementRef }, cells)));\n        };\n        _this.convertPointToColumn = function (clientXOrY, useMidpoint) {\n            var locator = _this.props.locator;\n            return locator != null ? locator.convertPointToColumn(clientXOrY, useMidpoint) : null;\n        };\n        _this.getCellExtremaClasses = function (index, indexEnd) {\n            return _this.props.grid.getExtremaClasses(0, index, 1, indexEnd);\n        };\n        _this.getColumnWidth = function (index) {\n            return _this.props.grid.getColumnRect(index).width;\n        };\n        _this.getDragCoordinate = function (clientCoords) {\n            return clientCoords[0]; // x-coordinate\n        };\n        _this.getMouseCoordinate = function (event) {\n            return event.clientX;\n        };\n        _this.handleResizeEnd = function (index, size) {\n            _this.props.onResizeGuide(null);\n            _this.props.onColumnWidthChanged(index, size);\n        };\n        _this.handleResizeDoubleClick = function (index) {\n            var _a = _this.props, minColumnWidth = _a.minColumnWidth, maxColumnWidth = _a.maxColumnWidth;\n            var width = _this.props.locator.getWidestVisibleCellInColumn(index);\n            var clampedWidth = Utils.clamp(width, minColumnWidth, maxColumnWidth);\n            _this.props.onResizeGuide(null);\n            _this.props.onColumnWidthChanged(index, clampedWidth);\n        };\n        _this.handleSizeChanged = function (index, size) {\n            var rect = _this.props.grid.getColumnRect(index);\n            _this.props.onResizeGuide([rect.left + size]);\n        };\n        _this.isCellSelected = function (index) {\n            return Regions.hasFullColumn(_this.props.selectedRegions, index);\n        };\n        _this.isGhostIndex = function (index) {\n            return _this.props.grid.isGhostIndex(-1, index);\n        };\n        _this.renderGhostCell = function (index, extremaClasses) {\n            var _a = _this.props, grid = _a.grid, loading = _a.loading;\n            var rect = grid.getGhostCellRect(0, index);\n            var style = {\n                flexBasis: rect.width + \"px\",\n                width: rect.width + \"px\",\n            };\n            return (React.createElement(ColumnHeaderCell, { className: classNames(extremaClasses), index: index, key: Classes.columnIndexClass(index), loading: loading, style: style }));\n        };\n        _this.toRegion = function (index1, index2) {\n            return Regions.column(index1, index2);\n        };\n        return _this;\n    }\n    ColumnHeader.prototype.render = function () {\n        var _a = this.props, \n        // from IColumnHeaderProps\n        renderHeaderCell = _a.cellRenderer, onColumnWidthChanged = _a.onColumnWidthChanged, \n        // from IColumnWidths\n        minSize = _a.minColumnWidth, maxSize = _a.maxColumnWidth, defaultColumnWidth = _a.defaultColumnWidth, \n        // from IColumnIndices\n        indexStart = _a.columnIndexStart, indexEnd = _a.columnIndexEnd, \n        // from IHeaderProps\n        spreadableProps = __rest(_a, [\"cellRenderer\", \"onColumnWidthChanged\", \"minColumnWidth\", \"maxColumnWidth\", \"defaultColumnWidth\", \"columnIndexStart\", \"columnIndexEnd\"]);\n        return (React.createElement(Header, __assign({ convertPointToIndex: this.convertPointToColumn, fullRegionCardinality: RegionCardinality.FULL_COLUMNS, getCellExtremaClasses: this.getCellExtremaClasses, getCellIndexClass: Classes.columnCellIndexClass, getCellSize: this.getColumnWidth, getDragCoordinate: this.getDragCoordinate, getIndexClass: Classes.columnIndexClass, getMouseCoordinate: this.getMouseCoordinate, ghostCellRenderer: this.renderGhostCell, handleResizeDoubleClick: this.handleResizeDoubleClick, handleResizeEnd: this.handleResizeEnd, handleSizeChanged: this.handleSizeChanged, headerCellIsReorderablePropName: \"enableColumnReordering\", headerCellIsSelectedPropName: \"isColumnSelected\", headerCellRenderer: renderHeaderCell, indexEnd: indexEnd, indexStart: indexStart, isCellSelected: this.isCellSelected, isGhostIndex: this.isGhostIndex, maxSize: maxSize, minSize: minSize, resizeOrientation: Orientation.VERTICAL, selectedRegions: [], toRegion: this.toRegion, wrapCells: this.wrapCells }, spreadableProps)));\n    };\n    ColumnHeader.defaultProps = {\n        isReorderable: false,\n        isResizable: true,\n        loading: false,\n    };\n    return ColumnHeader;\n}(React.Component));\nexport { ColumnHeader };\n//# sourceMappingURL=columnHeader.js.map"]},"metadata":{},"sourceType":"module"}