{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractComponent2, DISPLAYNAME_PREFIX, HotkeysTarget2, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport { Column } from \"./column\";\nimport * as Classes from \"./common/classes\";\nimport { columnInteractionBarContextTypes } from \"./common/context\";\nimport * as Errors from \"./common/errors\";\nimport { Grid } from \"./common/grid\";\nimport * as FocusedCellUtils from \"./common/internal/focusedCellUtils\";\nimport * as ScrollUtils from \"./common/internal/scrollUtils\";\nimport { Rect } from \"./common/rect\";\nimport { RenderMode } from \"./common/renderMode\";\nimport { Utils } from \"./common/utils\";\nimport { ColumnHeader } from \"./headers/columnHeader\";\nimport { ColumnHeaderCell } from \"./headers/columnHeaderCell\";\nimport { renderDefaultRowHeader, RowHeader } from \"./headers/rowHeader\";\nimport { ResizeSensor } from \"./interactions/resizeSensor\";\nimport { GuideLayer } from \"./layers/guides\";\nimport { RegionLayer } from \"./layers/regions\";\nimport { Locator } from \"./locator\";\nimport { QuadrantType } from \"./quadrants/tableQuadrant\";\nimport { TableQuadrantStack } from \"./quadrants/tableQuadrantStack\";\nimport { ColumnLoadingOption, RegionCardinality, Regions, SelectionModes, TableLoadingOption } from \"./regions\";\nimport { resizeRowsByApproximateHeight, resizeRowsByTallestCell } from \"./resizeRows\";\nimport { getHotkeysFromProps, isSelectionModeEnabled } from \"./table2Utils\";\nimport { TableBody } from \"./tableBody\";\nimport { TableHotkeys } from \"./tableHotkeys\";\nimport { clampNumFrozenColumns, clampNumFrozenRows, hasLoadingOption } from \"./tableUtils\";\n\nvar Table2 = function (_super) {\n  __extends(Table2, _super);\n\n  function Table2(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    _this.hotkeys = [];\n    _this.refHandlers = {\n      cellContainer: function (ref) {\n        return _this.cellContainerElement = ref;\n      },\n      columnHeader: function (ref) {\n        return _this.columnHeaderElement = ref;\n      },\n      quadrantStack: function (ref) {\n        return _this.quadrantStackInstance = ref;\n      },\n      rootTable: function (ref) {\n        return _this.rootTableElement = ref;\n      },\n      rowHeader: function (ref) {\n        return _this.rowHeaderElement = ref;\n      },\n      scrollContainer: function (ref) {\n        return _this.scrollContainerElement = ref;\n      }\n    };\n    /*\n     * This value is set to `true` when all cells finish mounting for the first\n     * time. It serves as a signal that we can switch to batch rendering.\n     */\n\n    _this.didCompletelyMount = false;\n\n    _this.renderTableContents = function (_a) {\n      var _b;\n\n      var handleKeyDown = _a.handleKeyDown,\n          handleKeyUp = _a.handleKeyUp;\n      var _c = _this.props,\n          children = _c.children,\n          className = _c.className,\n          enableRowHeader = _c.enableRowHeader,\n          loadingOptions = _c.loadingOptions,\n          numRows = _c.numRows,\n          enableColumnInteractionBar = _c.enableColumnInteractionBar;\n      var _d = _this.state,\n          horizontalGuides = _d.horizontalGuides,\n          numFrozenColumnsClamped = _d.numFrozenColumnsClamped,\n          numFrozenRowsClamped = _d.numFrozenRowsClamped,\n          verticalGuides = _d.verticalGuides;\n\n      if (!_this.gridDimensionsMatchProps()) {\n        // Ensure we're rendering the correct number of rows & columns\n        _this.invalidateGrid();\n      }\n\n      _this.validateGrid();\n\n      var classes = classNames(Classes.TABLE_CONTAINER, (_b = {}, _b[Classes.TABLE_REORDERING] = _this.state.isReordering, _b[Classes.TABLE_NO_VERTICAL_SCROLL] = _this.shouldDisableVerticalScroll(), _b[Classes.TABLE_NO_HORIZONTAL_SCROLL] = _this.shouldDisableHorizontalScroll(), _b[Classes.TABLE_SELECTION_ENABLED] = isSelectionModeEnabled(_this.props, RegionCardinality.CELLS), _b[Classes.TABLE_NO_ROWS] = numRows === 0, _b), className);\n      return React.createElement(\"div\", {\n        className: classes,\n        ref: _this.refHandlers.rootTable,\n        onScroll: _this.handleRootScroll,\n        onKeyDown: handleKeyDown,\n        onKeyUp: handleKeyUp,\n        tabIndex: 0\n      }, React.createElement(TableQuadrantStack, {\n        bodyRef: _this.refHandlers.cellContainer,\n        bodyRenderer: _this.renderBody,\n        columnHeaderCellRenderer: _this.renderColumnHeader,\n        columnHeaderRef: _this.refHandlers.columnHeader,\n        enableColumnInteractionBar: enableColumnInteractionBar,\n        enableRowHeader: enableRowHeader,\n        grid: _this.grid,\n        handleColumnResizeGuide: _this.handleColumnResizeGuide,\n        handleColumnsReordering: _this.handleColumnsReordering,\n        handleRowResizeGuide: _this.handleRowResizeGuide,\n        handleRowsReordering: _this.handleRowsReordering,\n        isHorizontalScrollDisabled: _this.shouldDisableHorizontalScroll(),\n        isVerticalScrollDisabled: _this.shouldDisableVerticalScroll(),\n        loadingOptions: loadingOptions,\n        numColumns: React.Children.count(children),\n        numFrozenColumns: numFrozenColumnsClamped,\n        numFrozenRows: numFrozenRowsClamped,\n        numRows: numRows,\n        onScroll: _this.handleBodyScroll,\n        ref: _this.refHandlers.quadrantStack,\n        menuRenderer: _this.renderMenu,\n        rowHeaderCellRenderer: _this.renderRowHeader,\n        rowHeaderRef: _this.refHandlers.rowHeader,\n        scrollContainerRef: _this.refHandlers.scrollContainer\n      }), React.createElement(\"div\", {\n        className: classNames(Classes.TABLE_OVERLAY_LAYER, Classes.TABLE_OVERLAY_REORDERING_CURSOR)\n      }), React.createElement(GuideLayer, {\n        className: Classes.TABLE_RESIZE_GUIDES,\n        verticalGuides: verticalGuides,\n        horizontalGuides: horizontalGuides\n      }));\n    };\n\n    _this.renderMenu = function (refHandler) {\n      var _a;\n\n      var classes = classNames(Classes.TABLE_MENU, (_a = {}, _a[Classes.TABLE_SELECTION_ENABLED] = isSelectionModeEnabled(_this.props, RegionCardinality.FULL_TABLE), _a));\n      return React.createElement(\"div\", {\n        className: classes,\n        ref: refHandler,\n        onMouseDown: _this.handleMenuMouseDown\n      }, _this.maybeRenderRegions(_this.styleMenuRegion));\n    };\n\n    _this.handleMenuMouseDown = function (e) {\n      // the shift+click interaction expands the region from the focused cell.\n      // thus, if shift is pressed we shouldn't move the focused cell.\n      _this.selectAll(!e.shiftKey);\n    };\n\n    _this.selectAll = function (shouldUpdateFocusedCell) {\n      var selectionHandler = _this.getEnabledSelectionHandler(RegionCardinality.FULL_TABLE); // clicking on upper left hand corner sets selection to \"all\"\n      // regardless of current selection state (clicking twice does not deselect table)\n\n\n      selectionHandler([Regions.table()]);\n\n      if (shouldUpdateFocusedCell) {\n        var newFocusedCellCoordinates = Regions.getFocusCellCoordinatesFromRegion(Regions.table());\n\n        _this.handleFocus(FocusedCellUtils.toFullCoordinates(newFocusedCellCoordinates));\n      }\n    };\n\n    _this.columnHeaderCellRenderer = function (columnIndex) {\n      var props = _this.getColumnProps(columnIndex);\n\n      if (props === undefined) {\n        return null;\n      }\n\n      var id = props.id,\n          loadingOptions = props.loadingOptions,\n          cellRenderer = props.cellRenderer,\n          columnHeaderCellRenderer = props.columnHeaderCellRenderer,\n          spreadableProps = __rest(props, [\"id\", \"loadingOptions\", \"cellRenderer\", \"columnHeaderCellRenderer\"]);\n\n      var columnLoading = hasLoadingOption(loadingOptions, ColumnLoadingOption.HEADER);\n\n      if (columnHeaderCellRenderer != null) {\n        var columnHeaderCell = columnHeaderCellRenderer(columnIndex);\n        var columnHeaderCellLoading = columnHeaderCell.props.loading;\n        var columnHeaderCellProps = {\n          loading: columnHeaderCellLoading != null ? columnHeaderCellLoading : columnLoading\n        };\n        return React.cloneElement(columnHeaderCell, columnHeaderCellProps);\n      }\n\n      var baseProps = __assign({\n        index: columnIndex,\n        loading: columnLoading\n      }, spreadableProps);\n\n      if (props.name != null) {\n        return React.createElement(ColumnHeaderCell, __assign({}, baseProps));\n      } else {\n        return React.createElement(ColumnHeaderCell, __assign({}, baseProps, {\n          name: Utils.toBase26Alpha(columnIndex)\n        }));\n      }\n    };\n\n    _this.renderColumnHeader = function (refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly) {\n      var _a;\n\n      if (showFrozenColumnsOnly === void 0) {\n        showFrozenColumnsOnly = false;\n      }\n\n      var _b = _this.state,\n          focusedCell = _b.focusedCell,\n          selectedRegions = _b.selectedRegions,\n          viewportRect = _b.viewportRect;\n      var _c = _this.props,\n          enableMultipleSelection = _c.enableMultipleSelection,\n          enableGhostCells = _c.enableGhostCells,\n          enableColumnReordering = _c.enableColumnReordering,\n          enableColumnResizing = _c.enableColumnResizing,\n          loadingOptions = _c.loadingOptions,\n          maxColumnWidth = _c.maxColumnWidth,\n          minColumnWidth = _c.minColumnWidth,\n          selectedRegionTransform = _c.selectedRegionTransform;\n      var classes = classNames(Classes.TABLE_COLUMN_HEADERS, (_a = {}, _a[Classes.TABLE_SELECTION_ENABLED] = isSelectionModeEnabled(_this.props, RegionCardinality.FULL_COLUMNS), _a));\n\n      var columnIndices = _this.grid.getColumnIndicesInRect(viewportRect, enableGhostCells);\n\n      var columnIndexStart = showFrozenColumnsOnly ? 0 : columnIndices.columnIndexStart;\n      var columnIndexEnd = showFrozenColumnsOnly ? _this.getMaxFrozenColumnIndex() : columnIndices.columnIndexEnd;\n      return React.createElement(\"div\", {\n        className: classes\n      }, React.createElement(ColumnHeader, {\n        enableMultipleSelection: enableMultipleSelection,\n        cellRenderer: _this.columnHeaderCellRenderer,\n        focusedCell: focusedCell,\n        grid: _this.grid,\n        isReorderable: enableColumnReordering,\n        isResizable: enableColumnResizing,\n        loading: hasLoadingOption(loadingOptions, TableLoadingOption.COLUMN_HEADERS),\n        locator: _this.locator,\n        maxColumnWidth: maxColumnWidth,\n        measurableElementRef: refHandler,\n        minColumnWidth: minColumnWidth,\n        onColumnWidthChanged: _this.handleColumnWidthChanged,\n        onFocusedCell: _this.handleFocus,\n        onLayoutLock: _this.handleLayoutLock,\n        onReordered: _this.handleColumnsReordered,\n        onReordering: reorderingHandler,\n        onResizeGuide: resizeHandler,\n        onSelection: _this.getEnabledSelectionHandler(RegionCardinality.FULL_COLUMNS),\n        selectedRegions: selectedRegions,\n        selectedRegionTransform: selectedRegionTransform,\n        columnIndexStart: columnIndexStart,\n        columnIndexEnd: columnIndexEnd\n      }, _this.props.children), _this.maybeRenderRegions(_this.styleColumnHeaderRegion));\n    };\n\n    _this.renderRowHeader = function (refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly) {\n      var _a;\n\n      if (showFrozenRowsOnly === void 0) {\n        showFrozenRowsOnly = false;\n      }\n\n      var _b = _this.state,\n          focusedCell = _b.focusedCell,\n          selectedRegions = _b.selectedRegions,\n          viewportRect = _b.viewportRect;\n      var _c = _this.props,\n          enableMultipleSelection = _c.enableMultipleSelection,\n          enableGhostCells = _c.enableGhostCells,\n          enableRowReordering = _c.enableRowReordering,\n          enableRowResizing = _c.enableRowResizing,\n          loadingOptions = _c.loadingOptions,\n          maxRowHeight = _c.maxRowHeight,\n          minRowHeight = _c.minRowHeight,\n          rowHeaderCellRenderer = _c.rowHeaderCellRenderer,\n          selectedRegionTransform = _c.selectedRegionTransform;\n      var classes = classNames(Classes.TABLE_ROW_HEADERS, (_a = {}, _a[Classes.TABLE_SELECTION_ENABLED] = isSelectionModeEnabled(_this.props, RegionCardinality.FULL_ROWS), _a));\n\n      var rowIndices = _this.grid.getRowIndicesInRect(viewportRect, enableGhostCells);\n\n      var rowIndexStart = showFrozenRowsOnly ? 0 : rowIndices.rowIndexStart;\n      var rowIndexEnd = showFrozenRowsOnly ? _this.getMaxFrozenRowIndex() : rowIndices.rowIndexEnd;\n      return React.createElement(\"div\", {\n        className: classes,\n        ref: refHandler\n      }, React.createElement(RowHeader, {\n        enableMultipleSelection: enableMultipleSelection,\n        focusedCell: focusedCell,\n        grid: _this.grid,\n        locator: _this.locator,\n        isReorderable: enableRowReordering,\n        isResizable: enableRowResizing,\n        loading: hasLoadingOption(loadingOptions, TableLoadingOption.ROW_HEADERS),\n        maxRowHeight: maxRowHeight,\n        minRowHeight: minRowHeight,\n        onFocusedCell: _this.handleFocus,\n        onLayoutLock: _this.handleLayoutLock,\n        onResizeGuide: resizeHandler,\n        onReordered: _this.handleRowsReordered,\n        onReordering: reorderingHandler,\n        onRowHeightChanged: _this.handleRowHeightChanged,\n        onSelection: _this.getEnabledSelectionHandler(RegionCardinality.FULL_ROWS),\n        rowHeaderCellRenderer: rowHeaderCellRenderer,\n        selectedRegions: selectedRegions,\n        selectedRegionTransform: selectedRegionTransform,\n        rowIndexStart: rowIndexStart,\n        rowIndexEnd: rowIndexEnd\n      }), _this.maybeRenderRegions(_this.styleRowHeaderRegion));\n    };\n\n    _this.bodyCellRenderer = function (rowIndex, columnIndex) {\n      var columnProps = _this.getColumnProps(columnIndex);\n\n      if (columnProps === undefined) {\n        return null;\n      }\n\n      var id = columnProps.id,\n          loadingOptions = columnProps.loadingOptions,\n          cellRenderer = columnProps.cellRenderer,\n          columnHeaderCellRenderer = columnProps.columnHeaderCellRenderer,\n          name = columnProps.name,\n          nameRenderer = columnProps.nameRenderer,\n          restColumnProps = __rest(columnProps, [\"id\", \"loadingOptions\", \"cellRenderer\", \"columnHeaderCellRenderer\", \"name\", \"nameRenderer\"]);\n\n      var cell = cellRenderer(rowIndex, columnIndex);\n      var _a = cell.props.loading,\n          loading = _a === void 0 ? hasLoadingOption(loadingOptions, ColumnLoadingOption.CELLS) : _a;\n\n      var cellProps = __assign(__assign({}, restColumnProps), {\n        loading: loading\n      });\n\n      return React.cloneElement(cell, cellProps);\n    };\n\n    _this.renderBody = function (quadrantType, showFrozenRowsOnly, showFrozenColumnsOnly) {\n      if (showFrozenRowsOnly === void 0) {\n        showFrozenRowsOnly = false;\n      }\n\n      if (showFrozenColumnsOnly === void 0) {\n        showFrozenColumnsOnly = false;\n      }\n\n      var _a = _this.state,\n          focusedCell = _a.focusedCell,\n          numFrozenColumns = _a.numFrozenColumnsClamped,\n          numFrozenRows = _a.numFrozenRowsClamped,\n          selectedRegions = _a.selectedRegions,\n          viewportRect = _a.viewportRect;\n      var _b = _this.props,\n          enableMultipleSelection = _b.enableMultipleSelection,\n          enableGhostCells = _b.enableGhostCells,\n          loadingOptions = _b.loadingOptions,\n          bodyContextMenuRenderer = _b.bodyContextMenuRenderer,\n          selectedRegionTransform = _b.selectedRegionTransform;\n\n      var rowIndices = _this.grid.getRowIndicesInRect(viewportRect, enableGhostCells);\n\n      var columnIndices = _this.grid.getColumnIndicesInRect(viewportRect, enableGhostCells); // start beyond the frozen area if rendering unrelated quadrants, so we\n      // don't render duplicate cells underneath the frozen ones.\n\n\n      var columnIndexStart = showFrozenColumnsOnly ? 0 : columnIndices.columnIndexStart + numFrozenColumns;\n      var rowIndexStart = showFrozenRowsOnly ? 0 : rowIndices.rowIndexStart + numFrozenRows; // if rendering frozen rows/columns, subtract one to convert to\n      // 0-indexing. if the 1-indexed value is 0, this sets the end index\n      // to -1, which avoids rendering absent frozen rows/columns at all.\n\n      var columnIndexEnd = showFrozenColumnsOnly ? numFrozenColumns - 1 : columnIndices.columnIndexEnd;\n      var rowIndexEnd = showFrozenRowsOnly ? numFrozenRows - 1 : rowIndices.rowIndexEnd; // the main quadrant contains all cells in the table, so listen only to that quadrant\n\n      var onCompleteRender = quadrantType === QuadrantType.MAIN ? _this.handleCompleteRender : undefined;\n      return React.createElement(\"div\", null, React.createElement(TableBody, {\n        enableMultipleSelection: enableMultipleSelection,\n        cellRenderer: _this.bodyCellRenderer,\n        focusedCell: focusedCell,\n        grid: _this.grid,\n        loading: hasLoadingOption(loadingOptions, TableLoadingOption.CELLS),\n        locator: _this.locator,\n        onCompleteRender: onCompleteRender,\n        onFocusedCell: _this.handleFocus,\n        onSelection: _this.getEnabledSelectionHandler(RegionCardinality.CELLS),\n        bodyContextMenuRenderer: bodyContextMenuRenderer,\n        renderMode: _this.getNormalizedRenderMode(),\n        selectedRegions: selectedRegions,\n        selectedRegionTransform: selectedRegionTransform,\n        viewportRect: viewportRect,\n        columnIndexStart: columnIndexStart,\n        columnIndexEnd: columnIndexEnd,\n        rowIndexStart: rowIndexStart,\n        rowIndexEnd: rowIndexEnd,\n        numFrozenColumns: showFrozenColumnsOnly ? numFrozenColumns : undefined,\n        numFrozenRows: showFrozenRowsOnly ? numFrozenRows : undefined\n      }), _this.maybeRenderRegions(_this.styleBodyRegion, quadrantType));\n    };\n\n    _this.getEnabledSelectionHandler = function (selectionMode) {\n      if (!isSelectionModeEnabled(_this.props, selectionMode)) {\n        // If the selection mode isn't enabled, return a callback that\n        // will clear the selection. For example, if row selection is\n        // disabled, clicking on the row header will clear the table's\n        // selection. If all selection modes are enabled, clicking on the\n        // same region twice will clear the selection.\n        return _this.clearSelection;\n      } else {\n        return _this.handleSelection;\n      }\n    };\n\n    _this.handleCompleteRender = function () {\n      var _a, _b; // the first onCompleteRender is triggered before the viewportRect is\n      // defined and the second after the viewportRect has been set. the cells\n      // will only actually render once the viewportRect is defined though, so\n      // we defer invoking onCompleteRender until that check passes.\n\n\n      if (_this.state.viewportRect != null) {\n        (_b = (_a = _this.props).onCompleteRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n        _this.didCompletelyMount = true;\n      }\n    };\n\n    _this.styleBodyRegion = function (region, quadrantType) {\n      var numFrozenColumns = _this.props.numFrozenColumns;\n      var cardinality = Regions.getRegionCardinality(region);\n\n      var style = _this.grid.getRegionStyle(region); // ensure we're not showing borders at the boundary of the frozen-columns area\n\n\n      var canHideRightBorder = (quadrantType === QuadrantType.TOP_LEFT || quadrantType === QuadrantType.LEFT) && numFrozenColumns != null && numFrozenColumns > 0;\n\n      var fixedHeight = _this.grid.getHeight();\n\n      var fixedWidth = _this.grid.getWidth(); // include a correction in some cases to hide borders along quadrant boundaries\n\n\n      var alignmentCorrection = 1;\n      var alignmentCorrectionString = \"-\" + alignmentCorrection + \"px\";\n\n      switch (cardinality) {\n        case RegionCardinality.CELLS:\n          return style;\n\n        case RegionCardinality.FULL_COLUMNS:\n          style.top = alignmentCorrectionString;\n          style.height = fixedHeight + alignmentCorrection;\n          return style;\n\n        case RegionCardinality.FULL_ROWS:\n          style.left = alignmentCorrectionString;\n          style.width = fixedWidth + alignmentCorrection;\n\n          if (canHideRightBorder) {\n            style.right = alignmentCorrectionString;\n          }\n\n          return style;\n\n        case RegionCardinality.FULL_TABLE:\n          style.left = alignmentCorrectionString;\n          style.top = alignmentCorrectionString;\n          style.width = fixedWidth + alignmentCorrection;\n          style.height = fixedHeight + alignmentCorrection;\n\n          if (canHideRightBorder) {\n            style.right = alignmentCorrectionString;\n          }\n\n          return style;\n\n        default:\n          return {\n            display: \"none\"\n          };\n      }\n    };\n\n    _this.styleMenuRegion = function (region) {\n      var viewportRect = _this.state.viewportRect;\n\n      if (viewportRect == null) {\n        return {};\n      }\n\n      var cardinality = Regions.getRegionCardinality(region);\n\n      var style = _this.grid.getRegionStyle(region);\n\n      switch (cardinality) {\n        case RegionCardinality.FULL_TABLE:\n          style.right = \"0px\";\n          style.bottom = \"0px\";\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.borderBottom = \"none\";\n          style.borderRight = \"none\";\n          return style;\n\n        default:\n          return {\n            display: \"none\"\n          };\n      }\n    };\n\n    _this.styleColumnHeaderRegion = function (region) {\n      var viewportRect = _this.state.viewportRect;\n\n      if (viewportRect == null) {\n        return {};\n      }\n\n      var cardinality = Regions.getRegionCardinality(region);\n\n      var style = _this.grid.getRegionStyle(region);\n\n      switch (cardinality) {\n        case RegionCardinality.FULL_TABLE:\n          style.left = \"-1px\";\n          style.borderLeft = \"none\";\n          style.bottom = \"-1px\";\n          return style;\n\n        case RegionCardinality.FULL_COLUMNS:\n          style.bottom = \"-1px\";\n          return style;\n\n        default:\n          return {\n            display: \"none\"\n          };\n      }\n    };\n\n    _this.styleRowHeaderRegion = function (region) {\n      var viewportRect = _this.state.viewportRect;\n\n      if (viewportRect == null) {\n        return {};\n      }\n\n      var cardinality = Regions.getRegionCardinality(region);\n\n      var style = _this.grid.getRegionStyle(region);\n\n      switch (cardinality) {\n        case RegionCardinality.FULL_TABLE:\n          style.top = \"-1px\";\n          style.borderTop = \"none\";\n          style.right = \"-1px\";\n          return style;\n\n        case RegionCardinality.FULL_ROWS:\n          style.right = \"-1px\";\n          return style;\n\n        default:\n          return {\n            display: \"none\"\n          };\n      }\n    };\n\n    _this.handleColumnWidthChanged = function (columnIndex, width) {\n      var selectedRegions = _this.state.selectedRegions;\n\n      var columnWidths = _this.state.columnWidths.slice();\n\n      if (Regions.hasFullTable(selectedRegions)) {\n        for (var col = 0; col < columnWidths.length; col++) {\n          columnWidths[col] = width;\n        }\n      }\n\n      if (Regions.hasFullColumn(selectedRegions, columnIndex)) {\n        Regions.eachUniqueFullColumn(selectedRegions, function (col) {\n          columnWidths[col] = width;\n        });\n      } else {\n        columnWidths[columnIndex] = width;\n      }\n\n      _this.invalidateGrid();\n\n      _this.setState({\n        columnWidths: columnWidths\n      });\n\n      var onColumnWidthChanged = _this.props.onColumnWidthChanged;\n\n      if (onColumnWidthChanged != null) {\n        onColumnWidthChanged(columnIndex, width);\n      }\n    };\n\n    _this.handleRowHeightChanged = function (rowIndex, height) {\n      var selectedRegions = _this.state.selectedRegions;\n\n      var rowHeights = _this.state.rowHeights.slice();\n\n      if (Regions.hasFullTable(selectedRegions)) {\n        for (var row = 0; row < rowHeights.length; row++) {\n          rowHeights[row] = height;\n        }\n      }\n\n      if (Regions.hasFullRow(selectedRegions, rowIndex)) {\n        Regions.eachUniqueFullRow(selectedRegions, function (row) {\n          rowHeights[row] = height;\n        });\n      } else {\n        rowHeights[rowIndex] = height;\n      }\n\n      _this.invalidateGrid();\n\n      _this.setState({\n        rowHeights: rowHeights\n      });\n\n      var onRowHeightChanged = _this.props.onRowHeightChanged;\n\n      if (onRowHeightChanged != null) {\n        onRowHeightChanged(rowIndex, height);\n      }\n    };\n\n    _this.handleRootScroll = function (_event) {\n      // Bug #211 - Native browser text selection events can cause the root\n      // element to scroll even though it has a overflow:hidden style. The\n      // only viable solution to this is to unscroll the element after the\n      // browser scrolls it.\n      if (_this.rootTableElement != null) {\n        _this.rootTableElement.scrollLeft = 0;\n        _this.rootTableElement.scrollTop = 0;\n      }\n    };\n\n    _this.handleBodyScroll = function (event) {\n      // Prevent the event from propagating to avoid a resize event on the\n      // resize sensor.\n      event.stopPropagation();\n\n      if (_this.locator != null && !_this.state.isLayoutLocked) {\n        var viewportRect = _this.locator.getViewportRect();\n\n        _this.updateViewportRect(viewportRect);\n      }\n    };\n\n    _this.clearSelection = function (_selectedRegions) {\n      _this.handleSelection([]);\n    };\n\n    _this.syncViewportPosition = function (_a) {\n      var nextScrollLeft = _a.nextScrollLeft,\n          nextScrollTop = _a.nextScrollTop;\n      var viewportRect = _this.state.viewportRect;\n\n      if (nextScrollLeft !== undefined || nextScrollTop !== undefined) {\n        // we need to modify the scroll container explicitly for the viewport to shift. in so\n        // doing, we add the size of the header elements, which are not technically part of the\n        // \"grid\" concept (the grid only consists of body cells at present).\n        if (nextScrollTop !== undefined) {\n          var topCorrection = _this.shouldDisableVerticalScroll() ? 0 : _this.columnHeaderElement.clientHeight;\n          _this.scrollContainerElement.scrollTop = nextScrollTop + topCorrection;\n        }\n\n        if (nextScrollLeft !== undefined) {\n          var leftCorrection = _this.shouldDisableHorizontalScroll() || _this.rowHeaderElement == null ? 0 : _this.rowHeaderElement.clientWidth;\n          _this.scrollContainerElement.scrollLeft = nextScrollLeft + leftCorrection;\n        }\n\n        var nextViewportRect = new Rect(nextScrollLeft, nextScrollTop, viewportRect.width, viewportRect.height);\n\n        _this.updateViewportRect(nextViewportRect);\n      }\n    };\n\n    _this.handleFocus = function (focusedCell) {\n      var _a, _b;\n\n      if (!_this.props.enableFocusedCell) {\n        // don't set focus state if focus is not allowed\n        return;\n      } // only set focused cell state if not specified in props\n\n\n      if (_this.props.focusedCell == null) {\n        _this.setState({\n          focusedCell: focusedCell\n        });\n      }\n\n      (_b = (_a = _this.props).onFocusedCell) === null || _b === void 0 ? void 0 : _b.call(_a, focusedCell);\n    };\n\n    _this.handleSelection = function (selectedRegions) {\n      // only set selectedRegions state if not specified in props\n      if (_this.props.selectedRegions == null) {\n        _this.setState({\n          selectedRegions: selectedRegions\n        });\n      }\n\n      var onSelection = _this.props.onSelection;\n\n      if (onSelection != null) {\n        onSelection(selectedRegions);\n      }\n    };\n\n    _this.handleColumnsReordering = function (verticalGuides) {\n      _this.setState({\n        isReordering: true,\n        verticalGuides: verticalGuides\n      });\n    };\n\n    _this.handleColumnsReordered = function (oldIndex, newIndex, length) {\n      var _a, _b;\n\n      _this.setState({\n        isReordering: false,\n        verticalGuides: undefined\n      });\n\n      (_b = (_a = _this.props).onColumnsReordered) === null || _b === void 0 ? void 0 : _b.call(_a, oldIndex, newIndex, length);\n    };\n\n    _this.handleRowsReordering = function (horizontalGuides) {\n      _this.setState({\n        isReordering: true,\n        horizontalGuides: horizontalGuides\n      });\n    };\n\n    _this.handleRowsReordered = function (oldIndex, newIndex, length) {\n      var _a, _b;\n\n      _this.setState({\n        isReordering: false,\n        horizontalGuides: undefined\n      });\n\n      (_b = (_a = _this.props).onRowsReordered) === null || _b === void 0 ? void 0 : _b.call(_a, oldIndex, newIndex, length);\n    };\n\n    _this.handleLayoutLock = function (isLayoutLocked) {\n      if (isLayoutLocked === void 0) {\n        isLayoutLocked = false;\n      }\n\n      _this.setState({\n        isLayoutLocked: isLayoutLocked\n      });\n    };\n\n    _this.updateViewportRect = function (nextViewportRect) {\n      var viewportRect = _this.state.viewportRect;\n\n      _this.setState({\n        viewportRect: nextViewportRect\n      });\n\n      var didViewportChange = viewportRect != null && !viewportRect.equals(nextViewportRect) || viewportRect == null && nextViewportRect != null;\n\n      if (didViewportChange) {\n        _this.invokeOnVisibleCellsChangeCallback(nextViewportRect);\n      }\n    };\n\n    _this.getMaxFrozenColumnIndex = function () {\n      var numFrozenColumns = _this.state.numFrozenColumnsClamped;\n      return numFrozenColumns != null ? numFrozenColumns - 1 : undefined;\n    };\n\n    _this.getMaxFrozenRowIndex = function () {\n      var numFrozenRows = _this.state.numFrozenRowsClamped;\n      return numFrozenRows != null ? numFrozenRows - 1 : undefined;\n    };\n\n    _this.handleColumnResizeGuide = function (verticalGuides) {\n      _this.setState({\n        verticalGuides: verticalGuides\n      });\n    };\n\n    _this.handleRowResizeGuide = function (horizontalGuides) {\n      _this.setState({\n        horizontalGuides: horizontalGuides\n      });\n    };\n\n    var _a = _this.props,\n        children = _a.children,\n        columnWidths = _a.columnWidths,\n        defaultRowHeight = _a.defaultRowHeight,\n        defaultColumnWidth = _a.defaultColumnWidth,\n        numRows = _a.numRows,\n        rowHeights = _a.rowHeights;\n    var childrenArray = React.Children.toArray(children);\n    var columnIdToIndex = Table2.createColumnIdIndex(childrenArray); // Create height/width arrays using the lengths from props and\n    // children, the default values from props, and finally any sparse\n    // arrays passed into props.\n\n    var newColumnWidths = childrenArray.map(function () {\n      return defaultColumnWidth;\n    });\n    newColumnWidths = Utils.assignSparseValues(newColumnWidths, columnWidths);\n    var newRowHeights = Utils.times(numRows, function () {\n      return defaultRowHeight;\n    });\n    newRowHeights = Utils.assignSparseValues(newRowHeights, rowHeights);\n    var selectedRegions = props.selectedRegions == null ? [] : props.selectedRegions;\n    var focusedCell = FocusedCellUtils.getInitialFocusedCell(props.enableFocusedCell, props.focusedCell, undefined, selectedRegions);\n    _this.state = {\n      childrenArray: childrenArray,\n      columnIdToIndex: columnIdToIndex,\n      columnWidths: newColumnWidths,\n      focusedCell: focusedCell,\n      isLayoutLocked: false,\n      isReordering: false,\n      numFrozenColumnsClamped: clampNumFrozenColumns(props),\n      numFrozenRowsClamped: clampNumFrozenRows(props),\n      rowHeights: newRowHeights,\n      selectedRegions: selectedRegions\n    };\n    _this.hotkeysImpl = new TableHotkeys(props, _this.state, _this.grid, {\n      getEnabledSelectionHandler: _this.getEnabledSelectionHandler,\n      handleFocus: _this.handleFocus,\n      handleSelection: _this.handleSelection,\n      syncViewportPosition: _this.syncViewportPosition\n    });\n    _this.hotkeys = getHotkeysFromProps(props, _this.hotkeysImpl);\n    return _this;\n  }\n\n  Table2.getDerivedStateFromProps = function (props, state) {\n    var children = props.children,\n        defaultColumnWidth = props.defaultColumnWidth,\n        defaultRowHeight = props.defaultRowHeight,\n        enableFocusedCell = props.enableFocusedCell,\n        focusedCell = props.focusedCell,\n        numRows = props.numRows,\n        selectedRegions = props.selectedRegions,\n        selectionModes = props.selectionModes; // assign values from state if uncontrolled\n\n    var columnWidths = props.columnWidths,\n        rowHeights = props.rowHeights;\n\n    if (columnWidths == null) {\n      columnWidths = state.columnWidths;\n    }\n\n    if (rowHeights == null) {\n      rowHeights = state.rowHeights;\n    }\n\n    var newChildrenArray = React.Children.toArray(children);\n    var didChildrenChange = newChildrenArray !== state.childrenArray;\n    var numCols = newChildrenArray.length;\n    var newColumnWidths = columnWidths;\n\n    if (columnWidths !== state.columnWidths || didChildrenChange) {\n      // Try to maintain widths of columns by looking up the width of the\n      // column that had the same `ID` prop. If none is found, use the\n      // previous width at the same index.\n      var previousColumnWidths = newChildrenArray.map(function (child, index) {\n        var mappedIndex = state.columnIdToIndex[child.props.id];\n        return state.columnWidths[mappedIndex != null ? mappedIndex : index];\n      }); // Make sure the width/height arrays have the correct length, but keep\n      // as many existing widths/heights as possible. Also, apply the\n      // sparse width/heights from props.\n\n      newColumnWidths = Utils.arrayOfLength(newColumnWidths, numCols, defaultColumnWidth);\n      newColumnWidths = Utils.assignSparseValues(newColumnWidths, previousColumnWidths);\n      newColumnWidths = Utils.assignSparseValues(newColumnWidths, columnWidths);\n    }\n\n    var newRowHeights = rowHeights;\n\n    if (rowHeights !== state.rowHeights || numRows !== state.rowHeights.length) {\n      newRowHeights = Utils.arrayOfLength(newRowHeights, numRows, defaultRowHeight);\n      newRowHeights = Utils.assignSparseValues(newRowHeights, rowHeights);\n    }\n\n    var newSelectedRegions = selectedRegions;\n\n    if (selectedRegions == null) {\n      // if we're in uncontrolled mode, filter out all selected regions that don't\n      // fit in the current new table dimensions\n      newSelectedRegions = state.selectedRegions.filter(function (region) {\n        var regionCardinality = Regions.getRegionCardinality(region);\n        return isSelectionModeEnabled(props, regionCardinality, selectionModes) && Regions.isRegionValidForTable(region, numRows, numCols);\n      });\n    }\n\n    var newFocusedCell = FocusedCellUtils.getInitialFocusedCell(enableFocusedCell, focusedCell, state.focusedCell, newSelectedRegions);\n    var nextState = {\n      childrenArray: newChildrenArray,\n      columnIdToIndex: didChildrenChange ? Table2.createColumnIdIndex(newChildrenArray) : state.columnIdToIndex,\n      columnWidths: newColumnWidths,\n      focusedCell: newFocusedCell,\n      numFrozenColumnsClamped: clampNumFrozenColumns(props),\n      numFrozenRowsClamped: clampNumFrozenRows(props),\n      rowHeights: newRowHeights,\n      selectedRegions: newSelectedRegions\n    };\n\n    if (!CoreUtils.deepCompareKeys(state, nextState, Table2.SHALLOW_COMPARE_STATE_KEYS_DENYLIST)) {\n      return nextState;\n    }\n\n    return null;\n  };\n\n  Table2.createColumnIdIndex = function (children) {\n    var columnIdToIndex = {};\n\n    for (var i = 0; i < children.length; i++) {\n      var key = children[i].props.id;\n\n      if (key != null) {\n        columnIdToIndex[String(key)] = i;\n      }\n    }\n\n    return columnIdToIndex;\n  }; // Instance methods\n  // ================\n\n  /**\n   * __Experimental!__ Resizes all rows in the table to the approximate\n   * maximum height of wrapped cell content in each row. Works best when each\n   * cell contains plain text of a consistent font style (though font style\n   * may vary between cells). Since this function uses approximate\n   * measurements, results may not be perfect.\n   *\n   * Approximation parameters can be configured for the entire table or on a\n   * per-cell basis. Default values are fine-tuned to work well with default\n   * Table font styles.\n   */\n\n\n  Table2.prototype.resizeRowsByApproximateHeight = function (getCellText, options) {\n    var rowHeights = resizeRowsByApproximateHeight(this.props.numRows, this.state.columnWidths, getCellText, options);\n    this.invalidateGrid();\n    this.setState({\n      rowHeights: rowHeights\n    });\n  };\n  /**\n   * Resize all rows in the table to the height of the tallest visible cell in the specified columns.\n   * If no indices are provided, default to using the tallest visible cell from all columns in view.\n   */\n\n\n  Table2.prototype.resizeRowsByTallestCell = function (columnIndices) {\n    var rowHeights = resizeRowsByTallestCell(this.grid, this.state.viewportRect, this.locator, this.state.rowHeights.length, columnIndices);\n    this.invalidateGrid();\n    this.setState({\n      rowHeights: rowHeights\n    });\n  };\n  /**\n   * Scrolls the table to the target region in a fashion appropriate to the target region's\n   * cardinality:\n   *\n   * - CELLS: Scroll the top-left cell in the target region to the top-left corner of the viewport.\n   * - FULL_ROWS: Scroll the top-most row in the target region to the top of the viewport.\n   * - FULL_COLUMNS: Scroll the left-most column in the target region to the left side of the viewport.\n   * - FULL_TABLE: Scroll the top-left cell in the table to the top-left corner of the viewport.\n   *\n   * If there are active frozen rows and/or columns, the target region will be positioned in the\n   * top-left corner of the non-frozen area (unless the target region itself is in the frozen\n   * area).\n   *\n   * If the target region is close to the bottom-right corner of the table, this function will\n   * simply scroll the target region as close to the top-left as possible until the bottom-right\n   * corner is reached.\n   */\n\n\n  Table2.prototype.scrollToRegion = function (region) {\n    var _a = this.state,\n        numFrozenColumns = _a.numFrozenColumnsClamped,\n        numFrozenRows = _a.numFrozenRowsClamped;\n    var _b = this.state.viewportRect,\n        currScrollLeft = _b.left,\n        currScrollTop = _b.top;\n\n    var _c = ScrollUtils.getScrollPositionForRegion(region, currScrollLeft, currScrollTop, this.grid.getCumulativeWidthBefore, this.grid.getCumulativeHeightBefore, numFrozenRows, numFrozenColumns),\n        scrollLeft = _c.scrollLeft,\n        scrollTop = _c.scrollTop;\n\n    var correctedScrollLeft = this.shouldDisableHorizontalScroll() ? 0 : scrollLeft;\n    var correctedScrollTop = this.shouldDisableVerticalScroll() ? 0 : scrollTop; // defer to the quadrant stack to keep all quadrant positions in sync\n\n    this.quadrantStackInstance.scrollToPosition(correctedScrollLeft, correctedScrollTop);\n  }; // React lifecycle\n  // ===============\n\n\n  Table2.prototype.getChildContext = function () {\n    return {\n      enableColumnInteractionBar: this.props.enableColumnInteractionBar\n    };\n  };\n\n  Table2.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    var propKeysDenylist = {\n      exclude: Table2.SHALLOW_COMPARE_PROP_KEYS_DENYLIST\n    };\n    var stateKeysDenylist = {\n      exclude: Table2.SHALLOW_COMPARE_STATE_KEYS_DENYLIST\n    };\n    return !CoreUtils.shallowCompareKeys(this.props, nextProps, propKeysDenylist) || !CoreUtils.shallowCompareKeys(this.state, nextState, stateKeysDenylist) || !CoreUtils.deepCompareKeys(this.props, nextProps, Table2.SHALLOW_COMPARE_PROP_KEYS_DENYLIST) || !CoreUtils.deepCompareKeys(this.state, nextState, Table2.SHALLOW_COMPARE_STATE_KEYS_DENYLIST);\n  };\n\n  Table2.prototype.render = function () {\n    return React.createElement(HotkeysTarget2, {\n      hotkeys: this.hotkeys\n    }, this.renderTableContents);\n  };\n  /**\n   * When the component mounts, the HTML Element refs will be available, so\n   * we constructor the Locator, which queries the elements' bounding\n   * ClientRects.\n   */\n\n\n  Table2.prototype.componentDidMount = function () {\n    var _this = this;\n\n    this.validateGrid();\n    this.locator = new Locator(this.rootTableElement, this.scrollContainerElement, this.cellContainerElement);\n    this.updateLocator();\n    this.updateViewportRect(this.locator.getViewportRect());\n    this.resizeSensorDetach = ResizeSensor.attach(this.rootTableElement, function () {\n      if (!_this.state.isLayoutLocked) {\n        _this.updateViewportRect(_this.locator.getViewportRect());\n      }\n    });\n  };\n\n  Table2.prototype.componentWillUnmount = function () {\n    if (this.resizeSensorDetach != null) {\n      this.resizeSensorDetach();\n      delete this.resizeSensorDetach;\n    }\n\n    this.didCompletelyMount = false;\n  };\n\n  Table2.prototype.getSnapshotBeforeUpdate = function () {\n    var viewportRect = this.state.viewportRect;\n    this.validateGrid();\n    var tableBottom = this.grid.getCumulativeHeightAt(this.grid.numRows - 1);\n    var tableRight = this.grid.getCumulativeWidthAt(this.grid.numCols - 1);\n    var nextScrollTop = tableBottom < viewportRect.top + viewportRect.height ? // scroll the last row into view\n    Math.max(0, tableBottom - viewportRect.height) : undefined;\n    var nextScrollLeft = tableRight < viewportRect.left + viewportRect.width ? // scroll the last column into view\n    Math.max(0, tableRight - viewportRect.width) : undefined; // these will only be defined if they differ from viewportRect\n\n    return {\n      nextScrollLeft: nextScrollLeft,\n      nextScrollTop: nextScrollTop\n    };\n  };\n\n  Table2.prototype.componentDidUpdate = function (prevProps, prevState, snapshot) {\n    _super.prototype.componentDidUpdate.call(this, prevProps, prevState, snapshot);\n\n    this.hotkeysImpl.setState(this.state);\n    this.hotkeysImpl.setProps(this.props);\n    var didChildrenChange = React.Children.toArray(this.props.children) !== this.state.childrenArray;\n    var shouldInvalidateGrid = didChildrenChange || this.props.columnWidths !== prevState.columnWidths || this.props.rowHeights !== prevState.rowHeights || this.props.numRows !== prevProps.numRows || this.props.forceRerenderOnSelectionChange && this.props.selectedRegions !== prevProps.selectedRegions;\n\n    if (shouldInvalidateGrid) {\n      this.invalidateGrid();\n    }\n\n    if (this.locator != null) {\n      this.validateGrid();\n      this.updateLocator();\n    } // When true, we'll need to imperatively synchronize quadrant views after\n    // the update. This check lets us avoid expensively diff'ing columnWidths\n    // and rowHeights in <TableQuadrantStack> on each update.\n\n\n    var didUpdateColumnOrRowSizes = !CoreUtils.arraysEqual(this.state.columnWidths, prevState.columnWidths) || !CoreUtils.arraysEqual(this.state.rowHeights, prevState.rowHeights);\n\n    if (didUpdateColumnOrRowSizes) {\n      this.quadrantStackInstance.synchronizeQuadrantViews();\n      this.syncViewportPosition(snapshot);\n    }\n\n    var shouldInvalidateHotkeys = this.props.getCellClipboardData !== prevProps.getCellClipboardData || this.props.enableFocusedCell !== prevProps.enableFocusedCell || this.props.enableMultipleSelection !== prevProps.enableMultipleSelection || this.props.selectionModes !== prevProps.selectionModes;\n\n    if (shouldInvalidateHotkeys) {\n      this.hotkeys = getHotkeysFromProps(this.props, this.hotkeysImpl);\n    }\n  };\n\n  Table2.prototype.validateProps = function (props) {\n    var children = props.children,\n        columnWidths = props.columnWidths,\n        numFrozenColumns = props.numFrozenColumns,\n        numFrozenRows = props.numFrozenRows,\n        numRows = props.numRows,\n        rowHeights = props.rowHeights;\n    var numColumns = React.Children.count(children); // do cheap error-checking first.\n\n    if (numRows != null && numRows < 0) {\n      throw new Error(Errors.TABLE_NUM_ROWS_NEGATIVE);\n    }\n\n    if (numFrozenRows != null && numFrozenRows < 0) {\n      throw new Error(Errors.TABLE_NUM_FROZEN_ROWS_NEGATIVE);\n    }\n\n    if (numFrozenColumns != null && numFrozenColumns < 0) {\n      throw new Error(Errors.TABLE_NUM_FROZEN_COLUMNS_NEGATIVE);\n    }\n\n    if (numRows != null && rowHeights != null && rowHeights.length !== numRows) {\n      throw new Error(Errors.TABLE_NUM_ROWS_ROW_HEIGHTS_MISMATCH);\n    }\n\n    if (numColumns != null && columnWidths != null && columnWidths.length !== numColumns) {\n      throw new Error(Errors.TABLE_NUM_COLUMNS_COLUMN_WIDTHS_MISMATCH);\n    }\n\n    React.Children.forEach(children, function (child) {\n      if (!CoreUtils.isElementOfType(child, Column)) {\n        throw new Error(Errors.TABLE_NON_COLUMN_CHILDREN_WARNING);\n      }\n    }); // these are recoverable scenarios, so just print a warning.\n\n    if (numFrozenRows != null && numRows != null && numFrozenRows > numRows) {\n      console.warn(Errors.TABLE_NUM_FROZEN_ROWS_BOUND_WARNING);\n    }\n\n    if (numFrozenColumns != null && numFrozenColumns > numColumns) {\n      console.warn(Errors.TABLE_NUM_FROZEN_COLUMNS_BOUND_WARNING);\n    }\n  };\n\n  Table2.prototype.gridDimensionsMatchProps = function () {\n    var _a = this.props,\n        children = _a.children,\n        numRows = _a.numRows;\n    return this.grid != null && this.grid.numCols === React.Children.count(children) && this.grid.numRows === numRows;\n  }; // Quadrant refs\n  // =============\n\n\n  Table2.prototype.shouldDisableVerticalScroll = function () {\n    var enableGhostCells = this.props.enableGhostCells;\n    var viewportRect = this.state.viewportRect;\n    var rowIndices = this.grid.getRowIndicesInRect(viewportRect, enableGhostCells);\n    var isViewportUnscrolledVertically = viewportRect != null && viewportRect.top === 0;\n    var areRowHeadersLoading = hasLoadingOption(this.props.loadingOptions, TableLoadingOption.ROW_HEADERS);\n    var areGhostRowsVisible = enableGhostCells && this.grid.isGhostIndex(rowIndices.rowIndexEnd, 0);\n    return areGhostRowsVisible && (isViewportUnscrolledVertically || areRowHeadersLoading);\n  };\n\n  Table2.prototype.shouldDisableHorizontalScroll = function () {\n    var enableGhostCells = this.props.enableGhostCells;\n    var viewportRect = this.state.viewportRect;\n    var columnIndices = this.grid.getColumnIndicesInRect(viewportRect, enableGhostCells);\n    var isViewportUnscrolledHorizontally = viewportRect != null && viewportRect.left === 0;\n    var areGhostColumnsVisible = enableGhostCells && this.grid.isGhostColumn(columnIndices.columnIndexEnd);\n    var areColumnHeadersLoading = hasLoadingOption(this.props.loadingOptions, TableLoadingOption.COLUMN_HEADERS);\n    return areGhostColumnsVisible && (isViewportUnscrolledHorizontally || areColumnHeadersLoading);\n  };\n\n  Table2.prototype.getColumnProps = function (columnIndex) {\n    var column = this.state.childrenArray[columnIndex];\n    return column === undefined ? undefined : column.props;\n  };\n\n  Table2.prototype.isGuidesShowing = function () {\n    return this.state.verticalGuides != null || this.state.horizontalGuides != null;\n  };\n\n  Table2.prototype.invalidateGrid = function () {\n    this.grid = null;\n  };\n\n  Table2.prototype.validateGrid = function () {\n    if (this.grid == null) {\n      var _a = this.props,\n          defaultRowHeight = _a.defaultRowHeight,\n          defaultColumnWidth = _a.defaultColumnWidth;\n      var _b = this.state,\n          rowHeights = _b.rowHeights,\n          columnWidths = _b.columnWidths;\n      this.grid = new Grid(rowHeights, columnWidths, Grid.DEFAULT_BLEED, defaultRowHeight, defaultColumnWidth);\n      this.invokeOnVisibleCellsChangeCallback(this.state.viewportRect);\n      this.hotkeysImpl.setGrid(this.grid);\n    }\n  };\n  /**\n   * Renders a `RegionLayer`, applying styles to the regions using the\n   * supplied `RegionStyler`. `RegionLayer` is a `PureRender` component, so\n   * the `RegionStyler` should be a new instance on every render if we\n   * intend to redraw the region layer.\n   */\n\n\n  Table2.prototype.maybeRenderRegions = function (getRegionStyle, quadrantType) {\n    if (this.isGuidesShowing() && !this.state.isReordering) {\n      // we want to show guides *and* the selection styles when reordering rows or columns\n      return undefined;\n    }\n\n    var regionGroups = Regions.joinStyledRegionGroups(this.state.selectedRegions, this.props.styledRegionGroups, this.state.focusedCell);\n    return regionGroups.map(function (regionGroup, index) {\n      var regionStyles = regionGroup.regions.map(function (region) {\n        return getRegionStyle(region, quadrantType);\n      });\n      return React.createElement(RegionLayer, {\n        className: classNames(regionGroup.className),\n        key: index,\n        regions: regionGroup.regions,\n        regionStyles: regionStyles\n      });\n    });\n  };\n\n  Table2.prototype.updateLocator = function () {\n    this.locator.setGrid(this.grid).setNumFrozenRows(this.state.numFrozenRowsClamped).setNumFrozenColumns(this.state.numFrozenColumnsClamped);\n  };\n\n  Table2.prototype.invokeOnVisibleCellsChangeCallback = function (viewportRect) {\n    var _a, _b;\n\n    var columnIndices = this.grid.getColumnIndicesInRect(viewportRect);\n    var rowIndices = this.grid.getRowIndicesInRect(viewportRect);\n    (_b = (_a = this.props).onVisibleCellsChange) === null || _b === void 0 ? void 0 : _b.call(_a, rowIndices, columnIndices);\n  };\n  /**\n   * Normalizes RenderMode.BATCH_ON_UPDATE into RenderMode.{BATCH,NONE}. We do\n   * this because there are actually multiple updates required before the\n   * <Table> is considered fully \"mounted,\" and adding that knowledge to child\n   * components would lead to tight coupling. Thus, keep it simple for them.\n   */\n\n\n  Table2.prototype.getNormalizedRenderMode = function () {\n    var renderMode = this.props.renderMode;\n    var shouldBatchRender = renderMode === RenderMode.BATCH || renderMode === RenderMode.BATCH_ON_UPDATE && this.didCompletelyMount;\n    return shouldBatchRender ? RenderMode.BATCH : RenderMode.NONE;\n  };\n\n  Table2.displayName = DISPLAYNAME_PREFIX + \".Table2\";\n  Table2.defaultProps = {\n    defaultColumnWidth: 150,\n    defaultRowHeight: 20,\n    enableFocusedCell: false,\n    enableGhostCells: false,\n    enableMultipleSelection: true,\n    enableRowHeader: true,\n    forceRerenderOnSelectionChange: false,\n    loadingOptions: [],\n    minColumnWidth: 50,\n    minRowHeight: 20,\n    numFrozenColumns: 0,\n    numFrozenRows: 0,\n    numRows: 0,\n    renderMode: RenderMode.BATCH_ON_UPDATE,\n    rowHeaderCellRenderer: renderDefaultRowHeader,\n    selectionModes: SelectionModes.ALL\n  };\n  Table2.childContextTypes = columnInteractionBarContextTypes;\n  Table2.SHALLOW_COMPARE_PROP_KEYS_DENYLIST = [\"selectedRegions\"];\n  Table2.SHALLOW_COMPARE_STATE_KEYS_DENYLIST = [\"selectedRegions\", \"viewportRect\"];\n  return Table2;\n}(AbstractComponent2);\n\nexport { Table2 };","map":{"version":3,"sources":["../../src/table2.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractComponent2, DISPLAYNAME_PREFIX, HotkeysTarget2, Utils as CoreUtils, } from \"@blueprintjs/core\";\nimport { Column } from \"./column\";\nimport * as Classes from \"./common/classes\";\nimport { columnInteractionBarContextTypes } from \"./common/context\";\nimport * as Errors from \"./common/errors\";\nimport { Grid } from \"./common/grid\";\nimport * as FocusedCellUtils from \"./common/internal/focusedCellUtils\";\nimport * as ScrollUtils from \"./common/internal/scrollUtils\";\nimport { Rect } from \"./common/rect\";\nimport { RenderMode } from \"./common/renderMode\";\nimport { Utils } from \"./common/utils\";\nimport { ColumnHeader } from \"./headers/columnHeader\";\nimport { ColumnHeaderCell } from \"./headers/columnHeaderCell\";\nimport { renderDefaultRowHeader, RowHeader } from \"./headers/rowHeader\";\nimport { ResizeSensor } from \"./interactions/resizeSensor\";\nimport { GuideLayer } from \"./layers/guides\";\nimport { RegionLayer } from \"./layers/regions\";\nimport { Locator } from \"./locator\";\nimport { QuadrantType } from \"./quadrants/tableQuadrant\";\nimport { TableQuadrantStack } from \"./quadrants/tableQuadrantStack\";\nimport { ColumnLoadingOption, RegionCardinality, Regions, SelectionModes, TableLoadingOption } from \"./regions\";\nimport { resizeRowsByApproximateHeight, resizeRowsByTallestCell, } from \"./resizeRows\";\nimport { getHotkeysFromProps, isSelectionModeEnabled } from \"./table2Utils\";\nimport { TableBody } from \"./tableBody\";\nimport { TableHotkeys } from \"./tableHotkeys\";\nimport { clampNumFrozenColumns, clampNumFrozenRows, hasLoadingOption } from \"./tableUtils\";\nvar Table2 = /** @class */ (function (_super) {\n    __extends(Table2, _super);\n    function Table2(props, context) {\n        var _this = _super.call(this, props, context) || this;\n        _this.hotkeys = [];\n        _this.refHandlers = {\n            cellContainer: function (ref) { return (_this.cellContainerElement = ref); },\n            columnHeader: function (ref) { return (_this.columnHeaderElement = ref); },\n            quadrantStack: function (ref) { return (_this.quadrantStackInstance = ref); },\n            rootTable: function (ref) { return (_this.rootTableElement = ref); },\n            rowHeader: function (ref) { return (_this.rowHeaderElement = ref); },\n            scrollContainer: function (ref) { return (_this.scrollContainerElement = ref); },\n        };\n        /*\n         * This value is set to `true` when all cells finish mounting for the first\n         * time. It serves as a signal that we can switch to batch rendering.\n         */\n        _this.didCompletelyMount = false;\n        _this.renderTableContents = function (_a) {\n            var _b;\n            var handleKeyDown = _a.handleKeyDown, handleKeyUp = _a.handleKeyUp;\n            var _c = _this.props, children = _c.children, className = _c.className, enableRowHeader = _c.enableRowHeader, loadingOptions = _c.loadingOptions, numRows = _c.numRows, enableColumnInteractionBar = _c.enableColumnInteractionBar;\n            var _d = _this.state, horizontalGuides = _d.horizontalGuides, numFrozenColumnsClamped = _d.numFrozenColumnsClamped, numFrozenRowsClamped = _d.numFrozenRowsClamped, verticalGuides = _d.verticalGuides;\n            if (!_this.gridDimensionsMatchProps()) {\n                // Ensure we're rendering the correct number of rows & columns\n                _this.invalidateGrid();\n            }\n            _this.validateGrid();\n            var classes = classNames(Classes.TABLE_CONTAINER, (_b = {},\n                _b[Classes.TABLE_REORDERING] = _this.state.isReordering,\n                _b[Classes.TABLE_NO_VERTICAL_SCROLL] = _this.shouldDisableVerticalScroll(),\n                _b[Classes.TABLE_NO_HORIZONTAL_SCROLL] = _this.shouldDisableHorizontalScroll(),\n                _b[Classes.TABLE_SELECTION_ENABLED] = isSelectionModeEnabled(_this.props, RegionCardinality.CELLS),\n                _b[Classes.TABLE_NO_ROWS] = numRows === 0,\n                _b), className);\n            return (React.createElement(\"div\", { className: classes, ref: _this.refHandlers.rootTable, onScroll: _this.handleRootScroll, onKeyDown: handleKeyDown, onKeyUp: handleKeyUp, tabIndex: 0 },\n                React.createElement(TableQuadrantStack, { bodyRef: _this.refHandlers.cellContainer, bodyRenderer: _this.renderBody, columnHeaderCellRenderer: _this.renderColumnHeader, columnHeaderRef: _this.refHandlers.columnHeader, enableColumnInteractionBar: enableColumnInteractionBar, enableRowHeader: enableRowHeader, grid: _this.grid, handleColumnResizeGuide: _this.handleColumnResizeGuide, handleColumnsReordering: _this.handleColumnsReordering, handleRowResizeGuide: _this.handleRowResizeGuide, handleRowsReordering: _this.handleRowsReordering, isHorizontalScrollDisabled: _this.shouldDisableHorizontalScroll(), isVerticalScrollDisabled: _this.shouldDisableVerticalScroll(), loadingOptions: loadingOptions, numColumns: React.Children.count(children), numFrozenColumns: numFrozenColumnsClamped, numFrozenRows: numFrozenRowsClamped, numRows: numRows, onScroll: _this.handleBodyScroll, ref: _this.refHandlers.quadrantStack, menuRenderer: _this.renderMenu, rowHeaderCellRenderer: _this.renderRowHeader, rowHeaderRef: _this.refHandlers.rowHeader, scrollContainerRef: _this.refHandlers.scrollContainer }),\n                React.createElement(\"div\", { className: classNames(Classes.TABLE_OVERLAY_LAYER, Classes.TABLE_OVERLAY_REORDERING_CURSOR) }),\n                React.createElement(GuideLayer, { className: Classes.TABLE_RESIZE_GUIDES, verticalGuides: verticalGuides, horizontalGuides: horizontalGuides })));\n        };\n        _this.renderMenu = function (refHandler) {\n            var _a;\n            var classes = classNames(Classes.TABLE_MENU, (_a = {},\n                _a[Classes.TABLE_SELECTION_ENABLED] = isSelectionModeEnabled(_this.props, RegionCardinality.FULL_TABLE),\n                _a));\n            return (React.createElement(\"div\", { className: classes, ref: refHandler, onMouseDown: _this.handleMenuMouseDown }, _this.maybeRenderRegions(_this.styleMenuRegion)));\n        };\n        _this.handleMenuMouseDown = function (e) {\n            // the shift+click interaction expands the region from the focused cell.\n            // thus, if shift is pressed we shouldn't move the focused cell.\n            _this.selectAll(!e.shiftKey);\n        };\n        _this.selectAll = function (shouldUpdateFocusedCell) {\n            var selectionHandler = _this.getEnabledSelectionHandler(RegionCardinality.FULL_TABLE);\n            // clicking on upper left hand corner sets selection to \"all\"\n            // regardless of current selection state (clicking twice does not deselect table)\n            selectionHandler([Regions.table()]);\n            if (shouldUpdateFocusedCell) {\n                var newFocusedCellCoordinates = Regions.getFocusCellCoordinatesFromRegion(Regions.table());\n                _this.handleFocus(FocusedCellUtils.toFullCoordinates(newFocusedCellCoordinates));\n            }\n        };\n        _this.columnHeaderCellRenderer = function (columnIndex) {\n            var props = _this.getColumnProps(columnIndex);\n            if (props === undefined) {\n                return null;\n            }\n            var id = props.id, loadingOptions = props.loadingOptions, cellRenderer = props.cellRenderer, columnHeaderCellRenderer = props.columnHeaderCellRenderer, spreadableProps = __rest(props, [\"id\", \"loadingOptions\", \"cellRenderer\", \"columnHeaderCellRenderer\"]);\n            var columnLoading = hasLoadingOption(loadingOptions, ColumnLoadingOption.HEADER);\n            if (columnHeaderCellRenderer != null) {\n                var columnHeaderCell = columnHeaderCellRenderer(columnIndex);\n                var columnHeaderCellLoading = columnHeaderCell.props.loading;\n                var columnHeaderCellProps = {\n                    loading: columnHeaderCellLoading != null ? columnHeaderCellLoading : columnLoading,\n                };\n                return React.cloneElement(columnHeaderCell, columnHeaderCellProps);\n            }\n            var baseProps = __assign({ index: columnIndex, loading: columnLoading }, spreadableProps);\n            if (props.name != null) {\n                return React.createElement(ColumnHeaderCell, __assign({}, baseProps));\n            }\n            else {\n                return React.createElement(ColumnHeaderCell, __assign({}, baseProps, { name: Utils.toBase26Alpha(columnIndex) }));\n            }\n        };\n        _this.renderColumnHeader = function (refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly) {\n            var _a;\n            if (showFrozenColumnsOnly === void 0) { showFrozenColumnsOnly = false; }\n            var _b = _this.state, focusedCell = _b.focusedCell, selectedRegions = _b.selectedRegions, viewportRect = _b.viewportRect;\n            var _c = _this.props, enableMultipleSelection = _c.enableMultipleSelection, enableGhostCells = _c.enableGhostCells, enableColumnReordering = _c.enableColumnReordering, enableColumnResizing = _c.enableColumnResizing, loadingOptions = _c.loadingOptions, maxColumnWidth = _c.maxColumnWidth, minColumnWidth = _c.minColumnWidth, selectedRegionTransform = _c.selectedRegionTransform;\n            var classes = classNames(Classes.TABLE_COLUMN_HEADERS, (_a = {},\n                _a[Classes.TABLE_SELECTION_ENABLED] = isSelectionModeEnabled(_this.props, RegionCardinality.FULL_COLUMNS),\n                _a));\n            var columnIndices = _this.grid.getColumnIndicesInRect(viewportRect, enableGhostCells);\n            var columnIndexStart = showFrozenColumnsOnly ? 0 : columnIndices.columnIndexStart;\n            var columnIndexEnd = showFrozenColumnsOnly ? _this.getMaxFrozenColumnIndex() : columnIndices.columnIndexEnd;\n            return (React.createElement(\"div\", { className: classes },\n                React.createElement(ColumnHeader, { enableMultipleSelection: enableMultipleSelection, cellRenderer: _this.columnHeaderCellRenderer, focusedCell: focusedCell, grid: _this.grid, isReorderable: enableColumnReordering, isResizable: enableColumnResizing, loading: hasLoadingOption(loadingOptions, TableLoadingOption.COLUMN_HEADERS), locator: _this.locator, maxColumnWidth: maxColumnWidth, measurableElementRef: refHandler, minColumnWidth: minColumnWidth, onColumnWidthChanged: _this.handleColumnWidthChanged, onFocusedCell: _this.handleFocus, onLayoutLock: _this.handleLayoutLock, onReordered: _this.handleColumnsReordered, onReordering: reorderingHandler, onResizeGuide: resizeHandler, onSelection: _this.getEnabledSelectionHandler(RegionCardinality.FULL_COLUMNS), selectedRegions: selectedRegions, selectedRegionTransform: selectedRegionTransform, columnIndexStart: columnIndexStart, columnIndexEnd: columnIndexEnd }, _this.props.children),\n                _this.maybeRenderRegions(_this.styleColumnHeaderRegion)));\n        };\n        _this.renderRowHeader = function (refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly) {\n            var _a;\n            if (showFrozenRowsOnly === void 0) { showFrozenRowsOnly = false; }\n            var _b = _this.state, focusedCell = _b.focusedCell, selectedRegions = _b.selectedRegions, viewportRect = _b.viewportRect;\n            var _c = _this.props, enableMultipleSelection = _c.enableMultipleSelection, enableGhostCells = _c.enableGhostCells, enableRowReordering = _c.enableRowReordering, enableRowResizing = _c.enableRowResizing, loadingOptions = _c.loadingOptions, maxRowHeight = _c.maxRowHeight, minRowHeight = _c.minRowHeight, rowHeaderCellRenderer = _c.rowHeaderCellRenderer, selectedRegionTransform = _c.selectedRegionTransform;\n            var classes = classNames(Classes.TABLE_ROW_HEADERS, (_a = {},\n                _a[Classes.TABLE_SELECTION_ENABLED] = isSelectionModeEnabled(_this.props, RegionCardinality.FULL_ROWS),\n                _a));\n            var rowIndices = _this.grid.getRowIndicesInRect(viewportRect, enableGhostCells);\n            var rowIndexStart = showFrozenRowsOnly ? 0 : rowIndices.rowIndexStart;\n            var rowIndexEnd = showFrozenRowsOnly ? _this.getMaxFrozenRowIndex() : rowIndices.rowIndexEnd;\n            return (React.createElement(\"div\", { className: classes, ref: refHandler },\n                React.createElement(RowHeader, { enableMultipleSelection: enableMultipleSelection, focusedCell: focusedCell, grid: _this.grid, locator: _this.locator, isReorderable: enableRowReordering, isResizable: enableRowResizing, loading: hasLoadingOption(loadingOptions, TableLoadingOption.ROW_HEADERS), maxRowHeight: maxRowHeight, minRowHeight: minRowHeight, onFocusedCell: _this.handleFocus, onLayoutLock: _this.handleLayoutLock, onResizeGuide: resizeHandler, onReordered: _this.handleRowsReordered, onReordering: reorderingHandler, onRowHeightChanged: _this.handleRowHeightChanged, onSelection: _this.getEnabledSelectionHandler(RegionCardinality.FULL_ROWS), rowHeaderCellRenderer: rowHeaderCellRenderer, selectedRegions: selectedRegions, selectedRegionTransform: selectedRegionTransform, rowIndexStart: rowIndexStart, rowIndexEnd: rowIndexEnd }),\n                _this.maybeRenderRegions(_this.styleRowHeaderRegion)));\n        };\n        _this.bodyCellRenderer = function (rowIndex, columnIndex) {\n            var columnProps = _this.getColumnProps(columnIndex);\n            if (columnProps === undefined) {\n                return null;\n            }\n            var id = columnProps.id, loadingOptions = columnProps.loadingOptions, cellRenderer = columnProps.cellRenderer, columnHeaderCellRenderer = columnProps.columnHeaderCellRenderer, name = columnProps.name, nameRenderer = columnProps.nameRenderer, restColumnProps = __rest(columnProps, [\"id\", \"loadingOptions\", \"cellRenderer\", \"columnHeaderCellRenderer\", \"name\", \"nameRenderer\"]);\n            var cell = cellRenderer(rowIndex, columnIndex);\n            var _a = cell.props.loading, loading = _a === void 0 ? hasLoadingOption(loadingOptions, ColumnLoadingOption.CELLS) : _a;\n            var cellProps = __assign(__assign({}, restColumnProps), { loading: loading });\n            return React.cloneElement(cell, cellProps);\n        };\n        _this.renderBody = function (quadrantType, showFrozenRowsOnly, showFrozenColumnsOnly) {\n            if (showFrozenRowsOnly === void 0) { showFrozenRowsOnly = false; }\n            if (showFrozenColumnsOnly === void 0) { showFrozenColumnsOnly = false; }\n            var _a = _this.state, focusedCell = _a.focusedCell, numFrozenColumns = _a.numFrozenColumnsClamped, numFrozenRows = _a.numFrozenRowsClamped, selectedRegions = _a.selectedRegions, viewportRect = _a.viewportRect;\n            var _b = _this.props, enableMultipleSelection = _b.enableMultipleSelection, enableGhostCells = _b.enableGhostCells, loadingOptions = _b.loadingOptions, bodyContextMenuRenderer = _b.bodyContextMenuRenderer, selectedRegionTransform = _b.selectedRegionTransform;\n            var rowIndices = _this.grid.getRowIndicesInRect(viewportRect, enableGhostCells);\n            var columnIndices = _this.grid.getColumnIndicesInRect(viewportRect, enableGhostCells);\n            // start beyond the frozen area if rendering unrelated quadrants, so we\n            // don't render duplicate cells underneath the frozen ones.\n            var columnIndexStart = showFrozenColumnsOnly ? 0 : columnIndices.columnIndexStart + numFrozenColumns;\n            var rowIndexStart = showFrozenRowsOnly ? 0 : rowIndices.rowIndexStart + numFrozenRows;\n            // if rendering frozen rows/columns, subtract one to convert to\n            // 0-indexing. if the 1-indexed value is 0, this sets the end index\n            // to -1, which avoids rendering absent frozen rows/columns at all.\n            var columnIndexEnd = showFrozenColumnsOnly ? numFrozenColumns - 1 : columnIndices.columnIndexEnd;\n            var rowIndexEnd = showFrozenRowsOnly ? numFrozenRows - 1 : rowIndices.rowIndexEnd;\n            // the main quadrant contains all cells in the table, so listen only to that quadrant\n            var onCompleteRender = quadrantType === QuadrantType.MAIN ? _this.handleCompleteRender : undefined;\n            return (React.createElement(\"div\", null,\n                React.createElement(TableBody, { enableMultipleSelection: enableMultipleSelection, cellRenderer: _this.bodyCellRenderer, focusedCell: focusedCell, grid: _this.grid, loading: hasLoadingOption(loadingOptions, TableLoadingOption.CELLS), locator: _this.locator, onCompleteRender: onCompleteRender, onFocusedCell: _this.handleFocus, onSelection: _this.getEnabledSelectionHandler(RegionCardinality.CELLS), bodyContextMenuRenderer: bodyContextMenuRenderer, renderMode: _this.getNormalizedRenderMode(), selectedRegions: selectedRegions, selectedRegionTransform: selectedRegionTransform, viewportRect: viewportRect, columnIndexStart: columnIndexStart, columnIndexEnd: columnIndexEnd, rowIndexStart: rowIndexStart, rowIndexEnd: rowIndexEnd, numFrozenColumns: showFrozenColumnsOnly ? numFrozenColumns : undefined, numFrozenRows: showFrozenRowsOnly ? numFrozenRows : undefined }),\n                _this.maybeRenderRegions(_this.styleBodyRegion, quadrantType)));\n        };\n        _this.getEnabledSelectionHandler = function (selectionMode) {\n            if (!isSelectionModeEnabled(_this.props, selectionMode)) {\n                // If the selection mode isn't enabled, return a callback that\n                // will clear the selection. For example, if row selection is\n                // disabled, clicking on the row header will clear the table's\n                // selection. If all selection modes are enabled, clicking on the\n                // same region twice will clear the selection.\n                return _this.clearSelection;\n            }\n            else {\n                return _this.handleSelection;\n            }\n        };\n        _this.handleCompleteRender = function () {\n            var _a, _b;\n            // the first onCompleteRender is triggered before the viewportRect is\n            // defined and the second after the viewportRect has been set. the cells\n            // will only actually render once the viewportRect is defined though, so\n            // we defer invoking onCompleteRender until that check passes.\n            if (_this.state.viewportRect != null) {\n                (_b = (_a = _this.props).onCompleteRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n                _this.didCompletelyMount = true;\n            }\n        };\n        _this.styleBodyRegion = function (region, quadrantType) {\n            var numFrozenColumns = _this.props.numFrozenColumns;\n            var cardinality = Regions.getRegionCardinality(region);\n            var style = _this.grid.getRegionStyle(region);\n            // ensure we're not showing borders at the boundary of the frozen-columns area\n            var canHideRightBorder = (quadrantType === QuadrantType.TOP_LEFT || quadrantType === QuadrantType.LEFT) &&\n                numFrozenColumns != null &&\n                numFrozenColumns > 0;\n            var fixedHeight = _this.grid.getHeight();\n            var fixedWidth = _this.grid.getWidth();\n            // include a correction in some cases to hide borders along quadrant boundaries\n            var alignmentCorrection = 1;\n            var alignmentCorrectionString = \"-\" + alignmentCorrection + \"px\";\n            switch (cardinality) {\n                case RegionCardinality.CELLS:\n                    return style;\n                case RegionCardinality.FULL_COLUMNS:\n                    style.top = alignmentCorrectionString;\n                    style.height = fixedHeight + alignmentCorrection;\n                    return style;\n                case RegionCardinality.FULL_ROWS:\n                    style.left = alignmentCorrectionString;\n                    style.width = fixedWidth + alignmentCorrection;\n                    if (canHideRightBorder) {\n                        style.right = alignmentCorrectionString;\n                    }\n                    return style;\n                case RegionCardinality.FULL_TABLE:\n                    style.left = alignmentCorrectionString;\n                    style.top = alignmentCorrectionString;\n                    style.width = fixedWidth + alignmentCorrection;\n                    style.height = fixedHeight + alignmentCorrection;\n                    if (canHideRightBorder) {\n                        style.right = alignmentCorrectionString;\n                    }\n                    return style;\n                default:\n                    return { display: \"none\" };\n            }\n        };\n        _this.styleMenuRegion = function (region) {\n            var viewportRect = _this.state.viewportRect;\n            if (viewportRect == null) {\n                return {};\n            }\n            var cardinality = Regions.getRegionCardinality(region);\n            var style = _this.grid.getRegionStyle(region);\n            switch (cardinality) {\n                case RegionCardinality.FULL_TABLE:\n                    style.right = \"0px\";\n                    style.bottom = \"0px\";\n                    style.top = \"0px\";\n                    style.left = \"0px\";\n                    style.borderBottom = \"none\";\n                    style.borderRight = \"none\";\n                    return style;\n                default:\n                    return { display: \"none\" };\n            }\n        };\n        _this.styleColumnHeaderRegion = function (region) {\n            var viewportRect = _this.state.viewportRect;\n            if (viewportRect == null) {\n                return {};\n            }\n            var cardinality = Regions.getRegionCardinality(region);\n            var style = _this.grid.getRegionStyle(region);\n            switch (cardinality) {\n                case RegionCardinality.FULL_TABLE:\n                    style.left = \"-1px\";\n                    style.borderLeft = \"none\";\n                    style.bottom = \"-1px\";\n                    return style;\n                case RegionCardinality.FULL_COLUMNS:\n                    style.bottom = \"-1px\";\n                    return style;\n                default:\n                    return { display: \"none\" };\n            }\n        };\n        _this.styleRowHeaderRegion = function (region) {\n            var viewportRect = _this.state.viewportRect;\n            if (viewportRect == null) {\n                return {};\n            }\n            var cardinality = Regions.getRegionCardinality(region);\n            var style = _this.grid.getRegionStyle(region);\n            switch (cardinality) {\n                case RegionCardinality.FULL_TABLE:\n                    style.top = \"-1px\";\n                    style.borderTop = \"none\";\n                    style.right = \"-1px\";\n                    return style;\n                case RegionCardinality.FULL_ROWS:\n                    style.right = \"-1px\";\n                    return style;\n                default:\n                    return { display: \"none\" };\n            }\n        };\n        _this.handleColumnWidthChanged = function (columnIndex, width) {\n            var selectedRegions = _this.state.selectedRegions;\n            var columnWidths = _this.state.columnWidths.slice();\n            if (Regions.hasFullTable(selectedRegions)) {\n                for (var col = 0; col < columnWidths.length; col++) {\n                    columnWidths[col] = width;\n                }\n            }\n            if (Regions.hasFullColumn(selectedRegions, columnIndex)) {\n                Regions.eachUniqueFullColumn(selectedRegions, function (col) {\n                    columnWidths[col] = width;\n                });\n            }\n            else {\n                columnWidths[columnIndex] = width;\n            }\n            _this.invalidateGrid();\n            _this.setState({ columnWidths: columnWidths });\n            var onColumnWidthChanged = _this.props.onColumnWidthChanged;\n            if (onColumnWidthChanged != null) {\n                onColumnWidthChanged(columnIndex, width);\n            }\n        };\n        _this.handleRowHeightChanged = function (rowIndex, height) {\n            var selectedRegions = _this.state.selectedRegions;\n            var rowHeights = _this.state.rowHeights.slice();\n            if (Regions.hasFullTable(selectedRegions)) {\n                for (var row = 0; row < rowHeights.length; row++) {\n                    rowHeights[row] = height;\n                }\n            }\n            if (Regions.hasFullRow(selectedRegions, rowIndex)) {\n                Regions.eachUniqueFullRow(selectedRegions, function (row) {\n                    rowHeights[row] = height;\n                });\n            }\n            else {\n                rowHeights[rowIndex] = height;\n            }\n            _this.invalidateGrid();\n            _this.setState({ rowHeights: rowHeights });\n            var onRowHeightChanged = _this.props.onRowHeightChanged;\n            if (onRowHeightChanged != null) {\n                onRowHeightChanged(rowIndex, height);\n            }\n        };\n        _this.handleRootScroll = function (_event) {\n            // Bug #211 - Native browser text selection events can cause the root\n            // element to scroll even though it has a overflow:hidden style. The\n            // only viable solution to this is to unscroll the element after the\n            // browser scrolls it.\n            if (_this.rootTableElement != null) {\n                _this.rootTableElement.scrollLeft = 0;\n                _this.rootTableElement.scrollTop = 0;\n            }\n        };\n        _this.handleBodyScroll = function (event) {\n            // Prevent the event from propagating to avoid a resize event on the\n            // resize sensor.\n            event.stopPropagation();\n            if (_this.locator != null && !_this.state.isLayoutLocked) {\n                var viewportRect = _this.locator.getViewportRect();\n                _this.updateViewportRect(viewportRect);\n            }\n        };\n        _this.clearSelection = function (_selectedRegions) {\n            _this.handleSelection([]);\n        };\n        _this.syncViewportPosition = function (_a) {\n            var nextScrollLeft = _a.nextScrollLeft, nextScrollTop = _a.nextScrollTop;\n            var viewportRect = _this.state.viewportRect;\n            if (nextScrollLeft !== undefined || nextScrollTop !== undefined) {\n                // we need to modify the scroll container explicitly for the viewport to shift. in so\n                // doing, we add the size of the header elements, which are not technically part of the\n                // \"grid\" concept (the grid only consists of body cells at present).\n                if (nextScrollTop !== undefined) {\n                    var topCorrection = _this.shouldDisableVerticalScroll() ? 0 : _this.columnHeaderElement.clientHeight;\n                    _this.scrollContainerElement.scrollTop = nextScrollTop + topCorrection;\n                }\n                if (nextScrollLeft !== undefined) {\n                    var leftCorrection = _this.shouldDisableHorizontalScroll() || _this.rowHeaderElement == null\n                        ? 0\n                        : _this.rowHeaderElement.clientWidth;\n                    _this.scrollContainerElement.scrollLeft = nextScrollLeft + leftCorrection;\n                }\n                var nextViewportRect = new Rect(nextScrollLeft, nextScrollTop, viewportRect.width, viewportRect.height);\n                _this.updateViewportRect(nextViewportRect);\n            }\n        };\n        _this.handleFocus = function (focusedCell) {\n            var _a, _b;\n            if (!_this.props.enableFocusedCell) {\n                // don't set focus state if focus is not allowed\n                return;\n            }\n            // only set focused cell state if not specified in props\n            if (_this.props.focusedCell == null) {\n                _this.setState({ focusedCell: focusedCell });\n            }\n            (_b = (_a = _this.props).onFocusedCell) === null || _b === void 0 ? void 0 : _b.call(_a, focusedCell);\n        };\n        _this.handleSelection = function (selectedRegions) {\n            // only set selectedRegions state if not specified in props\n            if (_this.props.selectedRegions == null) {\n                _this.setState({ selectedRegions: selectedRegions });\n            }\n            var onSelection = _this.props.onSelection;\n            if (onSelection != null) {\n                onSelection(selectedRegions);\n            }\n        };\n        _this.handleColumnsReordering = function (verticalGuides) {\n            _this.setState({ isReordering: true, verticalGuides: verticalGuides });\n        };\n        _this.handleColumnsReordered = function (oldIndex, newIndex, length) {\n            var _a, _b;\n            _this.setState({ isReordering: false, verticalGuides: undefined });\n            (_b = (_a = _this.props).onColumnsReordered) === null || _b === void 0 ? void 0 : _b.call(_a, oldIndex, newIndex, length);\n        };\n        _this.handleRowsReordering = function (horizontalGuides) {\n            _this.setState({ isReordering: true, horizontalGuides: horizontalGuides });\n        };\n        _this.handleRowsReordered = function (oldIndex, newIndex, length) {\n            var _a, _b;\n            _this.setState({ isReordering: false, horizontalGuides: undefined });\n            (_b = (_a = _this.props).onRowsReordered) === null || _b === void 0 ? void 0 : _b.call(_a, oldIndex, newIndex, length);\n        };\n        _this.handleLayoutLock = function (isLayoutLocked) {\n            if (isLayoutLocked === void 0) { isLayoutLocked = false; }\n            _this.setState({ isLayoutLocked: isLayoutLocked });\n        };\n        _this.updateViewportRect = function (nextViewportRect) {\n            var viewportRect = _this.state.viewportRect;\n            _this.setState({ viewportRect: nextViewportRect });\n            var didViewportChange = (viewportRect != null && !viewportRect.equals(nextViewportRect)) ||\n                (viewportRect == null && nextViewportRect != null);\n            if (didViewportChange) {\n                _this.invokeOnVisibleCellsChangeCallback(nextViewportRect);\n            }\n        };\n        _this.getMaxFrozenColumnIndex = function () {\n            var numFrozenColumns = _this.state.numFrozenColumnsClamped;\n            return numFrozenColumns != null ? numFrozenColumns - 1 : undefined;\n        };\n        _this.getMaxFrozenRowIndex = function () {\n            var numFrozenRows = _this.state.numFrozenRowsClamped;\n            return numFrozenRows != null ? numFrozenRows - 1 : undefined;\n        };\n        _this.handleColumnResizeGuide = function (verticalGuides) {\n            _this.setState({ verticalGuides: verticalGuides });\n        };\n        _this.handleRowResizeGuide = function (horizontalGuides) {\n            _this.setState({ horizontalGuides: horizontalGuides });\n        };\n        var _a = _this.props, children = _a.children, columnWidths = _a.columnWidths, defaultRowHeight = _a.defaultRowHeight, defaultColumnWidth = _a.defaultColumnWidth, numRows = _a.numRows, rowHeights = _a.rowHeights;\n        var childrenArray = React.Children.toArray(children);\n        var columnIdToIndex = Table2.createColumnIdIndex(childrenArray);\n        // Create height/width arrays using the lengths from props and\n        // children, the default values from props, and finally any sparse\n        // arrays passed into props.\n        var newColumnWidths = childrenArray.map(function () { return defaultColumnWidth; });\n        newColumnWidths = Utils.assignSparseValues(newColumnWidths, columnWidths);\n        var newRowHeights = Utils.times(numRows, function () { return defaultRowHeight; });\n        newRowHeights = Utils.assignSparseValues(newRowHeights, rowHeights);\n        var selectedRegions = props.selectedRegions == null ? [] : props.selectedRegions;\n        var focusedCell = FocusedCellUtils.getInitialFocusedCell(props.enableFocusedCell, props.focusedCell, undefined, selectedRegions);\n        _this.state = {\n            childrenArray: childrenArray,\n            columnIdToIndex: columnIdToIndex,\n            columnWidths: newColumnWidths,\n            focusedCell: focusedCell,\n            isLayoutLocked: false,\n            isReordering: false,\n            numFrozenColumnsClamped: clampNumFrozenColumns(props),\n            numFrozenRowsClamped: clampNumFrozenRows(props),\n            rowHeights: newRowHeights,\n            selectedRegions: selectedRegions,\n        };\n        _this.hotkeysImpl = new TableHotkeys(props, _this.state, _this.grid, {\n            getEnabledSelectionHandler: _this.getEnabledSelectionHandler,\n            handleFocus: _this.handleFocus,\n            handleSelection: _this.handleSelection,\n            syncViewportPosition: _this.syncViewportPosition,\n        });\n        _this.hotkeys = getHotkeysFromProps(props, _this.hotkeysImpl);\n        return _this;\n    }\n    Table2.getDerivedStateFromProps = function (props, state) {\n        var children = props.children, defaultColumnWidth = props.defaultColumnWidth, defaultRowHeight = props.defaultRowHeight, enableFocusedCell = props.enableFocusedCell, focusedCell = props.focusedCell, numRows = props.numRows, selectedRegions = props.selectedRegions, selectionModes = props.selectionModes;\n        // assign values from state if uncontrolled\n        var columnWidths = props.columnWidths, rowHeights = props.rowHeights;\n        if (columnWidths == null) {\n            columnWidths = state.columnWidths;\n        }\n        if (rowHeights == null) {\n            rowHeights = state.rowHeights;\n        }\n        var newChildrenArray = React.Children.toArray(children);\n        var didChildrenChange = newChildrenArray !== state.childrenArray;\n        var numCols = newChildrenArray.length;\n        var newColumnWidths = columnWidths;\n        if (columnWidths !== state.columnWidths || didChildrenChange) {\n            // Try to maintain widths of columns by looking up the width of the\n            // column that had the same `ID` prop. If none is found, use the\n            // previous width at the same index.\n            var previousColumnWidths = newChildrenArray.map(function (child, index) {\n                var mappedIndex = state.columnIdToIndex[child.props.id];\n                return state.columnWidths[mappedIndex != null ? mappedIndex : index];\n            });\n            // Make sure the width/height arrays have the correct length, but keep\n            // as many existing widths/heights as possible. Also, apply the\n            // sparse width/heights from props.\n            newColumnWidths = Utils.arrayOfLength(newColumnWidths, numCols, defaultColumnWidth);\n            newColumnWidths = Utils.assignSparseValues(newColumnWidths, previousColumnWidths);\n            newColumnWidths = Utils.assignSparseValues(newColumnWidths, columnWidths);\n        }\n        var newRowHeights = rowHeights;\n        if (rowHeights !== state.rowHeights || numRows !== state.rowHeights.length) {\n            newRowHeights = Utils.arrayOfLength(newRowHeights, numRows, defaultRowHeight);\n            newRowHeights = Utils.assignSparseValues(newRowHeights, rowHeights);\n        }\n        var newSelectedRegions = selectedRegions;\n        if (selectedRegions == null) {\n            // if we're in uncontrolled mode, filter out all selected regions that don't\n            // fit in the current new table dimensions\n            newSelectedRegions = state.selectedRegions.filter(function (region) {\n                var regionCardinality = Regions.getRegionCardinality(region);\n                return (isSelectionModeEnabled(props, regionCardinality, selectionModes) &&\n                    Regions.isRegionValidForTable(region, numRows, numCols));\n            });\n        }\n        var newFocusedCell = FocusedCellUtils.getInitialFocusedCell(enableFocusedCell, focusedCell, state.focusedCell, newSelectedRegions);\n        var nextState = {\n            childrenArray: newChildrenArray,\n            columnIdToIndex: didChildrenChange ? Table2.createColumnIdIndex(newChildrenArray) : state.columnIdToIndex,\n            columnWidths: newColumnWidths,\n            focusedCell: newFocusedCell,\n            numFrozenColumnsClamped: clampNumFrozenColumns(props),\n            numFrozenRowsClamped: clampNumFrozenRows(props),\n            rowHeights: newRowHeights,\n            selectedRegions: newSelectedRegions,\n        };\n        if (!CoreUtils.deepCompareKeys(state, nextState, Table2.SHALLOW_COMPARE_STATE_KEYS_DENYLIST)) {\n            return nextState;\n        }\n        return null;\n    };\n    Table2.createColumnIdIndex = function (children) {\n        var columnIdToIndex = {};\n        for (var i = 0; i < children.length; i++) {\n            var key = children[i].props.id;\n            if (key != null) {\n                columnIdToIndex[String(key)] = i;\n            }\n        }\n        return columnIdToIndex;\n    };\n    // Instance methods\n    // ================\n    /**\n     * __Experimental!__ Resizes all rows in the table to the approximate\n     * maximum height of wrapped cell content in each row. Works best when each\n     * cell contains plain text of a consistent font style (though font style\n     * may vary between cells). Since this function uses approximate\n     * measurements, results may not be perfect.\n     *\n     * Approximation parameters can be configured for the entire table or on a\n     * per-cell basis. Default values are fine-tuned to work well with default\n     * Table font styles.\n     */\n    Table2.prototype.resizeRowsByApproximateHeight = function (getCellText, options) {\n        var rowHeights = resizeRowsByApproximateHeight(this.props.numRows, this.state.columnWidths, getCellText, options);\n        this.invalidateGrid();\n        this.setState({ rowHeights: rowHeights });\n    };\n    /**\n     * Resize all rows in the table to the height of the tallest visible cell in the specified columns.\n     * If no indices are provided, default to using the tallest visible cell from all columns in view.\n     */\n    Table2.prototype.resizeRowsByTallestCell = function (columnIndices) {\n        var rowHeights = resizeRowsByTallestCell(this.grid, this.state.viewportRect, this.locator, this.state.rowHeights.length, columnIndices);\n        this.invalidateGrid();\n        this.setState({ rowHeights: rowHeights });\n    };\n    /**\n     * Scrolls the table to the target region in a fashion appropriate to the target region's\n     * cardinality:\n     *\n     * - CELLS: Scroll the top-left cell in the target region to the top-left corner of the viewport.\n     * - FULL_ROWS: Scroll the top-most row in the target region to the top of the viewport.\n     * - FULL_COLUMNS: Scroll the left-most column in the target region to the left side of the viewport.\n     * - FULL_TABLE: Scroll the top-left cell in the table to the top-left corner of the viewport.\n     *\n     * If there are active frozen rows and/or columns, the target region will be positioned in the\n     * top-left corner of the non-frozen area (unless the target region itself is in the frozen\n     * area).\n     *\n     * If the target region is close to the bottom-right corner of the table, this function will\n     * simply scroll the target region as close to the top-left as possible until the bottom-right\n     * corner is reached.\n     */\n    Table2.prototype.scrollToRegion = function (region) {\n        var _a = this.state, numFrozenColumns = _a.numFrozenColumnsClamped, numFrozenRows = _a.numFrozenRowsClamped;\n        var _b = this.state.viewportRect, currScrollLeft = _b.left, currScrollTop = _b.top;\n        var _c = ScrollUtils.getScrollPositionForRegion(region, currScrollLeft, currScrollTop, this.grid.getCumulativeWidthBefore, this.grid.getCumulativeHeightBefore, numFrozenRows, numFrozenColumns), scrollLeft = _c.scrollLeft, scrollTop = _c.scrollTop;\n        var correctedScrollLeft = this.shouldDisableHorizontalScroll() ? 0 : scrollLeft;\n        var correctedScrollTop = this.shouldDisableVerticalScroll() ? 0 : scrollTop;\n        // defer to the quadrant stack to keep all quadrant positions in sync\n        this.quadrantStackInstance.scrollToPosition(correctedScrollLeft, correctedScrollTop);\n    };\n    // React lifecycle\n    // ===============\n    Table2.prototype.getChildContext = function () {\n        return {\n            enableColumnInteractionBar: this.props.enableColumnInteractionBar,\n        };\n    };\n    Table2.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n        var propKeysDenylist = { exclude: Table2.SHALLOW_COMPARE_PROP_KEYS_DENYLIST };\n        var stateKeysDenylist = { exclude: Table2.SHALLOW_COMPARE_STATE_KEYS_DENYLIST };\n        return (!CoreUtils.shallowCompareKeys(this.props, nextProps, propKeysDenylist) ||\n            !CoreUtils.shallowCompareKeys(this.state, nextState, stateKeysDenylist) ||\n            !CoreUtils.deepCompareKeys(this.props, nextProps, Table2.SHALLOW_COMPARE_PROP_KEYS_DENYLIST) ||\n            !CoreUtils.deepCompareKeys(this.state, nextState, Table2.SHALLOW_COMPARE_STATE_KEYS_DENYLIST));\n    };\n    Table2.prototype.render = function () {\n        return React.createElement(HotkeysTarget2, { hotkeys: this.hotkeys }, this.renderTableContents);\n    };\n    /**\n     * When the component mounts, the HTML Element refs will be available, so\n     * we constructor the Locator, which queries the elements' bounding\n     * ClientRects.\n     */\n    Table2.prototype.componentDidMount = function () {\n        var _this = this;\n        this.validateGrid();\n        this.locator = new Locator(this.rootTableElement, this.scrollContainerElement, this.cellContainerElement);\n        this.updateLocator();\n        this.updateViewportRect(this.locator.getViewportRect());\n        this.resizeSensorDetach = ResizeSensor.attach(this.rootTableElement, function () {\n            if (!_this.state.isLayoutLocked) {\n                _this.updateViewportRect(_this.locator.getViewportRect());\n            }\n        });\n    };\n    Table2.prototype.componentWillUnmount = function () {\n        if (this.resizeSensorDetach != null) {\n            this.resizeSensorDetach();\n            delete this.resizeSensorDetach;\n        }\n        this.didCompletelyMount = false;\n    };\n    Table2.prototype.getSnapshotBeforeUpdate = function () {\n        var viewportRect = this.state.viewportRect;\n        this.validateGrid();\n        var tableBottom = this.grid.getCumulativeHeightAt(this.grid.numRows - 1);\n        var tableRight = this.grid.getCumulativeWidthAt(this.grid.numCols - 1);\n        var nextScrollTop = tableBottom < viewportRect.top + viewportRect.height\n            ? // scroll the last row into view\n                Math.max(0, tableBottom - viewportRect.height)\n            : undefined;\n        var nextScrollLeft = tableRight < viewportRect.left + viewportRect.width\n            ? // scroll the last column into view\n                Math.max(0, tableRight - viewportRect.width)\n            : undefined;\n        // these will only be defined if they differ from viewportRect\n        return { nextScrollLeft: nextScrollLeft, nextScrollTop: nextScrollTop };\n    };\n    Table2.prototype.componentDidUpdate = function (prevProps, prevState, snapshot) {\n        _super.prototype.componentDidUpdate.call(this, prevProps, prevState, snapshot);\n        this.hotkeysImpl.setState(this.state);\n        this.hotkeysImpl.setProps(this.props);\n        var didChildrenChange = React.Children.toArray(this.props.children) !==\n            this.state.childrenArray;\n        var shouldInvalidateGrid = didChildrenChange ||\n            this.props.columnWidths !== prevState.columnWidths ||\n            this.props.rowHeights !== prevState.rowHeights ||\n            this.props.numRows !== prevProps.numRows ||\n            (this.props.forceRerenderOnSelectionChange && this.props.selectedRegions !== prevProps.selectedRegions);\n        if (shouldInvalidateGrid) {\n            this.invalidateGrid();\n        }\n        if (this.locator != null) {\n            this.validateGrid();\n            this.updateLocator();\n        }\n        // When true, we'll need to imperatively synchronize quadrant views after\n        // the update. This check lets us avoid expensively diff'ing columnWidths\n        // and rowHeights in <TableQuadrantStack> on each update.\n        var didUpdateColumnOrRowSizes = !CoreUtils.arraysEqual(this.state.columnWidths, prevState.columnWidths) ||\n            !CoreUtils.arraysEqual(this.state.rowHeights, prevState.rowHeights);\n        if (didUpdateColumnOrRowSizes) {\n            this.quadrantStackInstance.synchronizeQuadrantViews();\n            this.syncViewportPosition(snapshot);\n        }\n        var shouldInvalidateHotkeys = this.props.getCellClipboardData !== prevProps.getCellClipboardData ||\n            this.props.enableFocusedCell !== prevProps.enableFocusedCell ||\n            this.props.enableMultipleSelection !== prevProps.enableMultipleSelection ||\n            this.props.selectionModes !== prevProps.selectionModes;\n        if (shouldInvalidateHotkeys) {\n            this.hotkeys = getHotkeysFromProps(this.props, this.hotkeysImpl);\n        }\n    };\n    Table2.prototype.validateProps = function (props) {\n        var children = props.children, columnWidths = props.columnWidths, numFrozenColumns = props.numFrozenColumns, numFrozenRows = props.numFrozenRows, numRows = props.numRows, rowHeights = props.rowHeights;\n        var numColumns = React.Children.count(children);\n        // do cheap error-checking first.\n        if (numRows != null && numRows < 0) {\n            throw new Error(Errors.TABLE_NUM_ROWS_NEGATIVE);\n        }\n        if (numFrozenRows != null && numFrozenRows < 0) {\n            throw new Error(Errors.TABLE_NUM_FROZEN_ROWS_NEGATIVE);\n        }\n        if (numFrozenColumns != null && numFrozenColumns < 0) {\n            throw new Error(Errors.TABLE_NUM_FROZEN_COLUMNS_NEGATIVE);\n        }\n        if (numRows != null && rowHeights != null && rowHeights.length !== numRows) {\n            throw new Error(Errors.TABLE_NUM_ROWS_ROW_HEIGHTS_MISMATCH);\n        }\n        if (numColumns != null && columnWidths != null && columnWidths.length !== numColumns) {\n            throw new Error(Errors.TABLE_NUM_COLUMNS_COLUMN_WIDTHS_MISMATCH);\n        }\n        React.Children.forEach(children, function (child) {\n            if (!CoreUtils.isElementOfType(child, Column)) {\n                throw new Error(Errors.TABLE_NON_COLUMN_CHILDREN_WARNING);\n            }\n        });\n        // these are recoverable scenarios, so just print a warning.\n        if (numFrozenRows != null && numRows != null && numFrozenRows > numRows) {\n            console.warn(Errors.TABLE_NUM_FROZEN_ROWS_BOUND_WARNING);\n        }\n        if (numFrozenColumns != null && numFrozenColumns > numColumns) {\n            console.warn(Errors.TABLE_NUM_FROZEN_COLUMNS_BOUND_WARNING);\n        }\n    };\n    Table2.prototype.gridDimensionsMatchProps = function () {\n        var _a = this.props, children = _a.children, numRows = _a.numRows;\n        return (this.grid != null && this.grid.numCols === React.Children.count(children) && this.grid.numRows === numRows);\n    };\n    // Quadrant refs\n    // =============\n    Table2.prototype.shouldDisableVerticalScroll = function () {\n        var enableGhostCells = this.props.enableGhostCells;\n        var viewportRect = this.state.viewportRect;\n        var rowIndices = this.grid.getRowIndicesInRect(viewportRect, enableGhostCells);\n        var isViewportUnscrolledVertically = viewportRect != null && viewportRect.top === 0;\n        var areRowHeadersLoading = hasLoadingOption(this.props.loadingOptions, TableLoadingOption.ROW_HEADERS);\n        var areGhostRowsVisible = enableGhostCells && this.grid.isGhostIndex(rowIndices.rowIndexEnd, 0);\n        return areGhostRowsVisible && (isViewportUnscrolledVertically || areRowHeadersLoading);\n    };\n    Table2.prototype.shouldDisableHorizontalScroll = function () {\n        var enableGhostCells = this.props.enableGhostCells;\n        var viewportRect = this.state.viewportRect;\n        var columnIndices = this.grid.getColumnIndicesInRect(viewportRect, enableGhostCells);\n        var isViewportUnscrolledHorizontally = viewportRect != null && viewportRect.left === 0;\n        var areGhostColumnsVisible = enableGhostCells && this.grid.isGhostColumn(columnIndices.columnIndexEnd);\n        var areColumnHeadersLoading = hasLoadingOption(this.props.loadingOptions, TableLoadingOption.COLUMN_HEADERS);\n        return areGhostColumnsVisible && (isViewportUnscrolledHorizontally || areColumnHeadersLoading);\n    };\n    Table2.prototype.getColumnProps = function (columnIndex) {\n        var column = this.state.childrenArray[columnIndex];\n        return column === undefined ? undefined : column.props;\n    };\n    Table2.prototype.isGuidesShowing = function () {\n        return this.state.verticalGuides != null || this.state.horizontalGuides != null;\n    };\n    Table2.prototype.invalidateGrid = function () {\n        this.grid = null;\n    };\n    Table2.prototype.validateGrid = function () {\n        if (this.grid == null) {\n            var _a = this.props, defaultRowHeight = _a.defaultRowHeight, defaultColumnWidth = _a.defaultColumnWidth;\n            var _b = this.state, rowHeights = _b.rowHeights, columnWidths = _b.columnWidths;\n            this.grid = new Grid(rowHeights, columnWidths, Grid.DEFAULT_BLEED, defaultRowHeight, defaultColumnWidth);\n            this.invokeOnVisibleCellsChangeCallback(this.state.viewportRect);\n            this.hotkeysImpl.setGrid(this.grid);\n        }\n    };\n    /**\n     * Renders a `RegionLayer`, applying styles to the regions using the\n     * supplied `RegionStyler`. `RegionLayer` is a `PureRender` component, so\n     * the `RegionStyler` should be a new instance on every render if we\n     * intend to redraw the region layer.\n     */\n    Table2.prototype.maybeRenderRegions = function (getRegionStyle, quadrantType) {\n        if (this.isGuidesShowing() && !this.state.isReordering) {\n            // we want to show guides *and* the selection styles when reordering rows or columns\n            return undefined;\n        }\n        var regionGroups = Regions.joinStyledRegionGroups(this.state.selectedRegions, this.props.styledRegionGroups, this.state.focusedCell);\n        return regionGroups.map(function (regionGroup, index) {\n            var regionStyles = regionGroup.regions.map(function (region) { return getRegionStyle(region, quadrantType); });\n            return (React.createElement(RegionLayer, { className: classNames(regionGroup.className), key: index, regions: regionGroup.regions, regionStyles: regionStyles }));\n        });\n    };\n    Table2.prototype.updateLocator = function () {\n        this.locator\n            .setGrid(this.grid)\n            .setNumFrozenRows(this.state.numFrozenRowsClamped)\n            .setNumFrozenColumns(this.state.numFrozenColumnsClamped);\n    };\n    Table2.prototype.invokeOnVisibleCellsChangeCallback = function (viewportRect) {\n        var _a, _b;\n        var columnIndices = this.grid.getColumnIndicesInRect(viewportRect);\n        var rowIndices = this.grid.getRowIndicesInRect(viewportRect);\n        (_b = (_a = this.props).onVisibleCellsChange) === null || _b === void 0 ? void 0 : _b.call(_a, rowIndices, columnIndices);\n    };\n    /**\n     * Normalizes RenderMode.BATCH_ON_UPDATE into RenderMode.{BATCH,NONE}. We do\n     * this because there are actually multiple updates required before the\n     * <Table> is considered fully \"mounted,\" and adding that knowledge to child\n     * components would lead to tight coupling. Thus, keep it simple for them.\n     */\n    Table2.prototype.getNormalizedRenderMode = function () {\n        var renderMode = this.props.renderMode;\n        var shouldBatchRender = renderMode === RenderMode.BATCH || (renderMode === RenderMode.BATCH_ON_UPDATE && this.didCompletelyMount);\n        return shouldBatchRender ? RenderMode.BATCH : RenderMode.NONE;\n    };\n    Table2.displayName = DISPLAYNAME_PREFIX + \".Table2\";\n    Table2.defaultProps = {\n        defaultColumnWidth: 150,\n        defaultRowHeight: 20,\n        enableFocusedCell: false,\n        enableGhostCells: false,\n        enableMultipleSelection: true,\n        enableRowHeader: true,\n        forceRerenderOnSelectionChange: false,\n        loadingOptions: [],\n        minColumnWidth: 50,\n        minRowHeight: 20,\n        numFrozenColumns: 0,\n        numFrozenRows: 0,\n        numRows: 0,\n        renderMode: RenderMode.BATCH_ON_UPDATE,\n        rowHeaderCellRenderer: renderDefaultRowHeader,\n        selectionModes: SelectionModes.ALL,\n    };\n    Table2.childContextTypes = columnInteractionBarContextTypes;\n    Table2.SHALLOW_COMPARE_PROP_KEYS_DENYLIST = [\n        \"selectedRegions\",\n    ];\n    Table2.SHALLOW_COMPARE_STATE_KEYS_DENYLIST = [\n        \"selectedRegions\",\n        \"viewportRect\",\n    ];\n    return Table2;\n}(AbstractComponent2));\nexport { Table2 };\n//# sourceMappingURL=table2.js.map"]},"metadata":{},"sourceType":"module"}