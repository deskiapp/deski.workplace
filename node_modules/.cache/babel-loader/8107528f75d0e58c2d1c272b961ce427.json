{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { DISPLAYNAME_PREFIX, Icon, Popover, Position } from \"@blueprintjs/core\";\nimport * as Classes from \"../../common/classes\";\nimport { Utils } from \"../../common/utils\";\nimport { Locator } from \"../../locator\"; // amount in pixels that the content div width changes when truncated vs when\n// not truncated. Note: could be modified by styles\n// Note 2: this doesn't come from the width of the popover element, but the \"right\" style\n// on the div, which comes from styles\n\nvar CONTENT_DIV_WIDTH_DELTA = 25;\nexport var TruncatedPopoverMode;\n\n(function (TruncatedPopoverMode) {\n  TruncatedPopoverMode[\"ALWAYS\"] = \"always\";\n  TruncatedPopoverMode[\"NEVER\"] = \"never\";\n  TruncatedPopoverMode[\"WHEN_TRUNCATED\"] = \"when-truncated\";\n  TruncatedPopoverMode[\"WHEN_TRUNCATED_APPROX\"] = \"when-truncated-approx\";\n})(TruncatedPopoverMode || (TruncatedPopoverMode = {}));\n\nvar TruncatedFormat = function (_super) {\n  __extends(TruncatedFormat, _super);\n\n  function TruncatedFormat() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      isPopoverOpen: false,\n      isTruncated: false\n    };\n\n    _this.handleContentDivRef = function (ref) {\n      return _this.contentDiv = ref;\n    };\n\n    _this.handlePopoverOpen = function () {\n      _this.setState({\n        isPopoverOpen: true\n      });\n    };\n\n    _this.handlePopoverClose = function () {\n      _this.setState({\n        isPopoverOpen: false\n      });\n    };\n\n    return _this;\n  }\n\n  TruncatedFormat.prototype.componentDidMount = function () {\n    this.setTruncationState();\n  };\n\n  TruncatedFormat.prototype.componentDidUpdate = function () {\n    this.setTruncationState();\n  };\n\n  TruncatedFormat.prototype.render = function () {\n    var _a = this.props,\n        children = _a.children,\n        detectTruncation = _a.detectTruncation,\n        truncateLength = _a.truncateLength,\n        truncationSuffix = _a.truncationSuffix;\n    var content = \"\" + children;\n    var cellContent = content;\n\n    if (!detectTruncation && truncateLength > 0 && cellContent.length > truncateLength) {\n      cellContent = cellContent.substring(0, truncateLength) + truncationSuffix;\n    }\n\n    if (this.shouldShowPopover(content)) {\n      var className = classNames(this.props.className, Classes.TABLE_TRUNCATED_FORMAT);\n      return React.createElement(\"div\", {\n        className: className\n      }, React.createElement(\"div\", {\n        className: Classes.TABLE_TRUNCATED_VALUE,\n        ref: this.handleContentDivRef\n      }, cellContent), this.renderPopover());\n    } else {\n      var className = classNames(this.props.className, Classes.TABLE_TRUNCATED_FORMAT_TEXT);\n      return React.createElement(\"div\", {\n        className: className,\n        ref: this.handleContentDivRef\n      }, cellContent);\n    }\n  };\n\n  TruncatedFormat.prototype.renderPopover = function () {\n    var _a = this.props,\n        children = _a.children,\n        preformatted = _a.preformatted; // `<Popover>` will always check the content's position on update\n    // regardless if it is open or not. This negatively affects perf due to\n    // layout thrashing. So instead we manage the popover state ourselves\n    // and mimic its popover target\n\n    if (this.state.isPopoverOpen) {\n      var popoverClasses = classNames(Classes.TABLE_TRUNCATED_POPOVER, preformatted ? Classes.TABLE_POPOVER_WHITESPACE_PRE : Classes.TABLE_POPOVER_WHITESPACE_NORMAL);\n      var popoverContent = React.createElement(\"div\", {\n        className: popoverClasses\n      }, children);\n      return (\n        /* eslint-disable-next-line deprecation/deprecation */\n        React.createElement(Popover, {\n          className: Classes.TABLE_TRUNCATED_POPOVER_TARGET,\n          modifiers: {\n            preventOverflow: {\n              boundariesElement: \"window\"\n            }\n          },\n          content: popoverContent,\n          position: Position.BOTTOM,\n          isOpen: true,\n          onClose: this.handlePopoverClose\n        }, React.createElement(Icon, {\n          icon: \"more\"\n        }))\n      );\n    } else {\n      // NOTE: This structure matches what `<Popover>` does internally. If\n      // `<Popover>` changes, this must be updated.\n      return React.createElement(\"span\", {\n        className: Classes.TABLE_TRUNCATED_POPOVER_TARGET,\n        onClick: this.handlePopoverOpen\n      }, React.createElement(Icon, {\n        icon: \"more\"\n      }));\n    }\n  };\n\n  TruncatedFormat.prototype.shouldShowPopover = function (content) {\n    var _a = this.props,\n        detectTruncation = _a.detectTruncation,\n        measureByApproxOptions = _a.measureByApproxOptions,\n        showPopover = _a.showPopover,\n        truncateLength = _a.truncateLength;\n\n    switch (showPopover) {\n      case TruncatedPopoverMode.ALWAYS:\n        return true;\n\n      case TruncatedPopoverMode.NEVER:\n        return false;\n\n      case TruncatedPopoverMode.WHEN_TRUNCATED:\n        return detectTruncation ? this.state.isTruncated : truncateLength > 0 && content.length > truncateLength;\n\n      case TruncatedPopoverMode.WHEN_TRUNCATED_APPROX:\n        if (!detectTruncation) {\n          return truncateLength > 0 && content.length > truncateLength;\n        }\n\n        if (this.props.parentCellHeight == null || this.props.parentCellWidth == null) {\n          return false;\n        }\n\n        var approximateCharWidth = measureByApproxOptions.approximateCharWidth,\n            approximateLineHeight = measureByApproxOptions.approximateLineHeight,\n            cellHorizontalPadding = measureByApproxOptions.cellHorizontalPadding,\n            numBufferLines = measureByApproxOptions.numBufferLines;\n        var cellWidth = this.props.parentCellWidth;\n        var approxCellHeight = Utils.getApproxCellHeight(content, cellWidth, approximateCharWidth, approximateLineHeight, cellHorizontalPadding, numBufferLines);\n        var shouldTruncate = approxCellHeight > this.props.parentCellHeight;\n        return shouldTruncate;\n\n      default:\n        return false;\n    }\n  };\n\n  TruncatedFormat.prototype.setTruncationState = function () {\n    if (!this.props.detectTruncation || this.props.showPopover !== TruncatedPopoverMode.WHEN_TRUNCATED) {\n      return;\n    }\n\n    if (this.contentDiv === undefined) {\n      this.setState({\n        isTruncated: false\n      });\n      return;\n    }\n\n    var isTruncated = this.state.isTruncated; // take all measurements at once to avoid excessive DOM reflows.\n\n    var _a = this.contentDiv,\n        containerHeight = _a.clientHeight,\n        containerWidth = _a.clientWidth,\n        actualContentHeight = _a.scrollHeight,\n        contentWidth = _a.scrollWidth; // if the content is truncated, then a popover handle will be present as a\n    // sibling of the content. we don't want to consider that handle when\n    // calculating the width of the actual content, so subtract it.\n\n    var actualContentWidth = isTruncated ? contentWidth - CONTENT_DIV_WIDTH_DELTA : contentWidth; // we of course truncate the content if it doesn't fit in the container. but we\n    // also aggressively truncate if they're the same size with truncation enabled;\n    // this addresses browser-crashing stack-overflow bugs at various zoom levels.\n    // (see: https://github.com/palantir/blueprint/pull/1519)\n\n    var shouldTruncate = isTruncated && actualContentWidth === containerWidth || actualContentWidth > containerWidth || actualContentHeight > containerHeight;\n    this.setState({\n      isTruncated: shouldTruncate\n    });\n  };\n\n  TruncatedFormat.displayName = DISPLAYNAME_PREFIX + \".TruncatedFormat\";\n  TruncatedFormat.defaultProps = {\n    detectTruncation: false,\n    measureByApproxOptions: {\n      approximateCharWidth: 8,\n      approximateLineHeight: 18,\n      cellHorizontalPadding: 2 * Locator.CELL_HORIZONTAL_PADDING,\n      numBufferLines: 0\n    },\n    preformatted: false,\n    showPopover: TruncatedPopoverMode.WHEN_TRUNCATED,\n    truncateLength: 2000,\n    truncationSuffix: \"...\"\n  };\n  return TruncatedFormat;\n}(React.PureComponent);\n\nexport { TruncatedFormat };","map":{"version":3,"sources":["../../../../src/cell/formats/truncatedFormat.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { DISPLAYNAME_PREFIX, Icon, Popover, Position } from \"@blueprintjs/core\";\nimport * as Classes from \"../../common/classes\";\nimport { Utils } from \"../../common/utils\";\nimport { Locator } from \"../../locator\";\n// amount in pixels that the content div width changes when truncated vs when\n// not truncated. Note: could be modified by styles\n// Note 2: this doesn't come from the width of the popover element, but the \"right\" style\n// on the div, which comes from styles\nvar CONTENT_DIV_WIDTH_DELTA = 25;\nexport var TruncatedPopoverMode;\n(function (TruncatedPopoverMode) {\n    TruncatedPopoverMode[\"ALWAYS\"] = \"always\";\n    TruncatedPopoverMode[\"NEVER\"] = \"never\";\n    TruncatedPopoverMode[\"WHEN_TRUNCATED\"] = \"when-truncated\";\n    TruncatedPopoverMode[\"WHEN_TRUNCATED_APPROX\"] = \"when-truncated-approx\";\n})(TruncatedPopoverMode || (TruncatedPopoverMode = {}));\nvar TruncatedFormat = /** @class */ (function (_super) {\n    __extends(TruncatedFormat, _super);\n    function TruncatedFormat() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            isPopoverOpen: false,\n            isTruncated: false,\n        };\n        _this.handleContentDivRef = function (ref) { return (_this.contentDiv = ref); };\n        _this.handlePopoverOpen = function () {\n            _this.setState({ isPopoverOpen: true });\n        };\n        _this.handlePopoverClose = function () {\n            _this.setState({ isPopoverOpen: false });\n        };\n        return _this;\n    }\n    TruncatedFormat.prototype.componentDidMount = function () {\n        this.setTruncationState();\n    };\n    TruncatedFormat.prototype.componentDidUpdate = function () {\n        this.setTruncationState();\n    };\n    TruncatedFormat.prototype.render = function () {\n        var _a = this.props, children = _a.children, detectTruncation = _a.detectTruncation, truncateLength = _a.truncateLength, truncationSuffix = _a.truncationSuffix;\n        var content = \"\" + children;\n        var cellContent = content;\n        if (!detectTruncation && truncateLength > 0 && cellContent.length > truncateLength) {\n            cellContent = cellContent.substring(0, truncateLength) + truncationSuffix;\n        }\n        if (this.shouldShowPopover(content)) {\n            var className = classNames(this.props.className, Classes.TABLE_TRUNCATED_FORMAT);\n            return (React.createElement(\"div\", { className: className },\n                React.createElement(\"div\", { className: Classes.TABLE_TRUNCATED_VALUE, ref: this.handleContentDivRef }, cellContent),\n                this.renderPopover()));\n        }\n        else {\n            var className = classNames(this.props.className, Classes.TABLE_TRUNCATED_FORMAT_TEXT);\n            return (React.createElement(\"div\", { className: className, ref: this.handleContentDivRef }, cellContent));\n        }\n    };\n    TruncatedFormat.prototype.renderPopover = function () {\n        var _a = this.props, children = _a.children, preformatted = _a.preformatted;\n        // `<Popover>` will always check the content's position on update\n        // regardless if it is open or not. This negatively affects perf due to\n        // layout thrashing. So instead we manage the popover state ourselves\n        // and mimic its popover target\n        if (this.state.isPopoverOpen) {\n            var popoverClasses = classNames(Classes.TABLE_TRUNCATED_POPOVER, preformatted ? Classes.TABLE_POPOVER_WHITESPACE_PRE : Classes.TABLE_POPOVER_WHITESPACE_NORMAL);\n            var popoverContent = React.createElement(\"div\", { className: popoverClasses }, children);\n            return (\n            /* eslint-disable-next-line deprecation/deprecation */\n            React.createElement(Popover, { className: Classes.TABLE_TRUNCATED_POPOVER_TARGET, modifiers: { preventOverflow: { boundariesElement: \"window\" } }, content: popoverContent, position: Position.BOTTOM, isOpen: true, onClose: this.handlePopoverClose },\n                React.createElement(Icon, { icon: \"more\" })));\n        }\n        else {\n            // NOTE: This structure matches what `<Popover>` does internally. If\n            // `<Popover>` changes, this must be updated.\n            return (React.createElement(\"span\", { className: Classes.TABLE_TRUNCATED_POPOVER_TARGET, onClick: this.handlePopoverOpen },\n                React.createElement(Icon, { icon: \"more\" })));\n        }\n    };\n    TruncatedFormat.prototype.shouldShowPopover = function (content) {\n        var _a = this.props, detectTruncation = _a.detectTruncation, measureByApproxOptions = _a.measureByApproxOptions, showPopover = _a.showPopover, truncateLength = _a.truncateLength;\n        switch (showPopover) {\n            case TruncatedPopoverMode.ALWAYS:\n                return true;\n            case TruncatedPopoverMode.NEVER:\n                return false;\n            case TruncatedPopoverMode.WHEN_TRUNCATED:\n                return detectTruncation\n                    ? this.state.isTruncated\n                    : truncateLength > 0 && content.length > truncateLength;\n            case TruncatedPopoverMode.WHEN_TRUNCATED_APPROX:\n                if (!detectTruncation) {\n                    return truncateLength > 0 && content.length > truncateLength;\n                }\n                if (this.props.parentCellHeight == null || this.props.parentCellWidth == null) {\n                    return false;\n                }\n                var approximateCharWidth = measureByApproxOptions.approximateCharWidth, approximateLineHeight = measureByApproxOptions.approximateLineHeight, cellHorizontalPadding = measureByApproxOptions.cellHorizontalPadding, numBufferLines = measureByApproxOptions.numBufferLines;\n                var cellWidth = this.props.parentCellWidth;\n                var approxCellHeight = Utils.getApproxCellHeight(content, cellWidth, approximateCharWidth, approximateLineHeight, cellHorizontalPadding, numBufferLines);\n                var shouldTruncate = approxCellHeight > this.props.parentCellHeight;\n                return shouldTruncate;\n            default:\n                return false;\n        }\n    };\n    TruncatedFormat.prototype.setTruncationState = function () {\n        if (!this.props.detectTruncation || this.props.showPopover !== TruncatedPopoverMode.WHEN_TRUNCATED) {\n            return;\n        }\n        if (this.contentDiv === undefined) {\n            this.setState({ isTruncated: false });\n            return;\n        }\n        var isTruncated = this.state.isTruncated;\n        // take all measurements at once to avoid excessive DOM reflows.\n        var _a = this.contentDiv, containerHeight = _a.clientHeight, containerWidth = _a.clientWidth, actualContentHeight = _a.scrollHeight, contentWidth = _a.scrollWidth;\n        // if the content is truncated, then a popover handle will be present as a\n        // sibling of the content. we don't want to consider that handle when\n        // calculating the width of the actual content, so subtract it.\n        var actualContentWidth = isTruncated ? contentWidth - CONTENT_DIV_WIDTH_DELTA : contentWidth;\n        // we of course truncate the content if it doesn't fit in the container. but we\n        // also aggressively truncate if they're the same size with truncation enabled;\n        // this addresses browser-crashing stack-overflow bugs at various zoom levels.\n        // (see: https://github.com/palantir/blueprint/pull/1519)\n        var shouldTruncate = (isTruncated && actualContentWidth === containerWidth) ||\n            actualContentWidth > containerWidth ||\n            actualContentHeight > containerHeight;\n        this.setState({ isTruncated: shouldTruncate });\n    };\n    TruncatedFormat.displayName = DISPLAYNAME_PREFIX + \".TruncatedFormat\";\n    TruncatedFormat.defaultProps = {\n        detectTruncation: false,\n        measureByApproxOptions: {\n            approximateCharWidth: 8,\n            approximateLineHeight: 18,\n            cellHorizontalPadding: 2 * Locator.CELL_HORIZONTAL_PADDING,\n            numBufferLines: 0,\n        },\n        preformatted: false,\n        showPopover: TruncatedPopoverMode.WHEN_TRUNCATED,\n        truncateLength: 2000,\n        truncationSuffix: \"...\",\n    };\n    return TruncatedFormat;\n}(React.PureComponent));\nexport { TruncatedFormat };\n//# sourceMappingURL=truncatedFormat.js.map"]},"metadata":{},"sourceType":"module"}