{"ast":null,"code":"import { useState } from \"react\";\nimport { isFunction } from \"../../shared/utils\";\nimport { getYear, getMonth, getDay, getDateFromNumbers } from \"../utils\";\nexport const useCalendar = () => {\n  const date = new Date();\n  const [showingYear, setShowingYear] = useState(getYear(date));\n  const [showingMonth, setShowingMonth] = useState(getMonth(date));\n  const [selectedDay, setSelectedDay] = useState(getDay(date));\n  const [selectedMonth, setSelectedMonth] = useState(getMonth(date));\n  const [selectedYear, setSelectedYear] = useState(getYear(date));\n\n  const setSelectedDate = ({\n    date,\n    onChange\n  }) => {\n    if (date.month > 12) {\n      setNextSelectedYear();\n      setNextShowingMonth();\n    } else if (date.month < 1) {\n      setPreviousShowingMonth();\n      setPreviousSelectedYear();\n    } else {\n      setSelectedMonth(date.month);\n      setSelectedYear(date.year);\n      setSelectedDay(date.day);\n    }\n\n    isFunction(onChange) && onChange(getDateFromNumbers(date.year, date.month, date.day));\n  };\n\n  const setNextSelectedYear = () => {\n    setSelectedYear(year => year + 1);\n    setSelectedMonth(1);\n  };\n\n  const setPreviousSelectedYear = () => {\n    setSelectedYear(year => year - 1);\n    setShowingMonth(12);\n  };\n\n  const setNextShowingYear = () => {\n    setShowingYear(year => year + 1);\n    setShowingMonth(1);\n  };\n\n  const setPreviousShowingYear = () => {\n    setShowingYear(year => year - 1);\n    setShowingMonth(12);\n  };\n\n  const setNextShowingMonth = () => {\n    const nextMonth = showingMonth + 1;\n    if (nextMonth <= 12) setShowingMonth(nextMonth);\n    if (nextMonth > 12) setNextShowingYear();\n  };\n\n  const setPreviousShowingMonth = () => {\n    const previousMonth = showingMonth - 1;\n    if (previousMonth >= 1) setShowingMonth(previousMonth);\n    if (previousMonth < 1) setPreviousShowingYear();\n  };\n\n  const handleAction = action => {\n    switch (action.action) {\n      case \"setSelectedDate\":\n        return setSelectedDate(action.payload);\n\n      case \"setShowingYear\":\n        return setShowingYear(action.payload);\n\n      case \"setShowingMonth\":\n        return setShowingMonth(action.payload);\n\n      case \"setNextShowingMonth\":\n        return setNextShowingMonth();\n\n      case \"setPreviousShowingMonth\":\n        return setPreviousShowingMonth();\n    }\n  };\n\n  return {\n    handleAction,\n    showingYear,\n    showingMonth,\n    selectedDay,\n    selectedMonth,\n    selectedYear,\n    selectedDate: getDateFromNumbers(selectedYear, selectedMonth - 1, selectedDay)\n  };\n};","map":{"version":3,"sources":["E:/React Projects/deski-design/node_modules/small-google-calendar/dist/src/components/Calendar/hooks/useCalendar.js"],"names":["useState","isFunction","getYear","getMonth","getDay","getDateFromNumbers","useCalendar","date","Date","showingYear","setShowingYear","showingMonth","setShowingMonth","selectedDay","setSelectedDay","selectedMonth","setSelectedMonth","selectedYear","setSelectedYear","setSelectedDate","onChange","month","setNextSelectedYear","setNextShowingMonth","setPreviousShowingMonth","setPreviousSelectedYear","year","day","setNextShowingYear","setPreviousShowingYear","nextMonth","previousMonth","handleAction","action","payload","selectedDate"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { isFunction } from \"../../shared/utils\";\nimport { getYear, getMonth, getDay, getDateFromNumbers } from \"../utils\";\nexport const useCalendar = () => {\n    const date = new Date();\n    const [showingYear, setShowingYear] = useState(getYear(date));\n    const [showingMonth, setShowingMonth] = useState(getMonth(date));\n    const [selectedDay, setSelectedDay] = useState(getDay(date));\n    const [selectedMonth, setSelectedMonth] = useState(getMonth(date));\n    const [selectedYear, setSelectedYear] = useState(getYear(date));\n    const setSelectedDate = ({ date, onChange }) => {\n        if (date.month > 12) {\n            setNextSelectedYear();\n            setNextShowingMonth();\n        }\n        else if (date.month < 1) {\n            setPreviousShowingMonth();\n            setPreviousSelectedYear();\n        }\n        else {\n            setSelectedMonth(date.month);\n            setSelectedYear(date.year);\n            setSelectedDay(date.day);\n        }\n        isFunction(onChange) && onChange(getDateFromNumbers(date.year, date.month, date.day));\n    };\n    const setNextSelectedYear = () => {\n        setSelectedYear(year => year + 1);\n        setSelectedMonth(1);\n    };\n    const setPreviousSelectedYear = () => {\n        setSelectedYear(year => year - 1);\n        setShowingMonth(12);\n    };\n    const setNextShowingYear = () => {\n        setShowingYear(year => year + 1);\n        setShowingMonth(1);\n    };\n    const setPreviousShowingYear = () => {\n        setShowingYear(year => year - 1);\n        setShowingMonth(12);\n    };\n    const setNextShowingMonth = () => {\n        const nextMonth = showingMonth + 1;\n        if (nextMonth <= 12)\n            setShowingMonth(nextMonth);\n        if (nextMonth > 12)\n            setNextShowingYear();\n    };\n    const setPreviousShowingMonth = () => {\n        const previousMonth = showingMonth - 1;\n        if (previousMonth >= 1)\n            setShowingMonth(previousMonth);\n        if (previousMonth < 1)\n            setPreviousShowingYear();\n    };\n    const handleAction = (action) => {\n        switch (action.action) {\n            case \"setSelectedDate\":\n                return setSelectedDate(action.payload);\n            case \"setShowingYear\":\n                return setShowingYear(action.payload);\n            case \"setShowingMonth\":\n                return setShowingMonth(action.payload);\n            case \"setNextShowingMonth\":\n                return setNextShowingMonth();\n            case \"setPreviousShowingMonth\":\n                return setPreviousShowingMonth();\n        }\n    };\n    return {\n        handleAction,\n        showingYear,\n        showingMonth,\n        selectedDay,\n        selectedMonth,\n        selectedYear,\n        selectedDate: getDateFromNumbers(selectedYear, selectedMonth - 1, selectedDay),\n    };\n};\n"]},"metadata":{},"sourceType":"module"}