{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends } from \"tslib\";\nimport * as React from \"react\";\nimport { Utils as CoreUtils } from \"@blueprintjs/core\";\nimport { Utils } from \"../common/utils\";\nimport { RegionCardinality, Regions } from \"../regions\";\nimport { Draggable } from \"./draggable\";\n\nvar DragReorderable = function (_super) {\n  __extends(DragReorderable, _super);\n\n  function DragReorderable() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.handleActivate = function (event) {\n      if (_this.shouldIgnoreMouseDown(event)) {\n        return false;\n      }\n\n      var region = _this.props.locateClick(event);\n\n      if (!Regions.isValid(region)) {\n        return false;\n      }\n\n      var cardinality = Regions.getRegionCardinality(region);\n      var isColumnHeader = cardinality === RegionCardinality.FULL_COLUMNS;\n      var isRowHeader = cardinality === RegionCardinality.FULL_ROWS;\n\n      if (!isColumnHeader && !isRowHeader) {\n        return false;\n      }\n\n      var selectedRegions = _this.props.selectedRegions;\n      var selectedRegionIndex = Regions.findContainingRegion(selectedRegions, region);\n\n      if (selectedRegionIndex >= 0) {\n        var selectedRegion = selectedRegions[selectedRegionIndex];\n\n        if (Regions.getRegionCardinality(selectedRegion) !== cardinality) {\n          // ignore FULL_TABLE selections\n          return false;\n        } // cache for easy access later in the lifecycle\n\n\n        var selectedInterval = isRowHeader ? selectedRegion.rows : selectedRegion.cols;\n        _this.selectedRegionStartIndex = selectedInterval[0]; // add 1 because the selected interval is inclusive, which simple subtraction doesn't\n        // account for (e.g. in a FULL_COLUMNS range from 3 to 6, 6 - 3 = 3, but the selection\n        // actually includes four columns: 3, 4, 5, and 6)\n\n        _this.selectedRegionLength = selectedInterval[1] - selectedInterval[0] + 1;\n      } else {\n        // select the new region to avoid complex and unintuitive UX w/r/t the existing selection\n        _this.maybeSelectRegion(region);\n\n        var regionRange = isRowHeader ? region.rows : region.cols;\n        _this.selectedRegionStartIndex = regionRange[0];\n        _this.selectedRegionLength = regionRange[1] - regionRange[0] + 1;\n      }\n\n      return true;\n    };\n\n    _this.handleDragMove = function (event, coords) {\n      var oldIndex = _this.selectedRegionStartIndex;\n\n      var guideIndex = _this.props.locateDrag(event, coords);\n\n      var length = _this.selectedRegionLength;\n      var reorderedIndex = Utils.guideIndexToReorderedIndex(oldIndex, guideIndex, length);\n\n      _this.props.onReordering(oldIndex, reorderedIndex, length);\n    };\n\n    _this.handleDragEnd = function (event, coords) {\n      var oldIndex = _this.selectedRegionStartIndex;\n\n      var guideIndex = _this.props.locateDrag(event, coords);\n\n      var length = _this.selectedRegionLength;\n      var reorderedIndex = Utils.guideIndexToReorderedIndex(oldIndex, guideIndex, length);\n\n      _this.props.onReordered(oldIndex, reorderedIndex, length); // the newly reordered region becomes the only selection\n\n\n      var newRegion = _this.props.toRegion(reorderedIndex, reorderedIndex + length - 1);\n\n      _this.maybeSelectRegion(newRegion); // resetting is not strictly required, but it's cleaner\n\n\n      _this.selectedRegionStartIndex = undefined;\n      _this.selectedRegionLength = undefined;\n    };\n\n    return _this;\n  }\n\n  DragReorderable.prototype.render = function () {\n    var draggableProps = this.getDraggableProps();\n    return React.createElement(Draggable, __assign({}, draggableProps, {\n      preventDefault: false\n    }), this.props.children);\n  };\n\n  DragReorderable.prototype.getDraggableProps = function () {\n    return this.props.onReordered == null ? {} : {\n      onActivate: this.handleActivate,\n      onDragEnd: this.handleDragEnd,\n      onDragMove: this.handleDragMove\n    };\n  };\n\n  DragReorderable.prototype.shouldIgnoreMouseDown = function (event) {\n    var disabled = this.props.disabled;\n    var isDisabled = CoreUtils.isFunction(disabled) ? disabled === null || disabled === void 0 ? void 0 : disabled(event) : disabled;\n    return !Utils.isLeftClick(event) || isDisabled;\n  };\n\n  DragReorderable.prototype.maybeSelectRegion = function (region) {\n    var nextSelectedRegions = [region];\n\n    if (!CoreUtils.deepCompareKeys(nextSelectedRegions, this.props.selectedRegions)) {\n      this.props.onSelection(nextSelectedRegions); // move the focused cell into the newly selected region\n\n      this.props.onFocusedCell(__assign(__assign({}, Regions.getFocusCellCoordinatesFromRegion(region)), {\n        focusSelectionIndex: 0\n      }));\n    }\n  };\n\n  DragReorderable.defaultProps = {\n    selectedRegions: []\n  };\n  return DragReorderable;\n}(React.PureComponent);\n\nexport { DragReorderable };","map":{"version":3,"sources":["../../../src/interactions/reorderable.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends } from \"tslib\";\nimport * as React from \"react\";\nimport { Utils as CoreUtils } from \"@blueprintjs/core\";\nimport { Utils } from \"../common/utils\";\nimport { RegionCardinality, Regions } from \"../regions\";\nimport { Draggable } from \"./draggable\";\nvar DragReorderable = /** @class */ (function (_super) {\n    __extends(DragReorderable, _super);\n    function DragReorderable() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.handleActivate = function (event) {\n            if (_this.shouldIgnoreMouseDown(event)) {\n                return false;\n            }\n            var region = _this.props.locateClick(event);\n            if (!Regions.isValid(region)) {\n                return false;\n            }\n            var cardinality = Regions.getRegionCardinality(region);\n            var isColumnHeader = cardinality === RegionCardinality.FULL_COLUMNS;\n            var isRowHeader = cardinality === RegionCardinality.FULL_ROWS;\n            if (!isColumnHeader && !isRowHeader) {\n                return false;\n            }\n            var selectedRegions = _this.props.selectedRegions;\n            var selectedRegionIndex = Regions.findContainingRegion(selectedRegions, region);\n            if (selectedRegionIndex >= 0) {\n                var selectedRegion = selectedRegions[selectedRegionIndex];\n                if (Regions.getRegionCardinality(selectedRegion) !== cardinality) {\n                    // ignore FULL_TABLE selections\n                    return false;\n                }\n                // cache for easy access later in the lifecycle\n                var selectedInterval = isRowHeader ? selectedRegion.rows : selectedRegion.cols;\n                _this.selectedRegionStartIndex = selectedInterval[0];\n                // add 1 because the selected interval is inclusive, which simple subtraction doesn't\n                // account for (e.g. in a FULL_COLUMNS range from 3 to 6, 6 - 3 = 3, but the selection\n                // actually includes four columns: 3, 4, 5, and 6)\n                _this.selectedRegionLength = selectedInterval[1] - selectedInterval[0] + 1;\n            }\n            else {\n                // select the new region to avoid complex and unintuitive UX w/r/t the existing selection\n                _this.maybeSelectRegion(region);\n                var regionRange = isRowHeader ? region.rows : region.cols;\n                _this.selectedRegionStartIndex = regionRange[0];\n                _this.selectedRegionLength = regionRange[1] - regionRange[0] + 1;\n            }\n            return true;\n        };\n        _this.handleDragMove = function (event, coords) {\n            var oldIndex = _this.selectedRegionStartIndex;\n            var guideIndex = _this.props.locateDrag(event, coords);\n            var length = _this.selectedRegionLength;\n            var reorderedIndex = Utils.guideIndexToReorderedIndex(oldIndex, guideIndex, length);\n            _this.props.onReordering(oldIndex, reorderedIndex, length);\n        };\n        _this.handleDragEnd = function (event, coords) {\n            var oldIndex = _this.selectedRegionStartIndex;\n            var guideIndex = _this.props.locateDrag(event, coords);\n            var length = _this.selectedRegionLength;\n            var reorderedIndex = Utils.guideIndexToReorderedIndex(oldIndex, guideIndex, length);\n            _this.props.onReordered(oldIndex, reorderedIndex, length);\n            // the newly reordered region becomes the only selection\n            var newRegion = _this.props.toRegion(reorderedIndex, reorderedIndex + length - 1);\n            _this.maybeSelectRegion(newRegion);\n            // resetting is not strictly required, but it's cleaner\n            _this.selectedRegionStartIndex = undefined;\n            _this.selectedRegionLength = undefined;\n        };\n        return _this;\n    }\n    DragReorderable.prototype.render = function () {\n        var draggableProps = this.getDraggableProps();\n        return (React.createElement(Draggable, __assign({}, draggableProps, { preventDefault: false }), this.props.children));\n    };\n    DragReorderable.prototype.getDraggableProps = function () {\n        return this.props.onReordered == null\n            ? {}\n            : {\n                onActivate: this.handleActivate,\n                onDragEnd: this.handleDragEnd,\n                onDragMove: this.handleDragMove,\n            };\n    };\n    DragReorderable.prototype.shouldIgnoreMouseDown = function (event) {\n        var disabled = this.props.disabled;\n        var isDisabled = CoreUtils.isFunction(disabled) ? disabled === null || disabled === void 0 ? void 0 : disabled(event) : disabled;\n        return !Utils.isLeftClick(event) || isDisabled;\n    };\n    DragReorderable.prototype.maybeSelectRegion = function (region) {\n        var nextSelectedRegions = [region];\n        if (!CoreUtils.deepCompareKeys(nextSelectedRegions, this.props.selectedRegions)) {\n            this.props.onSelection(nextSelectedRegions);\n            // move the focused cell into the newly selected region\n            this.props.onFocusedCell(__assign(__assign({}, Regions.getFocusCellCoordinatesFromRegion(region)), { focusSelectionIndex: 0 }));\n        }\n    };\n    DragReorderable.defaultProps = {\n        selectedRegions: [],\n    };\n    return DragReorderable;\n}(React.PureComponent));\nexport { DragReorderable };\n//# sourceMappingURL=reorderable.js.map"]},"metadata":{},"sourceType":"module"}