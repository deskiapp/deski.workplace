{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* istanbul ignore next */\nexport var Clipboard = {\n  /**\n   * Overrides the inherited CSS of the element to make sure it is\n   * selectable. This method also makes the element pseudo-invisible.\n   */\n  applySelectableStyles: function (elem) {\n    elem.style.overflow = \"hidden\";\n    elem.style.height = \"0px\";\n    elem.style.setProperty(\"-webkit-user-select\", \"all\");\n    elem.style.setProperty(\"-moz-user-select\", \"all\");\n    elem.style.setProperty(\"-ms-user-select\", \"all\");\n    elem.style.setProperty(\"user-select\", \"all\");\n    return elem;\n  },\n\n  /**\n   * Copies table cells to the clipboard. The parameter is a row-major\n   * 2-dimensional `Array` of strings and can contain nulls. We assume all\n   * rows are the same length. If not, the cells will still be copied, but\n   * the columns may not align. Returns a boolean indicating whether the\n   * copy succeeded.\n   *\n   * See `Clipboard.copy`\n   */\n  copyCells: function (cells) {\n    var table = document.createElement(\"table\");\n    Clipboard.applySelectableStyles(table);\n\n    for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {\n      var row = cells_1[_i];\n      var tr = table.appendChild(document.createElement(\"tr\"));\n\n      for (var _a = 0, row_1 = row; _a < row_1.length; _a++) {\n        var cell = row_1[_a];\n        var td = tr.appendChild(document.createElement(\"td\"));\n        td.textContent = cell;\n      }\n    }\n\n    var tsv = cells.map(function (row) {\n      return row.join(\"\\t\");\n    }).join(\"\\n\");\n    return Clipboard.copyElement(table, tsv);\n  },\n\n  /**\n   * Copies the text to the clipboard. Returns a boolean\n   * indicating whether the copy succeeded.\n   *\n   * See `Clipboard.copy`\n   */\n  copyString: function (value) {\n    var text = document.createElement(\"textarea\");\n    Clipboard.applySelectableStyles(text);\n    text.value = value;\n    return Clipboard.copyElement(text, value);\n  },\n\n  /**\n   * Copies the element and its children to the clipboard. Returns a boolean\n   * indicating whether the copy succeeded.\n   *\n   * If a plaintext argument is supplied, we add both the text/html and\n   * text/plain mime types to the clipboard. This preserves the built in\n   * semantics of copying elements to the clipboard while allowing custom\n   * plaintext output for programs that can't cope with HTML data in the\n   * clipboard.\n   *\n   * Verified on Firefox 47, Chrome 51.\n   *\n   * Note: Sometimes the copy does not succeed. Presumably, in order to\n   * prevent memory issues, browsers will limit the total amount of data you\n   * can copy to the clipboard. Based on ad hoc testing, we found an\n   * inconsistent limit at about 300KB or 40,000 cells. Depending on the on\n   * the content of cells, your limits may vary.\n   */\n  copyElement: function (elem, plaintext) {\n    if (!Clipboard.isCopySupported()) {\n      return false;\n    } // must be document.body instead of document.documentElement for firefox\n\n\n    document.body.appendChild(elem);\n\n    try {\n      window.getSelection().selectAllChildren(elem);\n\n      if (plaintext != null) {\n        // add plaintext fallback\n        // http://stackoverflow.com/questions/23211018/copy-to-clipboard-with-jquery-js-in-chrome\n        elem.addEventListener(\"copy\", function (e) {\n          e.preventDefault();\n          var clipboardData = e.clipboardData || window.clipboardData;\n\n          if (clipboardData != null) {\n            clipboardData.setData(\"text\", plaintext);\n          }\n        });\n      }\n\n      return document.execCommand(\"copy\");\n    } catch (err) {\n      return false;\n    } finally {\n      document.body.removeChild(elem);\n    }\n  },\n\n  /**\n   * Returns a boolean indicating whether the current browser nominally\n   * supports the `copy` operation using the `execCommand` API.\n   */\n  isCopySupported: function () {\n    return document.queryCommandSupported != null && document.queryCommandSupported(\"copy\");\n  }\n};","map":{"version":3,"sources":["../../../src/common/clipboard.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* istanbul ignore next */\nexport var Clipboard = {\n    /**\n     * Overrides the inherited CSS of the element to make sure it is\n     * selectable. This method also makes the element pseudo-invisible.\n     */\n    applySelectableStyles: function (elem) {\n        elem.style.overflow = \"hidden\";\n        elem.style.height = \"0px\";\n        elem.style.setProperty(\"-webkit-user-select\", \"all\");\n        elem.style.setProperty(\"-moz-user-select\", \"all\");\n        elem.style.setProperty(\"-ms-user-select\", \"all\");\n        elem.style.setProperty(\"user-select\", \"all\");\n        return elem;\n    },\n    /**\n     * Copies table cells to the clipboard. The parameter is a row-major\n     * 2-dimensional `Array` of strings and can contain nulls. We assume all\n     * rows are the same length. If not, the cells will still be copied, but\n     * the columns may not align. Returns a boolean indicating whether the\n     * copy succeeded.\n     *\n     * See `Clipboard.copy`\n     */\n    copyCells: function (cells) {\n        var table = document.createElement(\"table\");\n        Clipboard.applySelectableStyles(table);\n        for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {\n            var row = cells_1[_i];\n            var tr = table.appendChild(document.createElement(\"tr\"));\n            for (var _a = 0, row_1 = row; _a < row_1.length; _a++) {\n                var cell = row_1[_a];\n                var td = tr.appendChild(document.createElement(\"td\"));\n                td.textContent = cell;\n            }\n        }\n        var tsv = cells.map(function (row) { return row.join(\"\\t\"); }).join(\"\\n\");\n        return Clipboard.copyElement(table, tsv);\n    },\n    /**\n     * Copies the text to the clipboard. Returns a boolean\n     * indicating whether the copy succeeded.\n     *\n     * See `Clipboard.copy`\n     */\n    copyString: function (value) {\n        var text = document.createElement(\"textarea\");\n        Clipboard.applySelectableStyles(text);\n        text.value = value;\n        return Clipboard.copyElement(text, value);\n    },\n    /**\n     * Copies the element and its children to the clipboard. Returns a boolean\n     * indicating whether the copy succeeded.\n     *\n     * If a plaintext argument is supplied, we add both the text/html and\n     * text/plain mime types to the clipboard. This preserves the built in\n     * semantics of copying elements to the clipboard while allowing custom\n     * plaintext output for programs that can't cope with HTML data in the\n     * clipboard.\n     *\n     * Verified on Firefox 47, Chrome 51.\n     *\n     * Note: Sometimes the copy does not succeed. Presumably, in order to\n     * prevent memory issues, browsers will limit the total amount of data you\n     * can copy to the clipboard. Based on ad hoc testing, we found an\n     * inconsistent limit at about 300KB or 40,000 cells. Depending on the on\n     * the content of cells, your limits may vary.\n     */\n    copyElement: function (elem, plaintext) {\n        if (!Clipboard.isCopySupported()) {\n            return false;\n        }\n        // must be document.body instead of document.documentElement for firefox\n        document.body.appendChild(elem);\n        try {\n            window.getSelection().selectAllChildren(elem);\n            if (plaintext != null) {\n                // add plaintext fallback\n                // http://stackoverflow.com/questions/23211018/copy-to-clipboard-with-jquery-js-in-chrome\n                elem.addEventListener(\"copy\", function (e) {\n                    e.preventDefault();\n                    var clipboardData = e.clipboardData || window.clipboardData;\n                    if (clipboardData != null) {\n                        clipboardData.setData(\"text\", plaintext);\n                    }\n                });\n            }\n            return document.execCommand(\"copy\");\n        }\n        catch (err) {\n            return false;\n        }\n        finally {\n            document.body.removeChild(elem);\n        }\n    },\n    /**\n     * Returns a boolean indicating whether the current browser nominally\n     * supports the `copy` operation using the `execCommand` API.\n     */\n    isCopySupported: function () {\n        return document.queryCommandSupported != null && document.queryCommandSupported(\"copy\");\n    },\n};\n//# sourceMappingURL=clipboard.js.map"]},"metadata":{},"sourceType":"module"}