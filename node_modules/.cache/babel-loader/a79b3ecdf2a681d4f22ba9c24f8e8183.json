{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Utils } from \"./common/utils\";\nimport { Locator } from \"./locator\"; // these default values for `resizeRowsByApproximateHeight` have been\n// fine-tuned to work well with default Table font styles.\n\nvar resizeRowsByApproximateHeightDefaults = {\n  getApproximateCharWidth: 8,\n  getApproximateLineHeight: 18,\n  getCellHorizontalPadding: 2 * Locator.CELL_HORIZONTAL_PADDING,\n  getNumBufferLines: 1\n};\n/**\n * Returns an object with option keys mapped to their resolved values\n * (falling back to default values as necessary).\n */\n\nfunction resolveResizeRowsByApproximateHeightOptions(options, rowIndex, columnIndex) {\n  var optionKeys = Object.keys(resizeRowsByApproximateHeightDefaults);\n\n  var optionReducer = function (agg, key) {\n    var valueOrMapper = options === null || options === void 0 ? void 0 : options[key];\n\n    if (typeof valueOrMapper === \"function\") {\n      agg[key] = valueOrMapper(rowIndex, columnIndex);\n    } else if (valueOrMapper != null) {\n      agg[key] = valueOrMapper;\n    } else {\n      agg[key] = resizeRowsByApproximateHeightDefaults[key];\n    }\n\n    return agg;\n  };\n\n  var resolvedOptions = optionKeys.reduce(optionReducer, {});\n  return resolvedOptions;\n}\n/**\n * Resizes all rows in the table to the approximate\n * maximum height of wrapped cell content in each row. Works best when each\n * cell contains plain text of a consistent font style (though font style\n * may vary between cells). Since this function uses approximate\n * measurements, results may not be perfect.\n */\n\n\nexport function resizeRowsByApproximateHeight(numRows, columnWidths, getCellText, options) {\n  var numColumns = columnWidths.length;\n  var rowHeights = [];\n\n  for (var rowIndex = 0; rowIndex < numRows; rowIndex++) {\n    var maxCellHeightInRow = 0; // iterate through each cell in the row\n\n    for (var columnIndex = 0; columnIndex < numColumns; columnIndex++) {\n      // resolve all parameters to raw values\n      var _a = resolveResizeRowsByApproximateHeightOptions(options, rowIndex, columnIndex),\n          approxCharWidth = _a.getApproximateCharWidth,\n          approxLineHeight = _a.getApproximateLineHeight,\n          horizontalPadding = _a.getCellHorizontalPadding,\n          numBufferLines = _a.getNumBufferLines;\n\n      var cellText = getCellText(rowIndex, columnIndex);\n      var approxCellHeight = Utils.getApproxCellHeight(cellText, columnWidths[columnIndex], approxCharWidth, approxLineHeight, horizontalPadding, numBufferLines);\n\n      if (approxCellHeight > maxCellHeightInRow) {\n        maxCellHeightInRow = approxCellHeight;\n      }\n    }\n\n    rowHeights.push(maxCellHeightInRow);\n  }\n\n  return rowHeights;\n}\n/**\n * Resize all rows in the table to the height of the tallest visible cell in the specified columns.\n * If no indices are provided, default to using the tallest visible cell from all columns in view.\n */\n\nexport function resizeRowsByTallestCell(grid, viewportRect, locator, numRows, columnIndices) {\n  var tallest = 0;\n\n  if (columnIndices == null) {\n    // Consider all columns currently in viewport\n    var viewportColumnIndices = grid.getColumnIndicesInRect(viewportRect);\n\n    for (var col = viewportColumnIndices.columnIndexStart; col <= viewportColumnIndices.columnIndexEnd; col++) {\n      tallest = Math.max(tallest, locator.getTallestVisibleCellInColumn(col));\n    }\n  } else {\n    var columnIndicesArray = Array.isArray(columnIndices) ? columnIndices : [columnIndices];\n    var tallestByColumns = columnIndicesArray.map(function (col) {\n      return locator.getTallestVisibleCellInColumn(col);\n    });\n    tallest = Math.max.apply(Math, tallestByColumns);\n  }\n\n  return Array(numRows).fill(tallest);\n}","map":{"version":3,"sources":["../../src/resizeRows.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Utils } from \"./common/utils\";\nimport { Locator } from \"./locator\";\n// these default values for `resizeRowsByApproximateHeight` have been\n// fine-tuned to work well with default Table font styles.\nvar resizeRowsByApproximateHeightDefaults = {\n    getApproximateCharWidth: 8,\n    getApproximateLineHeight: 18,\n    getCellHorizontalPadding: 2 * Locator.CELL_HORIZONTAL_PADDING,\n    getNumBufferLines: 1,\n};\n/**\n * Returns an object with option keys mapped to their resolved values\n * (falling back to default values as necessary).\n */\nfunction resolveResizeRowsByApproximateHeightOptions(options, rowIndex, columnIndex) {\n    var optionKeys = Object.keys(resizeRowsByApproximateHeightDefaults);\n    var optionReducer = function (agg, key) {\n        var valueOrMapper = options === null || options === void 0 ? void 0 : options[key];\n        if (typeof valueOrMapper === \"function\") {\n            agg[key] = valueOrMapper(rowIndex, columnIndex);\n        }\n        else if (valueOrMapper != null) {\n            agg[key] = valueOrMapper;\n        }\n        else {\n            agg[key] = resizeRowsByApproximateHeightDefaults[key];\n        }\n        return agg;\n    };\n    var resolvedOptions = optionKeys.reduce(optionReducer, {});\n    return resolvedOptions;\n}\n/**\n * Resizes all rows in the table to the approximate\n * maximum height of wrapped cell content in each row. Works best when each\n * cell contains plain text of a consistent font style (though font style\n * may vary between cells). Since this function uses approximate\n * measurements, results may not be perfect.\n */\nexport function resizeRowsByApproximateHeight(numRows, columnWidths, getCellText, options) {\n    var numColumns = columnWidths.length;\n    var rowHeights = [];\n    for (var rowIndex = 0; rowIndex < numRows; rowIndex++) {\n        var maxCellHeightInRow = 0;\n        // iterate through each cell in the row\n        for (var columnIndex = 0; columnIndex < numColumns; columnIndex++) {\n            // resolve all parameters to raw values\n            var _a = resolveResizeRowsByApproximateHeightOptions(options, rowIndex, columnIndex), approxCharWidth = _a.getApproximateCharWidth, approxLineHeight = _a.getApproximateLineHeight, horizontalPadding = _a.getCellHorizontalPadding, numBufferLines = _a.getNumBufferLines;\n            var cellText = getCellText(rowIndex, columnIndex);\n            var approxCellHeight = Utils.getApproxCellHeight(cellText, columnWidths[columnIndex], approxCharWidth, approxLineHeight, horizontalPadding, numBufferLines);\n            if (approxCellHeight > maxCellHeightInRow) {\n                maxCellHeightInRow = approxCellHeight;\n            }\n        }\n        rowHeights.push(maxCellHeightInRow);\n    }\n    return rowHeights;\n}\n/**\n * Resize all rows in the table to the height of the tallest visible cell in the specified columns.\n * If no indices are provided, default to using the tallest visible cell from all columns in view.\n */\nexport function resizeRowsByTallestCell(grid, viewportRect, locator, numRows, columnIndices) {\n    var tallest = 0;\n    if (columnIndices == null) {\n        // Consider all columns currently in viewport\n        var viewportColumnIndices = grid.getColumnIndicesInRect(viewportRect);\n        for (var col = viewportColumnIndices.columnIndexStart; col <= viewportColumnIndices.columnIndexEnd; col++) {\n            tallest = Math.max(tallest, locator.getTallestVisibleCellInColumn(col));\n        }\n    }\n    else {\n        var columnIndicesArray = Array.isArray(columnIndices) ? columnIndices : [columnIndices];\n        var tallestByColumns = columnIndicesArray.map(function (col) { return locator.getTallestVisibleCellInColumn(col); });\n        tallest = Math.max.apply(Math, tallestByColumns);\n    }\n    return Array(numRows).fill(tallest);\n}\n//# sourceMappingURL=resizeRows.js.map"]},"metadata":{},"sourceType":"module"}