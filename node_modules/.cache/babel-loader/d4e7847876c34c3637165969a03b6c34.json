{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __decorate, __extends } from \"tslib\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { AbstractComponent2, setRef, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport * as Classes from \"../common/classes\";\nimport * as ScrollUtils from \"../common/internal/scrollUtils\";\nimport { Utils } from \"../common/utils\";\nimport { QuadrantType, TableQuadrant } from \"./tableQuadrant\";\nimport { TableQuadrantStackCache } from \"./tableQuadrantStackCache\"; // when there are no column headers, the header and menu element will\n// confusingly collapse to zero height unless we establish this default.\n\nvar DEFAULT_COLUMN_HEADER_HEIGHT = 30; // the debounce delay for updating the view on scroll. elements will be resized\n// and rejiggered once scroll has ceased for at least this long, but not before.\n\nvar DEFAULT_VIEW_SYNC_DELAY = 500; // if there are no frozen rows or columns, we still want the quadrant to be 1px\n// bigger to reveal the header border. this border leaks into the cell grid to\n// ensure that selection overlay borders (e.g.) will be perfectly flush with it.\n\nvar QUADRANT_MIN_SIZE = 1; // a list of props that trigger layout changes. when these props change,\n// quadrant views need to be explicitly resynchronized.\n\nvar SYNC_TRIGGER_PROP_KEYS = [\"enableRowHeader\", \"loadingOptions\", \"numFrozenColumns\", \"numFrozenRows\", \"numColumns\", \"numRows\", \"enableColumnInteractionBar\"];\n\nvar TableQuadrantStack = function (_super) {\n  __extends(TableQuadrantStack, _super); // Public\n  // ======\n\n\n  function TableQuadrantStack(props, context) {\n    var _a, _b;\n\n    var _this = _super.call(this, props, context) || this; // Instance variables\n    // ==================\n\n\n    _this.quadrantRefs = (_a = {}, _a[QuadrantType.MAIN] = {}, _a[QuadrantType.TOP] = {}, _a[QuadrantType.LEFT] = {}, _a[QuadrantType.TOP_LEFT] = {}, _a);\n    _this.quadrantRefHandlers = (_b = {}, _b[QuadrantType.MAIN] = _this.generateQuadrantRefHandlers(QuadrantType.MAIN), _b[QuadrantType.TOP] = _this.generateQuadrantRefHandlers(QuadrantType.TOP), _b[QuadrantType.LEFT] = _this.generateQuadrantRefHandlers(QuadrantType.LEFT), _b[QuadrantType.TOP_LEFT] = _this.generateQuadrantRefHandlers(QuadrantType.TOP_LEFT), _b); // this flag helps us avoid redundant work in the MAIN quadrant's onScroll callback, if the\n    // callback was triggered from a manual scrollTop/scrollLeft update within an onWheel.\n\n    _this.wasMainQuadrantScrollTriggeredByWheelEvent = false; // Quadrant-specific renderers\n    // ===========================\n    // Menu\n\n    _this.renderMainQuadrantMenu = function () {\n      var _a, _b;\n\n      return (_b = (_a = _this.props).menuRenderer) === null || _b === void 0 ? void 0 : _b.call(_a, _this.quadrantRefHandlers[QuadrantType.MAIN].menu);\n    };\n\n    _this.renderTopQuadrantMenu = function () {\n      var _a, _b;\n\n      return (_b = (_a = _this.props).menuRenderer) === null || _b === void 0 ? void 0 : _b.call(_a, _this.quadrantRefHandlers[QuadrantType.TOP].menu);\n    };\n\n    _this.renderLeftQuadrantMenu = function () {\n      var _a, _b;\n\n      return (_b = (_a = _this.props).menuRenderer) === null || _b === void 0 ? void 0 : _b.call(_a, _this.quadrantRefHandlers[QuadrantType.LEFT].menu);\n    };\n\n    _this.renderTopLeftQuadrantMenu = function () {\n      var _a, _b;\n\n      return (_b = (_a = _this.props).menuRenderer) === null || _b === void 0 ? void 0 : _b.call(_a, _this.quadrantRefHandlers[QuadrantType.TOP_LEFT].menu);\n    }; // Column header\n\n\n    _this.renderMainQuadrantColumnHeader = function (showFrozenColumnsOnly) {\n      var _a, _b;\n\n      var refHandler = _this.quadrantRefHandlers[QuadrantType.MAIN].columnHeader;\n      var resizeHandler = _this.handleColumnResizeGuideMain;\n      var reorderingHandler = _this.handleColumnsReordering;\n      return (_b = (_a = _this.props).columnHeaderCellRenderer) === null || _b === void 0 ? void 0 : _b.call(_a, refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly);\n    };\n\n    _this.renderTopQuadrantColumnHeader = function (showFrozenColumnsOnly) {\n      var _a, _b;\n\n      var refHandler = _this.quadrantRefHandlers[QuadrantType.TOP].columnHeader;\n      var resizeHandler = _this.handleColumnResizeGuideTop;\n      var reorderingHandler = _this.handleColumnsReordering;\n      return (_b = (_a = _this.props).columnHeaderCellRenderer) === null || _b === void 0 ? void 0 : _b.call(_a, refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly);\n    };\n\n    _this.renderLeftQuadrantColumnHeader = function (showFrozenColumnsOnly) {\n      var _a, _b;\n\n      var refHandler = _this.quadrantRefHandlers[QuadrantType.LEFT].columnHeader;\n      var resizeHandler = _this.handleColumnResizeGuideLeft;\n      var reorderingHandler = _this.handleColumnsReordering;\n      return (_b = (_a = _this.props).columnHeaderCellRenderer) === null || _b === void 0 ? void 0 : _b.call(_a, refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly);\n    };\n\n    _this.renderTopLeftQuadrantColumnHeader = function (showFrozenColumnsOnly) {\n      var _a, _b;\n\n      var refHandler = _this.quadrantRefHandlers[QuadrantType.TOP_LEFT].columnHeader;\n      var resizeHandler = _this.handleColumnResizeGuideTopLeft;\n      var reorderingHandler = _this.handleColumnsReordering;\n      return (_b = (_a = _this.props).columnHeaderCellRenderer) === null || _b === void 0 ? void 0 : _b.call(_a, refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly);\n    }; // Row header\n\n\n    _this.renderMainQuadrantRowHeader = function (showFrozenRowsOnly) {\n      var _a, _b;\n\n      var refHandler = _this.quadrantRefHandlers[QuadrantType.MAIN].rowHeader;\n      var resizeHandler = _this.handleRowResizeGuideMain;\n      var reorderingHandler = _this.handleRowsReordering;\n      return (_b = (_a = _this.props).rowHeaderCellRenderer) === null || _b === void 0 ? void 0 : _b.call(_a, refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly);\n    };\n\n    _this.renderTopQuadrantRowHeader = function (showFrozenRowsOnly) {\n      var _a, _b;\n\n      var refHandler = _this.quadrantRefHandlers[QuadrantType.TOP].rowHeader;\n      var resizeHandler = _this.handleRowResizeGuideTop;\n      var reorderingHandler = _this.handleRowsReordering;\n      return (_b = (_a = _this.props).rowHeaderCellRenderer) === null || _b === void 0 ? void 0 : _b.call(_a, refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly);\n    };\n\n    _this.renderLeftQuadrantRowHeader = function (showFrozenRowsOnly) {\n      var _a, _b;\n\n      var refHandler = _this.quadrantRefHandlers[QuadrantType.LEFT].rowHeader;\n      var resizeHandler = _this.handleRowResizeGuideLeft;\n      var reorderingHandler = _this.handleRowsReordering;\n      return (_b = (_a = _this.props).rowHeaderCellRenderer) === null || _b === void 0 ? void 0 : _b.call(_a, refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly);\n    };\n\n    _this.renderTopLeftQuadrantRowHeader = function (showFrozenRowsOnly) {\n      var _a, _b;\n\n      var refHandler = _this.quadrantRefHandlers[QuadrantType.TOP_LEFT].rowHeader;\n      var resizeHandler = _this.handleRowResizeGuideTopLeft;\n      var reorderingHandler = _this.handleRowsReordering;\n      return (_b = (_a = _this.props).rowHeaderCellRenderer) === null || _b === void 0 ? void 0 : _b.call(_a, refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly);\n    }; // Event handlers\n    // ==============\n    // Scrolling\n    // ---------\n\n\n    _this.handleMainQuadrantScroll = function (event) {\n      var _a, _b;\n\n      if (_this.wasMainQuadrantScrollTriggeredByWheelEvent) {\n        _this.wasMainQuadrantScrollTriggeredByWheelEvent = false;\n        return;\n      } // invoke onScroll - which may read current scroll position - before\n      // forcing a reflow with upcoming .scroll{Top,Left} setters.\n\n\n      (_b = (_a = _this.props).onScroll) === null || _b === void 0 ? void 0 : _b.call(_a, event); // batch DOM reads here. note that onScroll events don't include deltas\n      // like onWheel events do, so we have to read from the DOM directly.\n\n      var mainScrollContainer = _this.quadrantRefs[QuadrantType.MAIN].scrollContainer;\n      var nextScrollLeft = mainScrollContainer.scrollLeft;\n      var nextScrollTop = mainScrollContainer.scrollTop; // with the \"scroll\" event, scroll offsets are updated prior to the\n      // event's firing, so no explicit update needed.\n\n      _this.handleScrollOffsetChange(\"scrollLeft\", nextScrollLeft);\n\n      _this.handleScrollOffsetChange(\"scrollTop\", nextScrollTop); // sync less important view stuff when scrolling/wheeling stops.\n\n\n      _this.syncQuadrantViewsDebounced();\n    };\n\n    _this.handleWheel = function (event) {\n      var _a, _b; // again, let the listener read the current scroll position before we\n      // force a reflow by resizing or repositioning stuff.\n\n\n      (_b = (_a = _this.props).onScroll) === null || _b === void 0 ? void 0 : _b.call(_a, event); // this helper performs DOM reads, so do them together before the writes below.\n\n      var nextScrollLeft = _this.getNextScrollOffset(\"horizontal\", event.deltaX);\n\n      var nextScrollTop = _this.getNextScrollOffset(\"vertical\", event.deltaY); // update this flag before updating the main quadrant scroll offsets,\n      // since we need this set before onScroll fires.\n\n\n      if (nextScrollLeft != null || nextScrollTop != null) {\n        _this.wasMainQuadrantScrollTriggeredByWheelEvent = true;\n      } // manually update the affected quadrant's scroll position to make sure\n      // it stays perfectly in sync with dependent quadrants in each frame.\n      // note: these DOM writes are batched together after the reads above.\n\n\n      _this.quadrantRefs[QuadrantType.MAIN].scrollContainer.scrollLeft = nextScrollLeft;\n      _this.quadrantRefs[QuadrantType.MAIN].scrollContainer.scrollTop = nextScrollTop;\n\n      _this.handleScrollOffsetChange(\"scrollLeft\", nextScrollLeft);\n\n      _this.handleScrollOffsetChange(\"scrollTop\", nextScrollTop); // sync less important view stuff when scrolling/wheeling stops.\n\n\n      _this.syncQuadrantViewsDebounced();\n    };\n\n    _this.getNextScrollOffset = function (direction, delta) {\n      var _a = _this.props,\n          grid = _a.grid,\n          isHorizontalScrollDisabled = _a.isHorizontalScrollDisabled,\n          isVerticalScrollDisabled = _a.isVerticalScrollDisabled;\n      var isHorizontal = direction === \"horizontal\";\n      var scrollKey = isHorizontal ? \"scrollLeft\" : \"scrollTop\";\n      var isScrollDisabled = isHorizontal ? isHorizontalScrollDisabled : isVerticalScrollDisabled;\n\n      if (isScrollDisabled) {\n        return undefined;\n      } // measure client size on the first event of the current wheel gesture,\n      // then grab cached values on successive events to eliminate DOM reads.\n      // requires clearing the cached values in the debounced view-update at\n      // the end of the wheel event.\n      // ASSUMPTION: the client size won't change during the wheel event.\n\n\n      var clientSize = isHorizontal ? _this.cache.getScrollContainerClientWidth() : _this.cache.getScrollContainerClientHeight();\n\n      if (clientSize == null) {\n        // should trigger only on the first scroll of the wheel gesture.\n        // will save client width and height sizes in the cache.\n        clientSize = _this.updateScrollContainerClientSize(isHorizontal);\n      } // by now, the client width and height will have been saved in cache, so\n      // they can't be nully anymore. also, events can only happen after\n      // mount, so we're guaranteed to have measured the header sizes in\n      // syncQuadrantViews() by now too, as it's invoked on mount.\n\n\n      var containerSize = isHorizontal ? _this.cache.getScrollContainerClientWidth() - _this.cache.getRowHeaderWidth() : _this.cache.getScrollContainerClientHeight() - _this.cache.getColumnHeaderHeight();\n      var gridSize = isHorizontal ? grid.getWidth() : grid.getHeight();\n      var maxScrollOffset = Math.max(0, gridSize - containerSize);\n\n      var currScrollOffset = _this.cache.getScrollOffset(scrollKey);\n\n      var nextScrollOffset = CoreUtils.clamp(currScrollOffset + delta, 0, maxScrollOffset);\n      return nextScrollOffset;\n    }; // Resizing\n    // --------\n    // Columns\n\n\n    _this.handleColumnResizeGuideMain = function (verticalGuides) {\n      _this.invokeColumnResizeHandler(verticalGuides, QuadrantType.MAIN);\n    };\n\n    _this.handleColumnResizeGuideTop = function (verticalGuides) {\n      _this.invokeColumnResizeHandler(verticalGuides, QuadrantType.TOP);\n    };\n\n    _this.handleColumnResizeGuideLeft = function (verticalGuides) {\n      _this.invokeColumnResizeHandler(verticalGuides, QuadrantType.LEFT);\n    };\n\n    _this.handleColumnResizeGuideTopLeft = function (verticalGuides) {\n      _this.invokeColumnResizeHandler(verticalGuides, QuadrantType.TOP_LEFT);\n    };\n\n    _this.invokeColumnResizeHandler = function (verticalGuides, quadrantType) {\n      var _a, _b;\n\n      var adjustedGuides = _this.adjustVerticalGuides(verticalGuides, quadrantType);\n\n      (_b = (_a = _this.props).handleColumnResizeGuide) === null || _b === void 0 ? void 0 : _b.call(_a, adjustedGuides);\n    }; // Rows\n\n\n    _this.handleRowResizeGuideMain = function (horizontalGuides) {\n      _this.invokeRowResizeHandler(horizontalGuides, QuadrantType.MAIN);\n    };\n\n    _this.handleRowResizeGuideTop = function (horizontalGuides) {\n      _this.invokeRowResizeHandler(horizontalGuides, QuadrantType.TOP);\n    };\n\n    _this.handleRowResizeGuideLeft = function (horizontalGuides) {\n      _this.invokeRowResizeHandler(horizontalGuides, QuadrantType.LEFT);\n    };\n\n    _this.handleRowResizeGuideTopLeft = function (horizontalGuides) {\n      _this.invokeRowResizeHandler(horizontalGuides, QuadrantType.TOP_LEFT);\n    };\n\n    _this.invokeRowResizeHandler = function (horizontalGuides, quadrantType) {\n      var _a, _b;\n\n      var adjustedGuides = _this.adjustHorizontalGuides(horizontalGuides, quadrantType);\n\n      (_b = (_a = _this.props).handleRowResizeGuide) === null || _b === void 0 ? void 0 : _b.call(_a, adjustedGuides);\n    }; // Reordering\n    // ----------\n    // Columns\n\n\n    _this.handleColumnsReordering = function (oldIndex, newIndex, length) {\n      var _a, _b;\n\n      var guideIndex = Utils.reorderedIndexToGuideIndex(oldIndex, newIndex, length);\n\n      var leftOffset = _this.props.grid.getCumulativeWidthBefore(guideIndex);\n\n      var quadrantType = guideIndex <= _this.props.numFrozenColumns ? QuadrantType.TOP_LEFT : QuadrantType.TOP;\n\n      var verticalGuides = _this.adjustVerticalGuides([leftOffset], quadrantType);\n\n      (_b = (_a = _this.props).handleColumnsReordering) === null || _b === void 0 ? void 0 : _b.call(_a, verticalGuides);\n    }; // Rows\n\n\n    _this.handleRowsReordering = function (oldIndex, newIndex, length) {\n      var _a, _b;\n\n      var guideIndex = Utils.reorderedIndexToGuideIndex(oldIndex, newIndex, length);\n\n      var topOffset = _this.props.grid.getCumulativeHeightBefore(guideIndex);\n\n      var quadrantType = guideIndex <= _this.props.numFrozenRows ? QuadrantType.TOP_LEFT : QuadrantType.LEFT;\n\n      var horizontalGuides = _this.adjustHorizontalGuides([topOffset], quadrantType);\n\n      (_b = (_a = _this.props).handleRowsReordering) === null || _b === void 0 ? void 0 : _b.call(_a, horizontalGuides);\n    }; // Size syncing\n    // ============\n\n\n    _this.syncQuadrantViewsDebounced = function () {\n      var viewSyncDelay = _this.props.viewSyncDelay;\n\n      if (viewSyncDelay < 0) {\n        // update synchronously\n        _this.syncQuadrantViews();\n      } else {\n        // update asynchronously after a debounced delay\n        clearInterval(_this.debouncedViewSyncInterval);\n        _this.debouncedViewSyncInterval = window.setTimeout(_this.syncQuadrantViews, viewSyncDelay);\n      }\n    };\n\n    _this.syncQuadrantViews = function () {\n      var mainRefs = _this.quadrantRefs[QuadrantType.MAIN];\n      var mainScrollContainer = mainRefs.scrollContainer; //\n      // Reads (batched to avoid DOM thrashing)\n      //\n\n      var rowHeaderWidth = _this.measureDesiredRowHeaderWidth();\n\n      var columnHeaderHeight = _this.measureDesiredColumnHeaderHeight();\n\n      var leftQuadrantGridWidth = _this.getSecondaryQuadrantGridSize(\"width\");\n\n      var topQuadrantGridHeight = _this.getSecondaryQuadrantGridSize(\"height\");\n\n      var leftQuadrantWidth = rowHeaderWidth + leftQuadrantGridWidth;\n      var topQuadrantHeight = columnHeaderHeight + topQuadrantGridHeight;\n      var rightScrollBarWidth = ScrollUtils.measureScrollBarThickness(mainScrollContainer, \"vertical\");\n      var bottomScrollBarHeight = ScrollUtils.measureScrollBarThickness(mainScrollContainer, \"horizontal\"); // ensure neither of these measurements confusingly clamps to zero height.\n\n      var adjustedColumnHeaderHeight = _this.maybeIncreaseToDefaultColumnHeaderHeight(columnHeaderHeight);\n\n      var adjustedTopQuadrantHeight = _this.maybeIncreaseToDefaultColumnHeaderHeight(topQuadrantHeight); // Update cache: let's read now whatever values we might need later.\n      // prevents unnecessary reflows in the future.\n\n\n      _this.cache.setRowHeaderWidth(rowHeaderWidth);\n\n      _this.cache.setColumnHeaderHeight(columnHeaderHeight); // ...however, we also clear the cached client size, so we can read it\n      // again when a new scroll begins. not safe to assume this won't change.\n      // TODO: maybe use the ResizeSensor?\n\n\n      _this.cache.setScrollContainerClientWidth(undefined);\n\n      _this.cache.setScrollContainerClientHeight(undefined); //\n      // Writes (batched to avoid DOM thrashing)\n      //\n      // Quadrant-size sync'ing: make the quadrants precisely as big as they\n      // need to be to fit their variable-sized headers and/or frozen areas.\n\n\n      _this.maybesSetQuadrantRowHeaderSizes(rowHeaderWidth);\n\n      _this.maybeSetQuadrantMenuElementSizes(rowHeaderWidth, adjustedColumnHeaderHeight);\n\n      _this.maybeSetQuadrantSizes(leftQuadrantWidth, adjustedTopQuadrantHeight); // Scrollbar clearance: tweak the quadrant bottom/right offsets to\n      // reveal the MAIN-quadrant scrollbars if they're visible.\n\n\n      _this.maybeSetQuadrantPositionOffset(QuadrantType.TOP, \"right\", rightScrollBarWidth);\n\n      _this.maybeSetQuadrantPositionOffset(QuadrantType.LEFT, \"bottom\", bottomScrollBarHeight); // Scroll syncing: sync the scroll offsets of quadrants that may or may\n      // not have been around prior to this update.\n\n\n      _this.maybeSetQuadrantScrollOffset(QuadrantType.LEFT, \"scrollTop\");\n\n      _this.maybeSetQuadrantScrollOffset(QuadrantType.TOP, \"scrollLeft\");\n    };\n\n    _this.maybeSetQuadrantSizes = function (width, height) {\n      _this.maybesSetQuadrantSize(QuadrantType.LEFT, \"width\", width);\n\n      _this.maybesSetQuadrantSize(QuadrantType.TOP, \"height\", height);\n\n      _this.maybesSetQuadrantSize(QuadrantType.TOP_LEFT, \"width\", width);\n\n      _this.maybesSetQuadrantSize(QuadrantType.TOP_LEFT, \"height\", height);\n    };\n\n    _this.maybesSetQuadrantSize = function (quadrantType, dimension, value) {\n      var quadrant = _this.quadrantRefs[quadrantType].quadrant;\n\n      if (quadrant != null) {\n        quadrant.style[dimension] = value + \"px\";\n      }\n    };\n\n    _this.maybeSetQuadrantPositionOffset = function (quadrantType, side, value) {\n      var quadrant = _this.quadrantRefs[quadrantType].quadrant;\n\n      if (quadrant != null) {\n        quadrant.style[side] = value + \"px\";\n      }\n    };\n\n    _this.maybesSetQuadrantRowHeaderSizes = function (width) {\n      _this.maybeSetQuadrantRowHeaderSize(QuadrantType.MAIN, width);\n\n      _this.maybeSetQuadrantRowHeaderSize(QuadrantType.TOP, width);\n\n      _this.maybeSetQuadrantRowHeaderSize(QuadrantType.LEFT, width);\n\n      _this.maybeSetQuadrantRowHeaderSize(QuadrantType.TOP_LEFT, width);\n    };\n\n    _this.maybeSetQuadrantRowHeaderSize = function (quadrantType, width) {\n      var rowHeader = _this.quadrantRefs[quadrantType].rowHeader;\n\n      if (rowHeader != null) {\n        rowHeader.style.width = width + \"px\";\n      }\n    };\n\n    _this.maybeSetQuadrantMenuElementSizes = function (width, height) {\n      _this.maybeSetQuadrantMenuElementSize(QuadrantType.MAIN, width, height);\n\n      _this.maybeSetQuadrantMenuElementSize(QuadrantType.TOP, width, height);\n\n      _this.maybeSetQuadrantMenuElementSize(QuadrantType.LEFT, width, height);\n\n      _this.maybeSetQuadrantMenuElementSize(QuadrantType.TOP_LEFT, width, height);\n    };\n\n    _this.maybeSetQuadrantMenuElementSize = function (quadrantType, width, height) {\n      var menu = _this.quadrantRefs[quadrantType].menu;\n\n      if (menu != null) {\n        menu.style.width = width + \"px\";\n        menu.style.height = height + \"px\";\n      }\n    };\n\n    _this.maybeSetQuadrantScrollOffset = function (quadrantType, scrollKey, newOffset) {\n      var scrollContainer = _this.quadrantRefs[quadrantType].scrollContainer;\n      var scrollOffset = newOffset != null ? newOffset : _this.cache.getScrollOffset(scrollKey);\n\n      if (scrollContainer != null) {\n        scrollContainer[scrollKey] = scrollOffset;\n      }\n    };\n\n    _this.handleScrollOffsetChange = function (scrollKey, offset) {\n      _this.cache.setScrollOffset(scrollKey, offset);\n\n      var dependentQuadrantType = scrollKey === \"scrollLeft\" ? QuadrantType.TOP : QuadrantType.LEFT;\n\n      _this.maybeSetQuadrantScrollOffset(dependentQuadrantType, scrollKey);\n    }; // callbacks trigger too frequently unless we throttle scroll and wheel\n    // events. declare these functions on the component instance since\n    // they're stateful.\n\n\n    _this.throttledHandleMainQuadrantScroll = CoreUtils.throttleReactEventCallback(_this.handleMainQuadrantScroll);\n    _this.throttledHandleWheel = CoreUtils.throttleReactEventCallback(_this.handleWheel);\n    _this.cache = new TableQuadrantStackCache();\n    return _this;\n  }\n  /**\n   * Scroll the main quadrant to the specified scroll offset, keeping all other quadrants in sync.\n   */\n\n\n  TableQuadrantStack.prototype.scrollToPosition = function (scrollLeft, scrollTop) {\n    var scrollContainer = this.quadrantRefs[QuadrantType.MAIN].scrollContainer;\n    this.wasMainQuadrantScrollTriggeredByWheelEvent = false; // this will trigger the main quadrant's scroll callback below\n\n    scrollContainer.scrollLeft = scrollLeft;\n    scrollContainer.scrollTop = scrollTop;\n    this.syncQuadrantViews();\n  };\n  /**\n   * Synchronizes quadrant sizes and scroll offsets based on the current\n   * column, row, and header sizes. Useful for correcting quadrant sizes after\n   * explicitly resizing columns and rows, for instance.\n   *\n   * Invoking this method imperatively is cheaper than providing columnWidths\n   * or rowHeights array props to TableQuadrantStack and forcing it to run\n   * expensive array diffs upon every update.\n   */\n\n\n  TableQuadrantStack.prototype.synchronizeQuadrantViews = function () {\n    this.syncQuadrantViews();\n  };\n\n  TableQuadrantStack.prototype.componentDidMount = function () {\n    this.emitRefs();\n    this.syncQuadrantViews();\n  };\n\n  TableQuadrantStack.prototype.componentDidUpdate = function (prevProps) {\n    // sync'ing quadrant views triggers expensive reflows, so we only call\n    // it when layout-affecting props change.\n    if (!CoreUtils.shallowCompareKeys(this.props, prevProps, {\n      include: SYNC_TRIGGER_PROP_KEYS\n    })) {\n      this.emitRefs();\n      this.syncQuadrantViews();\n    }\n  };\n\n  TableQuadrantStack.prototype.render = function () {\n    var _a = this.props,\n        grid = _a.grid,\n        enableRowHeader = _a.enableRowHeader,\n        bodyRenderer = _a.bodyRenderer,\n        throttleScrolling = _a.throttleScrolling; // use the more generic \"scroll\" event for the main quadrant to capture\n    // *both* scrollbar interactions and trackpad/mousewheel gestures.\n\n    var onMainQuadrantScroll = throttleScrolling ? this.throttledHandleMainQuadrantScroll : this.handleMainQuadrantScroll;\n    var onWheel = throttleScrolling ? this.throttledHandleWheel : this.handleWheel;\n    var baseProps = {\n      bodyRenderer: bodyRenderer,\n      enableRowHeader: enableRowHeader,\n      grid: grid,\n      onWheel: onWheel\n    };\n    var shouldRenderLeftQuadrants = this.shouldRenderLeftQuadrants();\n    var maybeLeftQuadrant = shouldRenderLeftQuadrants ? React.createElement(TableQuadrant, __assign({}, baseProps, {\n      quadrantRef: this.quadrantRefHandlers[QuadrantType.LEFT].quadrant,\n      quadrantType: QuadrantType.LEFT,\n      columnHeaderCellRenderer: this.renderLeftQuadrantColumnHeader,\n      menuRenderer: this.renderLeftQuadrantMenu,\n      rowHeaderCellRenderer: this.renderLeftQuadrantRowHeader,\n      scrollContainerRef: this.quadrantRefHandlers[QuadrantType.LEFT].scrollContainer\n    })) : undefined;\n    var maybeTopLeftQuadrant = shouldRenderLeftQuadrants ? React.createElement(TableQuadrant, __assign({}, baseProps, {\n      quadrantRef: this.quadrantRefHandlers[QuadrantType.TOP_LEFT].quadrant,\n      quadrantType: QuadrantType.TOP_LEFT,\n      columnHeaderCellRenderer: this.renderTopLeftQuadrantColumnHeader,\n      menuRenderer: this.renderTopLeftQuadrantMenu,\n      rowHeaderCellRenderer: this.renderTopLeftQuadrantRowHeader,\n      scrollContainerRef: this.quadrantRefHandlers[QuadrantType.TOP_LEFT].scrollContainer\n    })) : undefined;\n    return React.createElement(\"div\", {\n      className: Classes.TABLE_QUADRANT_STACK\n    }, React.createElement(TableQuadrant, __assign({}, baseProps, {\n      bodyRef: this.props.bodyRef,\n      onScroll: onMainQuadrantScroll,\n      quadrantRef: this.quadrantRefHandlers[QuadrantType.MAIN].quadrant,\n      quadrantType: QuadrantType.MAIN,\n      columnHeaderCellRenderer: this.renderMainQuadrantColumnHeader,\n      menuRenderer: this.renderMainQuadrantMenu,\n      rowHeaderCellRenderer: this.renderMainQuadrantRowHeader,\n      scrollContainerRef: this.quadrantRefHandlers[QuadrantType.MAIN].scrollContainer\n    })), React.createElement(TableQuadrant, __assign({}, baseProps, {\n      quadrantRef: this.quadrantRefHandlers[QuadrantType.TOP].quadrant,\n      quadrantType: QuadrantType.TOP,\n      columnHeaderCellRenderer: this.renderTopQuadrantColumnHeader,\n      menuRenderer: this.renderTopQuadrantMenu,\n      rowHeaderCellRenderer: this.renderTopQuadrantRowHeader,\n      scrollContainerRef: this.quadrantRefHandlers[QuadrantType.TOP].scrollContainer\n    })), maybeLeftQuadrant, maybeTopLeftQuadrant);\n  }; // Ref handlers\n  // ============\n\n\n  TableQuadrantStack.prototype.generateQuadrantRefHandlers = function (quadrantType) {\n    var _this = this;\n\n    var reducer = function (agg, key) {\n      agg[key] = function (ref) {\n        return _this.quadrantRefs[quadrantType][key] = ref;\n      };\n\n      return agg;\n    };\n\n    var refHandlers = [\"columnHeader\", \"menu\", \"quadrant\", \"rowHeader\", \"scrollContainer\"];\n    return refHandlers.reduce(reducer, {});\n  }; // Emitters\n  // ========\n\n\n  TableQuadrantStack.prototype.emitRefs = function () {\n    setRef(this.props.quadrantRef, this.quadrantRefs[QuadrantType.MAIN].quadrant);\n    setRef(this.props.rowHeaderRef, this.quadrantRefs[QuadrantType.MAIN].rowHeader);\n    setRef(this.props.columnHeaderRef, this.quadrantRefs[QuadrantType.MAIN].columnHeader);\n    setRef(this.props.scrollContainerRef, this.quadrantRefs[QuadrantType.MAIN].scrollContainer);\n  }; // this function is named 'update' instead of 'set', because a 'set'\n  // function typically takes the new value as a parameter. we avoid that to\n  // keep the isHorizontal logic tree contained within this function.\n\n\n  TableQuadrantStack.prototype.updateScrollContainerClientSize = function (isHorizontal) {\n    var mainScrollContainer = this.quadrantRefs[QuadrantType.MAIN].scrollContainer;\n\n    if (isHorizontal) {\n      this.cache.setScrollContainerClientWidth(mainScrollContainer.clientWidth);\n      return this.cache.getScrollContainerClientWidth();\n    } else {\n      this.cache.setScrollContainerClientHeight(mainScrollContainer.clientHeight);\n      return this.cache.getScrollContainerClientHeight();\n    }\n  };\n\n  TableQuadrantStack.prototype.maybeIncreaseToDefaultColumnHeaderHeight = function (height) {\n    return height <= QUADRANT_MIN_SIZE ? DEFAULT_COLUMN_HEADER_HEIGHT : height;\n  }; // Helpers\n  // =======\n\n  /**\n   * Returns the width or height of *only the grid* in the secondary quadrants\n   * (TOP, LEFT, TOP_LEFT), based on the number of frozen rows and columns.\n   */\n\n\n  TableQuadrantStack.prototype.getSecondaryQuadrantGridSize = function (dimension) {\n    var _a = this.props,\n        grid = _a.grid,\n        numFrozenColumns = _a.numFrozenColumns,\n        numFrozenRows = _a.numFrozenRows;\n    var numFrozen = dimension === \"width\" ? numFrozenColumns : numFrozenRows;\n    var getterFn = dimension === \"width\" ? grid.getCumulativeWidthAt : grid.getCumulativeHeightAt; // both getter functions do O(1) lookups.\n\n    return numFrozen > 0 ? getterFn(numFrozen - 1) : QUADRANT_MIN_SIZE;\n  };\n  /**\n   * Measures the desired width of the row header based on its tallest\n   * contents.\n   */\n\n\n  TableQuadrantStack.prototype.measureDesiredRowHeaderWidth = function () {\n    // the MAIN row header serves as the source of truth\n    var mainRowHeader = this.quadrantRefs[QuadrantType.MAIN].rowHeader;\n\n    if (mainRowHeader == null) {\n      return 0;\n    } else {\n      // (alas, we must force a reflow to measure the row header's \"desired\" width)\n      mainRowHeader.style.width = \"auto\";\n      var desiredRowHeaderWidth = mainRowHeader.clientWidth;\n      return desiredRowHeaderWidth;\n    }\n  };\n  /**\n   * Measures the desired height of the column header based on its tallest\n   * contents.\n   */\n\n\n  TableQuadrantStack.prototype.measureDesiredColumnHeaderHeight = function () {\n    // unlike the row headers, the column headers are in a display-flex\n    // layout and are not actually bound by any fixed `height` that we set,\n    // so they'll grow freely to their necessary size. makes measuring easy!\n    var mainColumnHeader = this.quadrantRefs[QuadrantType.MAIN].columnHeader;\n    return mainColumnHeader == null ? 0 : mainColumnHeader.clientHeight;\n  };\n\n  TableQuadrantStack.prototype.shouldRenderLeftQuadrants = function (props) {\n    if (props === void 0) {\n      props = this.props;\n    }\n\n    var enableRowHeader = props.enableRowHeader,\n        numFrozenColumns = props.numFrozenColumns;\n    return enableRowHeader || numFrozenColumns != null && numFrozenColumns > 0;\n  }; // Resizing\n\n\n  TableQuadrantStack.prototype.adjustVerticalGuides = function (verticalGuides, quadrantType) {\n    var isFrozenQuadrant = quadrantType === QuadrantType.LEFT || quadrantType === QuadrantType.TOP_LEFT;\n    var scrollAmount = isFrozenQuadrant ? 0 : this.cache.getScrollOffset(\"scrollLeft\");\n    var rowHeaderWidth = this.cache.getRowHeaderWidth();\n    var adjustedVerticalGuides = verticalGuides != null ? verticalGuides.map(function (verticalGuide) {\n      return verticalGuide - scrollAmount + rowHeaderWidth;\n    }) : verticalGuides;\n    return adjustedVerticalGuides;\n  };\n\n  TableQuadrantStack.prototype.adjustHorizontalGuides = function (horizontalGuides, quadrantType) {\n    var isFrozenQuadrant = quadrantType === QuadrantType.TOP || quadrantType === QuadrantType.TOP_LEFT;\n    var scrollAmount = isFrozenQuadrant ? 0 : this.cache.getScrollOffset(\"scrollTop\");\n    var columnHeaderHeight = this.cache.getColumnHeaderHeight();\n    var adjustedHorizontalGuides = horizontalGuides != null ? horizontalGuides.map(function (horizontalGuide) {\n      return horizontalGuide - scrollAmount + columnHeaderHeight;\n    }) : horizontalGuides;\n    return adjustedHorizontalGuides;\n  }; // we want the user to explicitly pass a quadrantType. define defaultProps as a Partial to avoid\n  // declaring that and other required props here.\n\n\n  TableQuadrantStack.defaultProps = {\n    enableColumnInteractionBar: undefined,\n    enableRowHeader: true,\n    isHorizontalScrollDisabled: false,\n    isVerticalScrollDisabled: false,\n    throttleScrolling: true,\n    viewSyncDelay: DEFAULT_VIEW_SYNC_DELAY\n  };\n  TableQuadrantStack = __decorate([polyfill], TableQuadrantStack);\n  return TableQuadrantStack;\n}(AbstractComponent2);\n\nexport { TableQuadrantStack };","map":{"version":3,"sources":["../../../src/quadrants/tableQuadrantStack.tsx"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;;AAEH,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,QAAT,QAAyB,yBAAzB;AAEA,SAAS,kBAAT,EAA0C,MAA1C,EAAkD,KAAK,IAAI,SAA3D,QAA4E,mBAA5E;AAEA,OAAO,KAAK,OAAZ,MAAyB,mBAAzB;AAEA,OAAO,KAAK,WAAZ,MAA6B,gCAA7B;AACA,SAAS,KAAT,QAAsB,iBAAtB;AAEA,SAAS,YAAT,EAAuB,aAAvB,QAA4C,iBAA5C;AACA,SAAS,uBAAT,QAAwC,2BAAxC,C,CAiNA;AACA;;AACA,IAAM,4BAA4B,GAAG,EAArC,C,CAEA;AACA;;AACA,IAAM,uBAAuB,GAAG,GAAhC,C,CAEA;AACA;AACA;;AACA,IAAM,iBAAiB,GAAG,CAA1B,C,CAEA;AACA;;AACA,IAAM,sBAAsB,GAA0C,CAClE,iBADkE,EAElE,gBAFkE,EAGlE,kBAHkE,EAIlE,eAJkE,EAKlE,YALkE,EAMlE,SANkE,EAOlE,4BAPkE,CAAtE;;AAWA,IAAA,kBAAA,GAAA,UAAA,MAAA,EAAA;AAAwC,EAAA,SAAA,CAAA,kBAAA,EAAA,MAAA,CAAA,CAAxC,CA6CI;AACA;;;AAEA,WAAA,kBAAA,CAAmB,KAAnB,EAAoD,OAApD,EAAiE;;;AAAjE,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,EAAa,OAAb,KAAqB,IADzB,CAAiE,CApCjE;AACA;;;AAEQ,IAAA,KAAA,CAAA,YAAA,IAAY,EAAA,GAAA,EAAA,EAChB,EAAA,CAAC,YAAY,CAAC,IAAd,CAAA,GAAqB,EADL,EAEhB,EAAA,CAAC,YAAY,CAAC,GAAd,CAAA,GAAoB,EAFJ,EAGhB,EAAA,CAAC,YAAY,CAAC,IAAd,CAAA,GAAqB,EAHL,EAIhB,EAAA,CAAC,YAAY,CAAC,QAAd,CAAA,GAAyB,EAJT,EAKlB,EALM;AAOA,IAAA,KAAA,CAAA,mBAAA,IAAmB,EAAA,GAAA,EAAA,EACvB,EAAA,CAAC,YAAY,CAAC,IAAd,CAAA,GAAqB,KAAI,CAAC,2BAAL,CAAiC,YAAY,CAAC,IAA9C,CADE,EAEvB,EAAA,CAAC,YAAY,CAAC,GAAd,CAAA,GAAoB,KAAI,CAAC,2BAAL,CAAiC,YAAY,CAAC,GAA9C,CAFG,EAGvB,EAAA,CAAC,YAAY,CAAC,IAAd,CAAA,GAAqB,KAAI,CAAC,2BAAL,CAAiC,YAAY,CAAC,IAA9C,CAHE,EAIvB,EAAA,CAAC,YAAY,CAAC,QAAd,CAAA,GAAyB,KAAI,CAAC,2BAAL,CAAiC,YAAY,CAAC,QAA9C,CAJF,EAKzB,EALM,EA0ByD,CAnBjE;AACA;;AACQ,IAAA,KAAA,CAAA,0CAAA,GAA6C,KAA7C,CAiByD,CAiJjE;AACA;AAEA;;AAEQ,IAAA,KAAA,CAAA,sBAAA,GAAyB,YAAA;;;AAC7B,aAAA,CAAA,EAAA,GAAO,CAAA,EAAA,GAAA,KAAI,CAAC,KAAL,EAAW,YAAlB,MAA8B,IAA9B,IAA8B,EAAA,KAAA,KAAA,CAA9B,GAA8B,KAAA,CAA9B,GAA8B,EAAA,CAAA,IAAA,CAAA,EAAA,EAAG,KAAI,CAAC,mBAAL,CAAyB,YAAY,CAAC,IAAtC,EAA4C,IAA/C,CAA9B;AACH,KAFO;;AAIA,IAAA,KAAA,CAAA,qBAAA,GAAwB,YAAA;;;AAC5B,aAAA,CAAA,EAAA,GAAO,CAAA,EAAA,GAAA,KAAI,CAAC,KAAL,EAAW,YAAlB,MAA8B,IAA9B,IAA8B,EAAA,KAAA,KAAA,CAA9B,GAA8B,KAAA,CAA9B,GAA8B,EAAA,CAAA,IAAA,CAAA,EAAA,EAAG,KAAI,CAAC,mBAAL,CAAyB,YAAY,CAAC,GAAtC,EAA2C,IAA9C,CAA9B;AACH,KAFO;;AAIA,IAAA,KAAA,CAAA,sBAAA,GAAyB,YAAA;;;AAC7B,aAAA,CAAA,EAAA,GAAO,CAAA,EAAA,GAAA,KAAI,CAAC,KAAL,EAAW,YAAlB,MAA8B,IAA9B,IAA8B,EAAA,KAAA,KAAA,CAA9B,GAA8B,KAAA,CAA9B,GAA8B,EAAA,CAAA,IAAA,CAAA,EAAA,EAAG,KAAI,CAAC,mBAAL,CAAyB,YAAY,CAAC,IAAtC,EAA4C,IAA/C,CAA9B;AACH,KAFO;;AAIA,IAAA,KAAA,CAAA,yBAAA,GAA4B,YAAA;;;AAChC,aAAA,CAAA,EAAA,GAAO,CAAA,EAAA,GAAA,KAAI,CAAC,KAAL,EAAW,YAAlB,MAA8B,IAA9B,IAA8B,EAAA,KAAA,KAAA,CAA9B,GAA8B,KAAA,CAA9B,GAA8B,EAAA,CAAA,IAAA,CAAA,EAAA,EAAG,KAAI,CAAC,mBAAL,CAAyB,YAAY,CAAC,QAAtC,EAAgD,IAAnD,CAA9B;AACH,KAFO,CAlKyD,CAsKjE;;;AAEQ,IAAA,KAAA,CAAA,8BAAA,GAAiC,UAAC,qBAAD,EAA+B;;;AACpE,UAAM,UAAU,GAAG,KAAI,CAAC,mBAAL,CAAyB,YAAY,CAAC,IAAtC,EAA4C,YAA/D;AACA,UAAM,aAAa,GAAG,KAAI,CAAC,2BAA3B;AACA,UAAM,iBAAiB,GAAG,KAAI,CAAC,uBAA/B;AACA,aAAA,CAAA,EAAA,GAAO,CAAA,EAAA,GAAA,KAAI,CAAC,KAAL,EAAW,wBAAlB,MAA0C,IAA1C,IAA0C,EAAA,KAAA,KAAA,CAA1C,GAA0C,KAAA,CAA1C,GAA0C,EAAA,CAAA,IAAA,CAAA,EAAA,EACtC,UADsC,EAEtC,aAFsC,EAGtC,iBAHsC,EAItC,qBAJsC,CAA1C;AAMH,KAVO;;AAYA,IAAA,KAAA,CAAA,6BAAA,GAAgC,UAAC,qBAAD,EAA+B;;;AACnE,UAAM,UAAU,GAAG,KAAI,CAAC,mBAAL,CAAyB,YAAY,CAAC,GAAtC,EAA2C,YAA9D;AACA,UAAM,aAAa,GAAG,KAAI,CAAC,0BAA3B;AACA,UAAM,iBAAiB,GAAG,KAAI,CAAC,uBAA/B;AACA,aAAA,CAAA,EAAA,GAAO,CAAA,EAAA,GAAA,KAAI,CAAC,KAAL,EAAW,wBAAlB,MAA0C,IAA1C,IAA0C,EAAA,KAAA,KAAA,CAA1C,GAA0C,KAAA,CAA1C,GAA0C,EAAA,CAAA,IAAA,CAAA,EAAA,EACtC,UADsC,EAEtC,aAFsC,EAGtC,iBAHsC,EAItC,qBAJsC,CAA1C;AAMH,KAVO;;AAYA,IAAA,KAAA,CAAA,8BAAA,GAAiC,UAAC,qBAAD,EAA+B;;;AACpE,UAAM,UAAU,GAAG,KAAI,CAAC,mBAAL,CAAyB,YAAY,CAAC,IAAtC,EAA4C,YAA/D;AACA,UAAM,aAAa,GAAG,KAAI,CAAC,2BAA3B;AACA,UAAM,iBAAiB,GAAG,KAAI,CAAC,uBAA/B;AACA,aAAA,CAAA,EAAA,GAAO,CAAA,EAAA,GAAA,KAAI,CAAC,KAAL,EAAW,wBAAlB,MAA0C,IAA1C,IAA0C,EAAA,KAAA,KAAA,CAA1C,GAA0C,KAAA,CAA1C,GAA0C,EAAA,CAAA,IAAA,CAAA,EAAA,EACtC,UADsC,EAEtC,aAFsC,EAGtC,iBAHsC,EAItC,qBAJsC,CAA1C;AAMH,KAVO;;AAYA,IAAA,KAAA,CAAA,iCAAA,GAAoC,UAAC,qBAAD,EAA+B;;;AACvE,UAAM,UAAU,GAAG,KAAI,CAAC,mBAAL,CAAyB,YAAY,CAAC,QAAtC,EAAgD,YAAnE;AACA,UAAM,aAAa,GAAG,KAAI,CAAC,8BAA3B;AACA,UAAM,iBAAiB,GAAG,KAAI,CAAC,uBAA/B;AACA,aAAA,CAAA,EAAA,GAAO,CAAA,EAAA,GAAA,KAAI,CAAC,KAAL,EAAW,wBAAlB,MAA0C,IAA1C,IAA0C,EAAA,KAAA,KAAA,CAA1C,GAA0C,KAAA,CAA1C,GAA0C,EAAA,CAAA,IAAA,CAAA,EAAA,EACtC,UADsC,EAEtC,aAFsC,EAGtC,iBAHsC,EAItC,qBAJsC,CAA1C;AAMH,KAVO,CA5MyD,CAwNjE;;;AAEQ,IAAA,KAAA,CAAA,2BAAA,GAA8B,UAAC,kBAAD,EAA4B;;;AAC9D,UAAM,UAAU,GAAG,KAAI,CAAC,mBAAL,CAAyB,YAAY,CAAC,IAAtC,EAA4C,SAA/D;AACA,UAAM,aAAa,GAAG,KAAI,CAAC,wBAA3B;AACA,UAAM,iBAAiB,GAAG,KAAI,CAAC,oBAA/B;AACA,aAAA,CAAA,EAAA,GAAO,CAAA,EAAA,GAAA,KAAI,CAAC,KAAL,EAAW,qBAAlB,MAAuC,IAAvC,IAAuC,EAAA,KAAA,KAAA,CAAvC,GAAuC,KAAA,CAAvC,GAAuC,EAAA,CAAA,IAAA,CAAA,EAAA,EAAG,UAAH,EAAe,aAAf,EAA8B,iBAA9B,EAAiD,kBAAjD,CAAvC;AACH,KALO;;AAOA,IAAA,KAAA,CAAA,0BAAA,GAA6B,UAAC,kBAAD,EAA4B;;;AAC7D,UAAM,UAAU,GAAG,KAAI,CAAC,mBAAL,CAAyB,YAAY,CAAC,GAAtC,EAA2C,SAA9D;AACA,UAAM,aAAa,GAAG,KAAI,CAAC,uBAA3B;AACA,UAAM,iBAAiB,GAAG,KAAI,CAAC,oBAA/B;AACA,aAAA,CAAA,EAAA,GAAO,CAAA,EAAA,GAAA,KAAI,CAAC,KAAL,EAAW,qBAAlB,MAAuC,IAAvC,IAAuC,EAAA,KAAA,KAAA,CAAvC,GAAuC,KAAA,CAAvC,GAAuC,EAAA,CAAA,IAAA,CAAA,EAAA,EAAG,UAAH,EAAe,aAAf,EAA8B,iBAA9B,EAAiD,kBAAjD,CAAvC;AACH,KALO;;AAOA,IAAA,KAAA,CAAA,2BAAA,GAA8B,UAAC,kBAAD,EAA4B;;;AAC9D,UAAM,UAAU,GAAG,KAAI,CAAC,mBAAL,CAAyB,YAAY,CAAC,IAAtC,EAA4C,SAA/D;AACA,UAAM,aAAa,GAAG,KAAI,CAAC,wBAA3B;AACA,UAAM,iBAAiB,GAAG,KAAI,CAAC,oBAA/B;AACA,aAAA,CAAA,EAAA,GAAO,CAAA,EAAA,GAAA,KAAI,CAAC,KAAL,EAAW,qBAAlB,MAAuC,IAAvC,IAAuC,EAAA,KAAA,KAAA,CAAvC,GAAuC,KAAA,CAAvC,GAAuC,EAAA,CAAA,IAAA,CAAA,EAAA,EAAG,UAAH,EAAe,aAAf,EAA8B,iBAA9B,EAAiD,kBAAjD,CAAvC;AACH,KALO;;AAOA,IAAA,KAAA,CAAA,8BAAA,GAAiC,UAAC,kBAAD,EAA4B;;;AACjE,UAAM,UAAU,GAAG,KAAI,CAAC,mBAAL,CAAyB,YAAY,CAAC,QAAtC,EAAgD,SAAnE;AACA,UAAM,aAAa,GAAG,KAAI,CAAC,2BAA3B;AACA,UAAM,iBAAiB,GAAG,KAAI,CAAC,oBAA/B;AACA,aAAA,CAAA,EAAA,GAAO,CAAA,EAAA,GAAA,KAAI,CAAC,KAAL,EAAW,qBAAlB,MAAuC,IAAvC,IAAuC,EAAA,KAAA,KAAA,CAAvC,GAAuC,KAAA,CAAvC,GAAuC,EAAA,CAAA,IAAA,CAAA,EAAA,EAAG,UAAH,EAAe,aAAf,EAA8B,iBAA9B,EAAiD,kBAAjD,CAAvC;AACH,KALO,CA/OyD,CAsPjE;AACA;AAEA;AACA;;;AAEQ,IAAA,KAAA,CAAA,wBAAA,GAA2B,UAAC,KAAD,EAAkC;;;AACjE,UAAI,KAAI,CAAC,0CAAT,EAAqD;AACjD,QAAA,KAAI,CAAC,0CAAL,GAAkD,KAAlD;AACA;AACH,OAJgE,CAMjE;AACA;;;AACA,OAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAI,CAAC,KAAL,EAAW,QAAX,MAAmB,IAAnB,IAAmB,EAAA,KAAA,KAAA,CAAnB,GAAmB,KAAA,CAAnB,GAAmB,EAAA,CAAA,IAAA,CAAA,EAAA,EAAG,KAAH,CAAnB,CARiE,CAUjE;AACA;;AACA,UAAM,mBAAmB,GAAG,KAAI,CAAC,YAAL,CAAkB,YAAY,CAAC,IAA/B,EAAqC,eAAjE;AACA,UAAM,cAAc,GAAG,mBAAmB,CAAC,UAA3C;AACA,UAAM,aAAa,GAAG,mBAAmB,CAAC,SAA1C,CAdiE,CAgBjE;AACA;;AACA,MAAA,KAAI,CAAC,wBAAL,CAA8B,YAA9B,EAA4C,cAA5C;;AACA,MAAA,KAAI,CAAC,wBAAL,CAA8B,WAA9B,EAA2C,aAA3C,EAnBiE,CAqBjE;;;AACA,MAAA,KAAI,CAAC,0BAAL;AACH,KAvBO;;AAyBA,IAAA,KAAA,CAAA,WAAA,GAAc,UAAC,KAAD,EAAqC;iBAAA,CACvD;AACA;;;AACA,OAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAI,CAAC,KAAL,EAAW,QAAX,MAAmB,IAAnB,IAAmB,EAAA,KAAA,KAAA,CAAnB,GAAmB,KAAA,CAAnB,GAAmB,EAAA,CAAA,IAAA,CAAA,EAAA,EAAG,KAAH,CAAnB,CAHuD,CAKvD;;AACA,UAAM,cAAc,GAAG,KAAI,CAAC,mBAAL,CAAyB,YAAzB,EAAuC,KAAK,CAAC,MAA7C,CAAvB;;AACA,UAAM,aAAa,GAAG,KAAI,CAAC,mBAAL,CAAyB,UAAzB,EAAqC,KAAK,CAAC,MAA3C,CAAtB,CAPuD,CASvD;AACA;;;AACA,UAAI,cAAc,IAAI,IAAlB,IAA0B,aAAa,IAAI,IAA/C,EAAqD;AACjD,QAAA,KAAI,CAAC,0CAAL,GAAkD,IAAlD;AACH,OAbsD,CAevD;AACA;AACA;;;AACA,MAAA,KAAI,CAAC,YAAL,CAAkB,YAAY,CAAC,IAA/B,EAAqC,eAArC,CAAqD,UAArD,GAAkE,cAAlE;AACA,MAAA,KAAI,CAAC,YAAL,CAAkB,YAAY,CAAC,IAA/B,EAAqC,eAArC,CAAqD,SAArD,GAAiE,aAAjE;;AACA,MAAA,KAAI,CAAC,wBAAL,CAA8B,YAA9B,EAA4C,cAA5C;;AACA,MAAA,KAAI,CAAC,wBAAL,CAA8B,WAA9B,EAA2C,aAA3C,EArBuD,CAuBvD;;;AACA,MAAA,KAAI,CAAC,0BAAL;AACH,KAzBO;;AA2BA,IAAA,KAAA,CAAA,mBAAA,GAAsB,UAAC,SAAD,EAAuC,KAAvC,EAAoD;AACxE,UAAA,EAAA,GAAiE,KAAI,CAAC,KAAtE;AAAA,UAAE,IAAI,GAAA,EAAA,CAAA,IAAN;AAAA,UAAQ,0BAA0B,GAAA,EAAA,CAAA,0BAAlC;AAAA,UAAoC,wBAAwB,GAAA,EAAA,CAAA,wBAA5D;AAEN,UAAM,YAAY,GAAG,SAAS,KAAK,YAAnC;AACA,UAAM,SAAS,GAAG,YAAY,GAAG,YAAH,GAAkB,WAAhD;AACA,UAAM,gBAAgB,GAAG,YAAY,GAAG,0BAAH,GAAgC,wBAArE;;AAEA,UAAI,gBAAJ,EAAsB;AAClB,eAAO,SAAP;AACH,OAT6E,CAW9E;AACA;AACA;AACA;AACA;;;AACA,UAAI,UAAU,GAAG,YAAY,GACvB,KAAI,CAAC,KAAL,CAAW,6BAAX,EADuB,GAEvB,KAAI,CAAC,KAAL,CAAW,8BAAX,EAFN;;AAIA,UAAI,UAAU,IAAI,IAAlB,EAAwB;AACpB;AACA;AACA,QAAA,UAAU,GAAG,KAAI,CAAC,+BAAL,CAAqC,YAArC,CAAb;AACH,OAxB6E,CA0B9E;AACA;AACA;AACA;;;AACA,UAAM,aAAa,GAAG,YAAY,GAC5B,KAAI,CAAC,KAAL,CAAW,6BAAX,KAA6C,KAAI,CAAC,KAAL,CAAW,iBAAX,EADjB,GAE5B,KAAI,CAAC,KAAL,CAAW,8BAAX,KAA8C,KAAI,CAAC,KAAL,CAAW,qBAAX,EAFpD;AAIA,UAAM,QAAQ,GAAG,YAAY,GAAG,IAAI,CAAC,QAAL,EAAH,GAAqB,IAAI,CAAC,SAAL,EAAlD;AACA,UAAM,eAAe,GAAG,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,QAAQ,GAAG,aAAvB,CAAxB;;AACA,UAAM,gBAAgB,GAAG,KAAI,CAAC,KAAL,CAAW,eAAX,CAA2B,SAA3B,CAAzB;;AACA,UAAM,gBAAgB,GAAG,SAAS,CAAC,KAAV,CAAgB,gBAAgB,GAAG,KAAnC,EAA0C,CAA1C,EAA6C,eAA7C,CAAzB;AAEA,aAAO,gBAAP;AACH,KAxCO,CAhTyD,CA0VjE;AACA;AAEA;;;AAEQ,IAAA,KAAA,CAAA,2BAAA,GAA8B,UAAC,cAAD,EAAyB;AAC3D,MAAA,KAAI,CAAC,yBAAL,CAA+B,cAA/B,EAA+C,YAAY,CAAC,IAA5D;AACH,KAFO;;AAIA,IAAA,KAAA,CAAA,0BAAA,GAA6B,UAAC,cAAD,EAAyB;AAC1D,MAAA,KAAI,CAAC,yBAAL,CAA+B,cAA/B,EAA+C,YAAY,CAAC,GAA5D;AACH,KAFO;;AAIA,IAAA,KAAA,CAAA,2BAAA,GAA8B,UAAC,cAAD,EAAyB;AAC3D,MAAA,KAAI,CAAC,yBAAL,CAA+B,cAA/B,EAA+C,YAAY,CAAC,IAA5D;AACH,KAFO;;AAIA,IAAA,KAAA,CAAA,8BAAA,GAAiC,UAAC,cAAD,EAAyB;AAC9D,MAAA,KAAI,CAAC,yBAAL,CAA+B,cAA/B,EAA+C,YAAY,CAAC,QAA5D;AACH,KAFO;;AAIA,IAAA,KAAA,CAAA,yBAAA,GAA4B,UAAC,cAAD,EAA2B,YAA3B,EAAqD;;;AACrF,UAAM,cAAc,GAAG,KAAI,CAAC,oBAAL,CAA0B,cAA1B,EAA0C,YAA1C,CAAvB;;AACA,OAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAI,CAAC,KAAL,EAAW,uBAAX,MAAkC,IAAlC,IAAkC,EAAA,KAAA,KAAA,CAAlC,GAAkC,KAAA,CAAlC,GAAkC,EAAA,CAAA,IAAA,CAAA,EAAA,EAAG,cAAH,CAAlC;AACH,KAHO,CA/WyD,CAoXjE;;;AAEQ,IAAA,KAAA,CAAA,wBAAA,GAA2B,UAAC,gBAAD,EAA2B;AAC1D,MAAA,KAAI,CAAC,sBAAL,CAA4B,gBAA5B,EAA8C,YAAY,CAAC,IAA3D;AACH,KAFO;;AAIA,IAAA,KAAA,CAAA,uBAAA,GAA0B,UAAC,gBAAD,EAA2B;AACzD,MAAA,KAAI,CAAC,sBAAL,CAA4B,gBAA5B,EAA8C,YAAY,CAAC,GAA3D;AACH,KAFO;;AAIA,IAAA,KAAA,CAAA,wBAAA,GAA2B,UAAC,gBAAD,EAA2B;AAC1D,MAAA,KAAI,CAAC,sBAAL,CAA4B,gBAA5B,EAA8C,YAAY,CAAC,IAA3D;AACH,KAFO;;AAIA,IAAA,KAAA,CAAA,2BAAA,GAA8B,UAAC,gBAAD,EAA2B;AAC7D,MAAA,KAAI,CAAC,sBAAL,CAA4B,gBAA5B,EAA8C,YAAY,CAAC,QAA3D;AACH,KAFO;;AAIA,IAAA,KAAA,CAAA,sBAAA,GAAyB,UAAC,gBAAD,EAA6B,YAA7B,EAAuD;;;AACpF,UAAM,cAAc,GAAG,KAAI,CAAC,sBAAL,CAA4B,gBAA5B,EAA8C,YAA9C,CAAvB;;AACA,OAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAI,CAAC,KAAL,EAAW,oBAAX,MAA+B,IAA/B,IAA+B,EAAA,KAAA,KAAA,CAA/B,GAA+B,KAAA,CAA/B,GAA+B,EAAA,CAAA,IAAA,CAAA,EAAA,EAAG,cAAH,CAA/B;AACH,KAHO,CAtYyD,CA2YjE;AACA;AAEA;;;AAEQ,IAAA,KAAA,CAAA,uBAAA,GAA0B,UAAC,QAAD,EAAmB,QAAnB,EAAqC,MAArC,EAAmD;;;AACjF,UAAM,UAAU,GAAG,KAAK,CAAC,0BAAN,CAAiC,QAAjC,EAA2C,QAA3C,EAAqD,MAArD,CAAnB;;AACA,UAAM,UAAU,GAAG,KAAI,CAAC,KAAL,CAAW,IAAX,CAAgB,wBAAhB,CAAyC,UAAzC,CAAnB;;AACA,UAAM,YAAY,GAAG,UAAU,IAAI,KAAI,CAAC,KAAL,CAAW,gBAAzB,GAA4C,YAAY,CAAC,QAAzD,GAAoE,YAAY,CAAC,GAAtG;;AACA,UAAM,cAAc,GAAG,KAAI,CAAC,oBAAL,CAA0B,CAAC,UAAD,CAA1B,EAAwC,YAAxC,CAAvB;;AACA,OAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAI,CAAC,KAAL,EAAW,uBAAX,MAAkC,IAAlC,IAAkC,EAAA,KAAA,KAAA,CAAlC,GAAkC,KAAA,CAAlC,GAAkC,EAAA,CAAA,IAAA,CAAA,EAAA,EAAG,cAAH,CAAlC;AACH,KANO,CAhZyD,CAwZjE;;;AAEQ,IAAA,KAAA,CAAA,oBAAA,GAAuB,UAAC,QAAD,EAAmB,QAAnB,EAAqC,MAArC,EAAmD;;;AAC9E,UAAM,UAAU,GAAG,KAAK,CAAC,0BAAN,CAAiC,QAAjC,EAA2C,QAA3C,EAAqD,MAArD,CAAnB;;AACA,UAAM,SAAS,GAAG,KAAI,CAAC,KAAL,CAAW,IAAX,CAAgB,yBAAhB,CAA0C,UAA1C,CAAlB;;AACA,UAAM,YAAY,GAAG,UAAU,IAAI,KAAI,CAAC,KAAL,CAAW,aAAzB,GAAyC,YAAY,CAAC,QAAtD,GAAiE,YAAY,CAAC,IAAnG;;AACA,UAAM,gBAAgB,GAAG,KAAI,CAAC,sBAAL,CAA4B,CAAC,SAAD,CAA5B,EAAyC,YAAzC,CAAzB;;AACA,OAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAI,CAAC,KAAL,EAAW,oBAAX,MAA+B,IAA/B,IAA+B,EAAA,KAAA,KAAA,CAA/B,GAA+B,KAAA,CAA/B,GAA+B,EAAA,CAAA,IAAA,CAAA,EAAA,EAAG,gBAAH,CAA/B;AACH,KANO,CA1ZyD,CA4ajE;AACA;;;AAEQ,IAAA,KAAA,CAAA,0BAAA,GAA6B,YAAA;AACzB,UAAA,aAAa,GAAK,KAAI,CAAC,KAAL,CAAL,aAAb;;AACR,UAAI,aAAa,GAAG,CAApB,EAAuB;AACnB;AACA,QAAA,KAAI,CAAC,iBAAL;AACH,OAHD,MAGO;AACH;AACA,QAAA,aAAa,CAAC,KAAI,CAAC,yBAAN,CAAb;AACA,QAAA,KAAI,CAAC,yBAAL,GAAiC,MAAM,CAAC,UAAP,CAAkB,KAAI,CAAC,iBAAvB,EAA0C,aAA1C,CAAjC;AACH;AACJ,KAVO;;AAYA,IAAA,KAAA,CAAA,iBAAA,GAAoB,YAAA;AACxB,UAAM,QAAQ,GAAG,KAAI,CAAC,YAAL,CAAkB,YAAY,CAAC,IAA/B,CAAjB;AACA,UAAM,mBAAmB,GAAG,QAAQ,CAAC,eAArC,CAFwB,CAIxB;AACA;AACA;;AAEA,UAAM,cAAc,GAAG,KAAI,CAAC,4BAAL,EAAvB;;AACA,UAAM,kBAAkB,GAAG,KAAI,CAAC,gCAAL,EAA3B;;AAEA,UAAM,qBAAqB,GAAG,KAAI,CAAC,4BAAL,CAAkC,OAAlC,CAA9B;;AACA,UAAM,qBAAqB,GAAG,KAAI,CAAC,4BAAL,CAAkC,QAAlC,CAA9B;;AAEA,UAAM,iBAAiB,GAAG,cAAc,GAAG,qBAA3C;AACA,UAAM,iBAAiB,GAAG,kBAAkB,GAAG,qBAA/C;AAEA,UAAM,mBAAmB,GAAG,WAAW,CAAC,yBAAZ,CAAsC,mBAAtC,EAA2D,UAA3D,CAA5B;AACA,UAAM,qBAAqB,GAAG,WAAW,CAAC,yBAAZ,CAAsC,mBAAtC,EAA2D,YAA3D,CAA9B,CAlBwB,CAoBxB;;AACA,UAAM,0BAA0B,GAAG,KAAI,CAAC,wCAAL,CAA8C,kBAA9C,CAAnC;;AACA,UAAM,yBAAyB,GAAG,KAAI,CAAC,wCAAL,CAA8C,iBAA9C,CAAlC,CAtBwB,CAwBxB;AACA;;;AACA,MAAA,KAAI,CAAC,KAAL,CAAW,iBAAX,CAA6B,cAA7B;;AACA,MAAA,KAAI,CAAC,KAAL,CAAW,qBAAX,CAAiC,kBAAjC,EA3BwB,CA4BxB;AACA;AACA;;;AACA,MAAA,KAAI,CAAC,KAAL,CAAW,6BAAX,CAAyC,SAAzC;;AACA,MAAA,KAAI,CAAC,KAAL,CAAW,8BAAX,CAA0C,SAA1C,EAhCwB,CAkCxB;AACA;AACA;AAEA;AACA;;;AACA,MAAA,KAAI,CAAC,+BAAL,CAAqC,cAArC;;AACA,MAAA,KAAI,CAAC,gCAAL,CAAsC,cAAtC,EAAsD,0BAAtD;;AACA,MAAA,KAAI,CAAC,qBAAL,CAA2B,iBAA3B,EAA8C,yBAA9C,EA1CwB,CA4CxB;AACA;;;AACA,MAAA,KAAI,CAAC,8BAAL,CAAoC,YAAY,CAAC,GAAjD,EAAsD,OAAtD,EAA+D,mBAA/D;;AACA,MAAA,KAAI,CAAC,8BAAL,CAAoC,YAAY,CAAC,IAAjD,EAAuD,QAAvD,EAAiE,qBAAjE,EA/CwB,CAiDxB;AACA;;;AACA,MAAA,KAAI,CAAC,4BAAL,CAAkC,YAAY,CAAC,IAA/C,EAAqD,WAArD;;AACA,MAAA,KAAI,CAAC,4BAAL,CAAkC,YAAY,CAAC,GAA/C,EAAoD,YAApD;AACH,KArDO;;AAuDA,IAAA,KAAA,CAAA,qBAAA,GAAwB,UAAC,KAAD,EAAgB,MAAhB,EAA8B;AAC1D,MAAA,KAAI,CAAC,qBAAL,CAA2B,YAAY,CAAC,IAAxC,EAA8C,OAA9C,EAAuD,KAAvD;;AACA,MAAA,KAAI,CAAC,qBAAL,CAA2B,YAAY,CAAC,GAAxC,EAA6C,QAA7C,EAAuD,MAAvD;;AACA,MAAA,KAAI,CAAC,qBAAL,CAA2B,YAAY,CAAC,QAAxC,EAAkD,OAAlD,EAA2D,KAA3D;;AACA,MAAA,KAAI,CAAC,qBAAL,CAA2B,YAAY,CAAC,QAAxC,EAAkD,QAAlD,EAA4D,MAA5D;AACH,KALO;;AAOA,IAAA,KAAA,CAAA,qBAAA,GAAwB,UAAC,YAAD,EAA6B,SAA7B,EAA4D,KAA5D,EAAyE;AAC7F,UAAA,QAAQ,GAAK,KAAI,CAAC,YAAL,CAAkB,YAAlB,EAAL,QAAR;;AACR,UAAI,QAAQ,IAAI,IAAhB,EAAsB;AAClB,QAAA,QAAQ,CAAC,KAAT,CAAe,SAAf,IAA+B,KAAK,GAAA,IAApC;AACH;AACJ,KALO;;AAOA,IAAA,KAAA,CAAA,8BAAA,GAAiC,UAAC,YAAD,EAA6B,IAA7B,EAAuD,KAAvD,EAAoE;AACjG,UAAA,QAAQ,GAAK,KAAI,CAAC,YAAL,CAAkB,YAAlB,EAAL,QAAR;;AACR,UAAI,QAAQ,IAAI,IAAhB,EAAsB;AAClB,QAAA,QAAQ,CAAC,KAAT,CAAe,IAAf,IAA0B,KAAK,GAAA,IAA/B;AACH;AACJ,KALO;;AAOA,IAAA,KAAA,CAAA,+BAAA,GAAkC,UAAC,KAAD,EAAc;AACpD,MAAA,KAAI,CAAC,6BAAL,CAAmC,YAAY,CAAC,IAAhD,EAAsD,KAAtD;;AACA,MAAA,KAAI,CAAC,6BAAL,CAAmC,YAAY,CAAC,GAAhD,EAAqD,KAArD;;AACA,MAAA,KAAI,CAAC,6BAAL,CAAmC,YAAY,CAAC,IAAhD,EAAsD,KAAtD;;AACA,MAAA,KAAI,CAAC,6BAAL,CAAmC,YAAY,CAAC,QAAhD,EAA0D,KAA1D;AACH,KALO;;AAOA,IAAA,KAAA,CAAA,6BAAA,GAAgC,UAAC,YAAD,EAA6B,KAA7B,EAA0C;AACtE,UAAA,SAAS,GAAK,KAAI,CAAC,YAAL,CAAkB,YAAlB,EAAL,SAAT;;AACR,UAAI,SAAS,IAAI,IAAjB,EAAuB;AACnB,QAAA,SAAS,CAAC,KAAV,CAAgB,KAAhB,GAA2B,KAAK,GAAA,IAAhC;AACH;AACJ,KALO;;AAOA,IAAA,KAAA,CAAA,gCAAA,GAAmC,UAAC,KAAD,EAAgB,MAAhB,EAA8B;AACrE,MAAA,KAAI,CAAC,+BAAL,CAAqC,YAAY,CAAC,IAAlD,EAAwD,KAAxD,EAA+D,MAA/D;;AACA,MAAA,KAAI,CAAC,+BAAL,CAAqC,YAAY,CAAC,GAAlD,EAAuD,KAAvD,EAA8D,MAA9D;;AACA,MAAA,KAAI,CAAC,+BAAL,CAAqC,YAAY,CAAC,IAAlD,EAAwD,KAAxD,EAA+D,MAA/D;;AACA,MAAA,KAAI,CAAC,+BAAL,CAAqC,YAAY,CAAC,QAAlD,EAA4D,KAA5D,EAAmE,MAAnE;AACH,KALO;;AAOA,IAAA,KAAA,CAAA,+BAAA,GAAkC,UAAC,YAAD,EAA6B,KAA7B,EAA4C,MAA5C,EAA0D;AACxF,UAAA,IAAI,GAAK,KAAI,CAAC,YAAL,CAAkB,YAAlB,EAAL,IAAJ;;AACR,UAAI,IAAI,IAAI,IAAZ,EAAkB;AACd,QAAA,IAAI,CAAC,KAAL,CAAW,KAAX,GAAsB,KAAK,GAAA,IAA3B;AACA,QAAA,IAAI,CAAC,KAAL,CAAW,MAAX,GAAuB,MAAM,GAAA,IAA7B;AACH;AACJ,KANO;;AAQA,IAAA,KAAA,CAAA,4BAAA,GAA+B,UACnC,YADmC,EAEnC,SAFmC,EAGnC,SAHmC,EAGjB;AAEV,UAAA,eAAe,GAAK,KAAI,CAAC,YAAL,CAAkB,YAAlB,EAAL,eAAf;AACR,UAAM,YAAY,GAAG,SAAS,IAAI,IAAb,GAAoB,SAApB,GAAgC,KAAI,CAAC,KAAL,CAAW,eAAX,CAA2B,SAA3B,CAArD;;AACA,UAAI,eAAe,IAAI,IAAvB,EAA6B;AACzB,QAAA,eAAe,CAAC,SAAD,CAAf,GAA6B,YAA7B;AACH;AACJ,KAVO;;AAYA,IAAA,KAAA,CAAA,wBAAA,GAA2B,UAAC,SAAD,EAAwC,MAAxC,EAAsD;AACrF,MAAA,KAAI,CAAC,KAAL,CAAW,eAAX,CAA2B,SAA3B,EAAsC,MAAtC;;AACA,UAAM,qBAAqB,GAAG,SAAS,KAAK,YAAd,GAA6B,YAAY,CAAC,GAA1C,GAAgD,YAAY,CAAC,IAA3F;;AACA,MAAA,KAAI,CAAC,4BAAL,CAAkC,qBAAlC,EAAyD,SAAzD;AACH,KAJO,CAhjByD,CAG7D;AACA;AACA;;;AACA,IAAA,KAAI,CAAC,iCAAL,GAAyC,SAAS,CAAC,0BAAV,CAAqC,KAAI,CAAC,wBAA1C,CAAzC;AACA,IAAA,KAAI,CAAC,oBAAL,GAA4B,SAAS,CAAC,0BAAV,CAAqC,KAAI,CAAC,WAA1C,CAA5B;AAEA,IAAA,KAAI,CAAC,KAAL,GAAa,IAAI,uBAAJ,EAAb;;AACH;AAED;;AAEG;;;AACI,EAAA,kBAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UAAwB,UAAxB,EAA4C,SAA5C,EAA6D;AACjD,QAAA,eAAe,GAAK,KAAK,YAAL,CAAkB,YAAY,CAAC,IAA/B,EAAL,eAAf;AAER,SAAK,0CAAL,GAAkD,KAAlD,CAHyD,CAKzD;;AACA,IAAA,eAAe,CAAC,UAAhB,GAA6B,UAA7B;AACA,IAAA,eAAe,CAAC,SAAhB,GAA4B,SAA5B;AAEA,SAAK,iBAAL;AACH,GAVM;AAYP;;;;;;;;AAQG;;;AACI,EAAA,kBAAA,CAAA,SAAA,CAAA,wBAAA,GAAP,YAAA;AACI,SAAK,iBAAL;AACH,GAFM;;AAIA,EAAA,kBAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,YAAA;AACI,SAAK,QAAL;AACA,SAAK,iBAAL;AACH,GAHM;;AAKA,EAAA,kBAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,UAA0B,SAA1B,EAA6D;AACzD;AACA;AACA,QACI,CAAC,SAAS,CAAC,kBAAV,CAA6B,KAAK,KAAlC,EAAyC,SAAzC,EAAoD;AACjD,MAAA,OAAO,EAAE;AADwC,KAApD,CADL,EAIE;AACE,WAAK,QAAL;AACA,WAAK,iBAAL;AACH;AACJ,GAXM;;AAaA,EAAA,kBAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACU,QAAA,EAAA,GAA6D,KAAK,KAAlE;AAAA,QAAE,IAAI,GAAA,EAAA,CAAA,IAAN;AAAA,QAAQ,eAAe,GAAA,EAAA,CAAA,eAAvB;AAAA,QAAyB,YAAY,GAAA,EAAA,CAAA,YAArC;AAAA,QAAuC,iBAAiB,GAAA,EAAA,CAAA,iBAAxD,CADV,CAGI;AACA;;AACA,QAAM,oBAAoB,GAAG,iBAAiB,GACxC,KAAK,iCADmC,GAExC,KAAK,wBAFX;AAGA,QAAM,OAAO,GAAG,iBAAiB,GAAG,KAAK,oBAAR,GAA+B,KAAK,WAArE;AAEA,QAAM,SAAS,GAAG;AACd,MAAA,YAAY,EAAA,YADE;AAEd,MAAA,eAAe,EAAA,eAFD;AAGd,MAAA,IAAI,EAAA,IAHU;AAId,MAAA,OAAO,EAAA;AAJO,KAAlB;AAOA,QAAM,yBAAyB,GAAG,KAAK,yBAAL,EAAlC;AACA,QAAM,iBAAiB,GAAG,yBAAyB,GAC/C,KAAA,CAAA,aAAA,CAAC,aAAD,EAAc,QAAA,CAAA,EAAA,EACN,SADM,EACG;AACb,MAAA,WAAW,EAAE,KAAK,mBAAL,CAAyB,YAAY,CAAC,IAAtC,EAA4C,QAD5C;AAEb,MAAA,YAAY,EAAE,YAAY,CAAC,IAFd;AAGb,MAAA,wBAAwB,EAAE,KAAK,8BAHlB;AAIb,MAAA,YAAY,EAAE,KAAK,sBAJN;AAKb,MAAA,qBAAqB,EAAE,KAAK,2BALf;AAMb,MAAA,kBAAkB,EAAE,KAAK,mBAAL,CAAyB,YAAY,CAAC,IAAtC,EAA4C;AANnD,KADH,CAAd,CAD+C,GAU/C,SAVJ;AAWA,QAAM,oBAAoB,GAAG,yBAAyB,GAClD,KAAA,CAAA,aAAA,CAAC,aAAD,EAAc,QAAA,CAAA,EAAA,EACN,SADM,EACG;AACb,MAAA,WAAW,EAAE,KAAK,mBAAL,CAAyB,YAAY,CAAC,QAAtC,EAAgD,QADhD;AAEb,MAAA,YAAY,EAAE,YAAY,CAAC,QAFd;AAGb,MAAA,wBAAwB,EAAE,KAAK,iCAHlB;AAIb,MAAA,YAAY,EAAE,KAAK,yBAJN;AAKb,MAAA,qBAAqB,EAAE,KAAK,8BALf;AAMb,MAAA,kBAAkB,EAAE,KAAK,mBAAL,CAAyB,YAAY,CAAC,QAAtC,EAAgD;AANvD,KADH,CAAd,CADkD,GAUlD,SAVJ;AAYA,WACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,SAAS,EAAE,OAAO,CAAC;AAAxB,KAAA,EACI,KAAA,CAAA,aAAA,CAAC,aAAD,EAAc,QAAA,CAAA,EAAA,EACN,SADM,EACG;AACb,MAAA,OAAO,EAAE,KAAK,KAAL,CAAW,OADP;AAEb,MAAA,QAAQ,EAAE,oBAFG;AAGb,MAAA,WAAW,EAAE,KAAK,mBAAL,CAAyB,YAAY,CAAC,IAAtC,EAA4C,QAH5C;AAIb,MAAA,YAAY,EAAE,YAAY,CAAC,IAJd;AAKb,MAAA,wBAAwB,EAAE,KAAK,8BALlB;AAMb,MAAA,YAAY,EAAE,KAAK,sBANN;AAOb,MAAA,qBAAqB,EAAE,KAAK,2BAPf;AAQb,MAAA,kBAAkB,EAAE,KAAK,mBAAL,CAAyB,YAAY,CAAC,IAAtC,EAA4C;AARnD,KADH,CAAd,CADJ,EAYI,KAAA,CAAA,aAAA,CAAC,aAAD,EAAc,QAAA,CAAA,EAAA,EACN,SADM,EACG;AACb,MAAA,WAAW,EAAE,KAAK,mBAAL,CAAyB,YAAY,CAAC,GAAtC,EAA2C,QAD3C;AAEb,MAAA,YAAY,EAAE,YAAY,CAAC,GAFd;AAGb,MAAA,wBAAwB,EAAE,KAAK,6BAHlB;AAIb,MAAA,YAAY,EAAE,KAAK,qBAJN;AAKb,MAAA,qBAAqB,EAAE,KAAK,0BALf;AAMb,MAAA,kBAAkB,EAAE,KAAK,mBAAL,CAAyB,YAAY,CAAC,GAAtC,EAA2C;AANlD,KADH,CAAd,CAZJ,EAqBK,iBArBL,EAsBK,oBAtBL,CADJ;AA0BH,GAnEM,CA1GX,CA+KI;AACA;;;AAEQ,EAAA,kBAAA,CAAA,SAAA,CAAA,2BAAA,GAAR,UAAoC,YAApC,EAA8D;AAA9D,QAAA,KAAA,GAAA,IAAA;;AACI,QAAM,OAAO,GAAG,UAAC,GAAD,EAA4B,GAA5B,EAA2D;AACvE,MAAA,GAAG,CAAC,GAAD,CAAH,GAAW,UAAC,GAAD,EAAoB;AAAK,eAAC,KAAI,CAAC,YAAL,CAAkB,YAAlB,EAAgC,GAAhC,IAAD,GAAA;AAA4C,OAAhF;;AACA,aAAO,GAAP;AACH,KAHD;;AAIA,QAAM,WAAW,GAAsC,CACnD,cADmD,EAEnD,MAFmD,EAGnD,UAHmD,EAInD,WAJmD,EAKnD,iBALmD,CAAvD;AAOA,WAAO,WAAW,CAAC,MAAZ,CAAmB,OAAnB,EAA4B,EAA5B,CAAP;AACH,GAbO,CAlLZ,CAkdI;AACA;;;AAEQ,EAAA,kBAAA,CAAA,SAAA,CAAA,QAAA,GAAR,YAAA;AACI,IAAA,MAAM,CAAC,KAAK,KAAL,CAAW,WAAZ,EAAyB,KAAK,YAAL,CAAkB,YAAY,CAAC,IAA/B,EAAqC,QAA9D,CAAN;AACA,IAAA,MAAM,CAAC,KAAK,KAAL,CAAW,YAAZ,EAA0B,KAAK,YAAL,CAAkB,YAAY,CAAC,IAA/B,EAAqC,SAA/D,CAAN;AACA,IAAA,MAAM,CAAC,KAAK,KAAL,CAAW,eAAZ,EAA6B,KAAK,YAAL,CAAkB,YAAY,CAAC,IAA/B,EAAqC,YAAlE,CAAN;AACA,IAAA,MAAM,CAAC,KAAK,KAAL,CAAW,kBAAZ,EAAgC,KAAK,YAAL,CAAkB,YAAY,CAAC,IAA/B,EAAqC,eAArE,CAAN;AACH,GALO,CArdZ,CAsmBI;AACA;AACA;;;AACQ,EAAA,kBAAA,CAAA,SAAA,CAAA,+BAAA,GAAR,UAAwC,YAAxC,EAA6D;AACzD,QAAM,mBAAmB,GAAG,KAAK,YAAL,CAAkB,YAAY,CAAC,IAA/B,EAAqC,eAAjE;;AACA,QAAI,YAAJ,EAAkB;AACd,WAAK,KAAL,CAAW,6BAAX,CAAyC,mBAAmB,CAAC,WAA7D;AACA,aAAO,KAAK,KAAL,CAAW,6BAAX,EAAP;AACH,KAHD,MAGO;AACH,WAAK,KAAL,CAAW,8BAAX,CAA0C,mBAAmB,CAAC,YAA9D;AACA,aAAO,KAAK,KAAL,CAAW,8BAAX,EAAP;AACH;AACJ,GATO;;AAWA,EAAA,kBAAA,CAAA,SAAA,CAAA,wCAAA,GAAR,UAAiD,MAAjD,EAA+D;AAC3D,WAAO,MAAM,IAAI,iBAAV,GAA8B,4BAA9B,GAA6D,MAApE;AACH,GAFO,CApnBZ,CAwnBI;AACA;;AAEA;;;AAGG;;;AACK,EAAA,kBAAA,CAAA,SAAA,CAAA,4BAAA,GAAR,UAAqC,SAArC,EAAkE;AACxD,QAAA,EAAA,GAA4C,KAAK,KAAjD;AAAA,QAAE,IAAI,GAAA,EAAA,CAAA,IAAN;AAAA,QAAQ,gBAAgB,GAAA,EAAA,CAAA,gBAAxB;AAAA,QAA0B,aAAa,GAAA,EAAA,CAAA,aAAvC;AAEN,QAAM,SAAS,GAAG,SAAS,KAAK,OAAd,GAAwB,gBAAxB,GAA2C,aAA7D;AACA,QAAM,QAAQ,GAAG,SAAS,KAAK,OAAd,GAAwB,IAAI,CAAC,oBAA7B,GAAoD,IAAI,CAAC,qBAA1E,CAJ8D,CAM9D;;AACA,WAAO,SAAS,GAAG,CAAZ,GAAgB,QAAQ,CAAC,SAAS,GAAG,CAAb,CAAxB,GAA0C,iBAAjD;AACH,GARO;AAUR;;;AAGG;;;AACK,EAAA,kBAAA,CAAA,SAAA,CAAA,4BAAA,GAAR,YAAA;AACI;AACA,QAAM,aAAa,GAAG,KAAK,YAAL,CAAkB,YAAY,CAAC,IAA/B,EAAqC,SAA3D;;AAEA,QAAI,aAAa,IAAI,IAArB,EAA2B;AACvB,aAAO,CAAP;AACH,KAFD,MAEO;AACH;AACA,MAAA,aAAa,CAAC,KAAd,CAAoB,KAApB,GAA4B,MAA5B;AAEA,UAAM,qBAAqB,GAAG,aAAa,CAAC,WAA5C;AACA,aAAO,qBAAP;AACH;AACJ,GAbO;AAeR;;;AAGG;;;AACK,EAAA,kBAAA,CAAA,SAAA,CAAA,gCAAA,GAAR,YAAA;AACI;AACA;AACA;AACA,QAAM,gBAAgB,GAAG,KAAK,YAAL,CAAkB,YAAY,CAAC,IAA/B,EAAqC,YAA9D;AACA,WAAO,gBAAgB,IAAI,IAApB,GAA2B,CAA3B,GAA+B,gBAAgB,CAAC,YAAvD;AACH,GANO;;AAQA,EAAA,kBAAA,CAAA,SAAA,CAAA,yBAAA,GAAR,UAAkC,KAAlC,EAA8E;AAA5C,QAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,KAAA,GAAkC,KAAK,KAAvC;AAA4C;;AAClE,QAAA,eAAe,GAAuB,KAAK,CAA5B,eAAf;AAAA,QAAiB,gBAAgB,GAAK,KAAK,CAAV,gBAAjC;AACR,WAAO,eAAe,IAAK,gBAAgB,IAAI,IAApB,IAA4B,gBAAgB,GAAG,CAA1E;AACH,GAHO,CAxqBZ,CA6qBI;;;AAEQ,EAAA,kBAAA,CAAA,SAAA,CAAA,oBAAA,GAAR,UAA6B,cAA7B,EAAuD,YAAvD,EAAiF;AAC7E,QAAM,gBAAgB,GAAG,YAAY,KAAK,YAAY,CAAC,IAA9B,IAAsC,YAAY,KAAK,YAAY,CAAC,QAA7F;AACA,QAAM,YAAY,GAAG,gBAAgB,GAAG,CAAH,GAAO,KAAK,KAAL,CAAW,eAAX,CAA2B,YAA3B,CAA5C;AACA,QAAM,cAAc,GAAG,KAAK,KAAL,CAAW,iBAAX,EAAvB;AAEA,QAAM,sBAAsB,GACxB,cAAc,IAAI,IAAlB,GACM,cAAc,CAAC,GAAf,CAAmB,UAAA,aAAA,EAAa;AAAI,aAAA,aAAa,GAAG,YAAhB,GAAA,cAAA;AAA6C,KAAjF,CADN,GAEM,cAHV;AAKA,WAAO,sBAAP;AACH,GAXO;;AAaA,EAAA,kBAAA,CAAA,SAAA,CAAA,sBAAA,GAAR,UAA+B,gBAA/B,EAA2D,YAA3D,EAAqF;AACjF,QAAM,gBAAgB,GAAG,YAAY,KAAK,YAAY,CAAC,GAA9B,IAAqC,YAAY,KAAK,YAAY,CAAC,QAA5F;AACA,QAAM,YAAY,GAAG,gBAAgB,GAAG,CAAH,GAAO,KAAK,KAAL,CAAW,eAAX,CAA2B,WAA3B,CAA5C;AACA,QAAM,kBAAkB,GAAG,KAAK,KAAL,CAAW,qBAAX,EAA3B;AAEA,QAAM,wBAAwB,GAC1B,gBAAgB,IAAI,IAApB,GACM,gBAAgB,CAAC,GAAjB,CAAqB,UAAA,eAAA,EAAe;AAAI,aAAA,eAAe,GAAG,YAAlB,GAAA,kBAAA;AAAmD,KAA3F,CADN,GAEM,gBAHV;AAKA,WAAO,wBAAP;AACH,GAXO,CA5rBZ,CACI;AACA;;;AACc,EAAA,kBAAA,CAAA,YAAA,GAAkD;AAC5D,IAAA,0BAA0B,EAAE,SADgC;AAE5D,IAAA,eAAe,EAAE,IAF2C;AAG5D,IAAA,0BAA0B,EAAE,KAHgC;AAI5D,IAAA,wBAAwB,EAAE,KAJkC;AAK5D,IAAA,iBAAiB,EAAE,IALyC;AAM5D,IAAA,aAAa,EAAE;AAN6C,GAAlD;AAHL,EAAA,kBAAkB,GAAA,UAAA,CAAA,CAD9B,QAC8B,CAAA,EAAlB,kBAAkB,CAAlB;AAwsBb,SAAA,kBAAA;AAAC,CAxsBD,CAAwC,kBAAxC,CAAA;;SAAa,kB","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __decorate, __extends } from \"tslib\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { AbstractComponent2, setRef, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport * as Classes from \"../common/classes\";\nimport * as ScrollUtils from \"../common/internal/scrollUtils\";\nimport { Utils } from \"../common/utils\";\nimport { QuadrantType, TableQuadrant } from \"./tableQuadrant\";\nimport { TableQuadrantStackCache } from \"./tableQuadrantStackCache\";\n// when there are no column headers, the header and menu element will\n// confusingly collapse to zero height unless we establish this default.\nvar DEFAULT_COLUMN_HEADER_HEIGHT = 30;\n// the debounce delay for updating the view on scroll. elements will be resized\n// and rejiggered once scroll has ceased for at least this long, but not before.\nvar DEFAULT_VIEW_SYNC_DELAY = 500;\n// if there are no frozen rows or columns, we still want the quadrant to be 1px\n// bigger to reveal the header border. this border leaks into the cell grid to\n// ensure that selection overlay borders (e.g.) will be perfectly flush with it.\nvar QUADRANT_MIN_SIZE = 1;\n// a list of props that trigger layout changes. when these props change,\n// quadrant views need to be explicitly resynchronized.\nvar SYNC_TRIGGER_PROP_KEYS = [\n    \"enableRowHeader\",\n    \"loadingOptions\",\n    \"numFrozenColumns\",\n    \"numFrozenRows\",\n    \"numColumns\",\n    \"numRows\",\n    \"enableColumnInteractionBar\",\n];\nvar TableQuadrantStack = /** @class */ (function (_super) {\n    __extends(TableQuadrantStack, _super);\n    // Public\n    // ======\n    function TableQuadrantStack(props, context) {\n        var _a, _b;\n        var _this = _super.call(this, props, context) || this;\n        // Instance variables\n        // ==================\n        _this.quadrantRefs = (_a = {},\n            _a[QuadrantType.MAIN] = {},\n            _a[QuadrantType.TOP] = {},\n            _a[QuadrantType.LEFT] = {},\n            _a[QuadrantType.TOP_LEFT] = {},\n            _a);\n        _this.quadrantRefHandlers = (_b = {},\n            _b[QuadrantType.MAIN] = _this.generateQuadrantRefHandlers(QuadrantType.MAIN),\n            _b[QuadrantType.TOP] = _this.generateQuadrantRefHandlers(QuadrantType.TOP),\n            _b[QuadrantType.LEFT] = _this.generateQuadrantRefHandlers(QuadrantType.LEFT),\n            _b[QuadrantType.TOP_LEFT] = _this.generateQuadrantRefHandlers(QuadrantType.TOP_LEFT),\n            _b);\n        // this flag helps us avoid redundant work in the MAIN quadrant's onScroll callback, if the\n        // callback was triggered from a manual scrollTop/scrollLeft update within an onWheel.\n        _this.wasMainQuadrantScrollTriggeredByWheelEvent = false;\n        // Quadrant-specific renderers\n        // ===========================\n        // Menu\n        _this.renderMainQuadrantMenu = function () {\n            var _a, _b;\n            return (_b = (_a = _this.props).menuRenderer) === null || _b === void 0 ? void 0 : _b.call(_a, _this.quadrantRefHandlers[QuadrantType.MAIN].menu);\n        };\n        _this.renderTopQuadrantMenu = function () {\n            var _a, _b;\n            return (_b = (_a = _this.props).menuRenderer) === null || _b === void 0 ? void 0 : _b.call(_a, _this.quadrantRefHandlers[QuadrantType.TOP].menu);\n        };\n        _this.renderLeftQuadrantMenu = function () {\n            var _a, _b;\n            return (_b = (_a = _this.props).menuRenderer) === null || _b === void 0 ? void 0 : _b.call(_a, _this.quadrantRefHandlers[QuadrantType.LEFT].menu);\n        };\n        _this.renderTopLeftQuadrantMenu = function () {\n            var _a, _b;\n            return (_b = (_a = _this.props).menuRenderer) === null || _b === void 0 ? void 0 : _b.call(_a, _this.quadrantRefHandlers[QuadrantType.TOP_LEFT].menu);\n        };\n        // Column header\n        _this.renderMainQuadrantColumnHeader = function (showFrozenColumnsOnly) {\n            var _a, _b;\n            var refHandler = _this.quadrantRefHandlers[QuadrantType.MAIN].columnHeader;\n            var resizeHandler = _this.handleColumnResizeGuideMain;\n            var reorderingHandler = _this.handleColumnsReordering;\n            return (_b = (_a = _this.props).columnHeaderCellRenderer) === null || _b === void 0 ? void 0 : _b.call(_a, refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly);\n        };\n        _this.renderTopQuadrantColumnHeader = function (showFrozenColumnsOnly) {\n            var _a, _b;\n            var refHandler = _this.quadrantRefHandlers[QuadrantType.TOP].columnHeader;\n            var resizeHandler = _this.handleColumnResizeGuideTop;\n            var reorderingHandler = _this.handleColumnsReordering;\n            return (_b = (_a = _this.props).columnHeaderCellRenderer) === null || _b === void 0 ? void 0 : _b.call(_a, refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly);\n        };\n        _this.renderLeftQuadrantColumnHeader = function (showFrozenColumnsOnly) {\n            var _a, _b;\n            var refHandler = _this.quadrantRefHandlers[QuadrantType.LEFT].columnHeader;\n            var resizeHandler = _this.handleColumnResizeGuideLeft;\n            var reorderingHandler = _this.handleColumnsReordering;\n            return (_b = (_a = _this.props).columnHeaderCellRenderer) === null || _b === void 0 ? void 0 : _b.call(_a, refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly);\n        };\n        _this.renderTopLeftQuadrantColumnHeader = function (showFrozenColumnsOnly) {\n            var _a, _b;\n            var refHandler = _this.quadrantRefHandlers[QuadrantType.TOP_LEFT].columnHeader;\n            var resizeHandler = _this.handleColumnResizeGuideTopLeft;\n            var reorderingHandler = _this.handleColumnsReordering;\n            return (_b = (_a = _this.props).columnHeaderCellRenderer) === null || _b === void 0 ? void 0 : _b.call(_a, refHandler, resizeHandler, reorderingHandler, showFrozenColumnsOnly);\n        };\n        // Row header\n        _this.renderMainQuadrantRowHeader = function (showFrozenRowsOnly) {\n            var _a, _b;\n            var refHandler = _this.quadrantRefHandlers[QuadrantType.MAIN].rowHeader;\n            var resizeHandler = _this.handleRowResizeGuideMain;\n            var reorderingHandler = _this.handleRowsReordering;\n            return (_b = (_a = _this.props).rowHeaderCellRenderer) === null || _b === void 0 ? void 0 : _b.call(_a, refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly);\n        };\n        _this.renderTopQuadrantRowHeader = function (showFrozenRowsOnly) {\n            var _a, _b;\n            var refHandler = _this.quadrantRefHandlers[QuadrantType.TOP].rowHeader;\n            var resizeHandler = _this.handleRowResizeGuideTop;\n            var reorderingHandler = _this.handleRowsReordering;\n            return (_b = (_a = _this.props).rowHeaderCellRenderer) === null || _b === void 0 ? void 0 : _b.call(_a, refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly);\n        };\n        _this.renderLeftQuadrantRowHeader = function (showFrozenRowsOnly) {\n            var _a, _b;\n            var refHandler = _this.quadrantRefHandlers[QuadrantType.LEFT].rowHeader;\n            var resizeHandler = _this.handleRowResizeGuideLeft;\n            var reorderingHandler = _this.handleRowsReordering;\n            return (_b = (_a = _this.props).rowHeaderCellRenderer) === null || _b === void 0 ? void 0 : _b.call(_a, refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly);\n        };\n        _this.renderTopLeftQuadrantRowHeader = function (showFrozenRowsOnly) {\n            var _a, _b;\n            var refHandler = _this.quadrantRefHandlers[QuadrantType.TOP_LEFT].rowHeader;\n            var resizeHandler = _this.handleRowResizeGuideTopLeft;\n            var reorderingHandler = _this.handleRowsReordering;\n            return (_b = (_a = _this.props).rowHeaderCellRenderer) === null || _b === void 0 ? void 0 : _b.call(_a, refHandler, resizeHandler, reorderingHandler, showFrozenRowsOnly);\n        };\n        // Event handlers\n        // ==============\n        // Scrolling\n        // ---------\n        _this.handleMainQuadrantScroll = function (event) {\n            var _a, _b;\n            if (_this.wasMainQuadrantScrollTriggeredByWheelEvent) {\n                _this.wasMainQuadrantScrollTriggeredByWheelEvent = false;\n                return;\n            }\n            // invoke onScroll - which may read current scroll position - before\n            // forcing a reflow with upcoming .scroll{Top,Left} setters.\n            (_b = (_a = _this.props).onScroll) === null || _b === void 0 ? void 0 : _b.call(_a, event);\n            // batch DOM reads here. note that onScroll events don't include deltas\n            // like onWheel events do, so we have to read from the DOM directly.\n            var mainScrollContainer = _this.quadrantRefs[QuadrantType.MAIN].scrollContainer;\n            var nextScrollLeft = mainScrollContainer.scrollLeft;\n            var nextScrollTop = mainScrollContainer.scrollTop;\n            // with the \"scroll\" event, scroll offsets are updated prior to the\n            // event's firing, so no explicit update needed.\n            _this.handleScrollOffsetChange(\"scrollLeft\", nextScrollLeft);\n            _this.handleScrollOffsetChange(\"scrollTop\", nextScrollTop);\n            // sync less important view stuff when scrolling/wheeling stops.\n            _this.syncQuadrantViewsDebounced();\n        };\n        _this.handleWheel = function (event) {\n            var _a, _b;\n            // again, let the listener read the current scroll position before we\n            // force a reflow by resizing or repositioning stuff.\n            (_b = (_a = _this.props).onScroll) === null || _b === void 0 ? void 0 : _b.call(_a, event);\n            // this helper performs DOM reads, so do them together before the writes below.\n            var nextScrollLeft = _this.getNextScrollOffset(\"horizontal\", event.deltaX);\n            var nextScrollTop = _this.getNextScrollOffset(\"vertical\", event.deltaY);\n            // update this flag before updating the main quadrant scroll offsets,\n            // since we need this set before onScroll fires.\n            if (nextScrollLeft != null || nextScrollTop != null) {\n                _this.wasMainQuadrantScrollTriggeredByWheelEvent = true;\n            }\n            // manually update the affected quadrant's scroll position to make sure\n            // it stays perfectly in sync with dependent quadrants in each frame.\n            // note: these DOM writes are batched together after the reads above.\n            _this.quadrantRefs[QuadrantType.MAIN].scrollContainer.scrollLeft = nextScrollLeft;\n            _this.quadrantRefs[QuadrantType.MAIN].scrollContainer.scrollTop = nextScrollTop;\n            _this.handleScrollOffsetChange(\"scrollLeft\", nextScrollLeft);\n            _this.handleScrollOffsetChange(\"scrollTop\", nextScrollTop);\n            // sync less important view stuff when scrolling/wheeling stops.\n            _this.syncQuadrantViewsDebounced();\n        };\n        _this.getNextScrollOffset = function (direction, delta) {\n            var _a = _this.props, grid = _a.grid, isHorizontalScrollDisabled = _a.isHorizontalScrollDisabled, isVerticalScrollDisabled = _a.isVerticalScrollDisabled;\n            var isHorizontal = direction === \"horizontal\";\n            var scrollKey = isHorizontal ? \"scrollLeft\" : \"scrollTop\";\n            var isScrollDisabled = isHorizontal ? isHorizontalScrollDisabled : isVerticalScrollDisabled;\n            if (isScrollDisabled) {\n                return undefined;\n            }\n            // measure client size on the first event of the current wheel gesture,\n            // then grab cached values on successive events to eliminate DOM reads.\n            // requires clearing the cached values in the debounced view-update at\n            // the end of the wheel event.\n            // ASSUMPTION: the client size won't change during the wheel event.\n            var clientSize = isHorizontal\n                ? _this.cache.getScrollContainerClientWidth()\n                : _this.cache.getScrollContainerClientHeight();\n            if (clientSize == null) {\n                // should trigger only on the first scroll of the wheel gesture.\n                // will save client width and height sizes in the cache.\n                clientSize = _this.updateScrollContainerClientSize(isHorizontal);\n            }\n            // by now, the client width and height will have been saved in cache, so\n            // they can't be nully anymore. also, events can only happen after\n            // mount, so we're guaranteed to have measured the header sizes in\n            // syncQuadrantViews() by now too, as it's invoked on mount.\n            var containerSize = isHorizontal\n                ? _this.cache.getScrollContainerClientWidth() - _this.cache.getRowHeaderWidth()\n                : _this.cache.getScrollContainerClientHeight() - _this.cache.getColumnHeaderHeight();\n            var gridSize = isHorizontal ? grid.getWidth() : grid.getHeight();\n            var maxScrollOffset = Math.max(0, gridSize - containerSize);\n            var currScrollOffset = _this.cache.getScrollOffset(scrollKey);\n            var nextScrollOffset = CoreUtils.clamp(currScrollOffset + delta, 0, maxScrollOffset);\n            return nextScrollOffset;\n        };\n        // Resizing\n        // --------\n        // Columns\n        _this.handleColumnResizeGuideMain = function (verticalGuides) {\n            _this.invokeColumnResizeHandler(verticalGuides, QuadrantType.MAIN);\n        };\n        _this.handleColumnResizeGuideTop = function (verticalGuides) {\n            _this.invokeColumnResizeHandler(verticalGuides, QuadrantType.TOP);\n        };\n        _this.handleColumnResizeGuideLeft = function (verticalGuides) {\n            _this.invokeColumnResizeHandler(verticalGuides, QuadrantType.LEFT);\n        };\n        _this.handleColumnResizeGuideTopLeft = function (verticalGuides) {\n            _this.invokeColumnResizeHandler(verticalGuides, QuadrantType.TOP_LEFT);\n        };\n        _this.invokeColumnResizeHandler = function (verticalGuides, quadrantType) {\n            var _a, _b;\n            var adjustedGuides = _this.adjustVerticalGuides(verticalGuides, quadrantType);\n            (_b = (_a = _this.props).handleColumnResizeGuide) === null || _b === void 0 ? void 0 : _b.call(_a, adjustedGuides);\n        };\n        // Rows\n        _this.handleRowResizeGuideMain = function (horizontalGuides) {\n            _this.invokeRowResizeHandler(horizontalGuides, QuadrantType.MAIN);\n        };\n        _this.handleRowResizeGuideTop = function (horizontalGuides) {\n            _this.invokeRowResizeHandler(horizontalGuides, QuadrantType.TOP);\n        };\n        _this.handleRowResizeGuideLeft = function (horizontalGuides) {\n            _this.invokeRowResizeHandler(horizontalGuides, QuadrantType.LEFT);\n        };\n        _this.handleRowResizeGuideTopLeft = function (horizontalGuides) {\n            _this.invokeRowResizeHandler(horizontalGuides, QuadrantType.TOP_LEFT);\n        };\n        _this.invokeRowResizeHandler = function (horizontalGuides, quadrantType) {\n            var _a, _b;\n            var adjustedGuides = _this.adjustHorizontalGuides(horizontalGuides, quadrantType);\n            (_b = (_a = _this.props).handleRowResizeGuide) === null || _b === void 0 ? void 0 : _b.call(_a, adjustedGuides);\n        };\n        // Reordering\n        // ----------\n        // Columns\n        _this.handleColumnsReordering = function (oldIndex, newIndex, length) {\n            var _a, _b;\n            var guideIndex = Utils.reorderedIndexToGuideIndex(oldIndex, newIndex, length);\n            var leftOffset = _this.props.grid.getCumulativeWidthBefore(guideIndex);\n            var quadrantType = guideIndex <= _this.props.numFrozenColumns ? QuadrantType.TOP_LEFT : QuadrantType.TOP;\n            var verticalGuides = _this.adjustVerticalGuides([leftOffset], quadrantType);\n            (_b = (_a = _this.props).handleColumnsReordering) === null || _b === void 0 ? void 0 : _b.call(_a, verticalGuides);\n        };\n        // Rows\n        _this.handleRowsReordering = function (oldIndex, newIndex, length) {\n            var _a, _b;\n            var guideIndex = Utils.reorderedIndexToGuideIndex(oldIndex, newIndex, length);\n            var topOffset = _this.props.grid.getCumulativeHeightBefore(guideIndex);\n            var quadrantType = guideIndex <= _this.props.numFrozenRows ? QuadrantType.TOP_LEFT : QuadrantType.LEFT;\n            var horizontalGuides = _this.adjustHorizontalGuides([topOffset], quadrantType);\n            (_b = (_a = _this.props).handleRowsReordering) === null || _b === void 0 ? void 0 : _b.call(_a, horizontalGuides);\n        };\n        // Size syncing\n        // ============\n        _this.syncQuadrantViewsDebounced = function () {\n            var viewSyncDelay = _this.props.viewSyncDelay;\n            if (viewSyncDelay < 0) {\n                // update synchronously\n                _this.syncQuadrantViews();\n            }\n            else {\n                // update asynchronously after a debounced delay\n                clearInterval(_this.debouncedViewSyncInterval);\n                _this.debouncedViewSyncInterval = window.setTimeout(_this.syncQuadrantViews, viewSyncDelay);\n            }\n        };\n        _this.syncQuadrantViews = function () {\n            var mainRefs = _this.quadrantRefs[QuadrantType.MAIN];\n            var mainScrollContainer = mainRefs.scrollContainer;\n            //\n            // Reads (batched to avoid DOM thrashing)\n            //\n            var rowHeaderWidth = _this.measureDesiredRowHeaderWidth();\n            var columnHeaderHeight = _this.measureDesiredColumnHeaderHeight();\n            var leftQuadrantGridWidth = _this.getSecondaryQuadrantGridSize(\"width\");\n            var topQuadrantGridHeight = _this.getSecondaryQuadrantGridSize(\"height\");\n            var leftQuadrantWidth = rowHeaderWidth + leftQuadrantGridWidth;\n            var topQuadrantHeight = columnHeaderHeight + topQuadrantGridHeight;\n            var rightScrollBarWidth = ScrollUtils.measureScrollBarThickness(mainScrollContainer, \"vertical\");\n            var bottomScrollBarHeight = ScrollUtils.measureScrollBarThickness(mainScrollContainer, \"horizontal\");\n            // ensure neither of these measurements confusingly clamps to zero height.\n            var adjustedColumnHeaderHeight = _this.maybeIncreaseToDefaultColumnHeaderHeight(columnHeaderHeight);\n            var adjustedTopQuadrantHeight = _this.maybeIncreaseToDefaultColumnHeaderHeight(topQuadrantHeight);\n            // Update cache: let's read now whatever values we might need later.\n            // prevents unnecessary reflows in the future.\n            _this.cache.setRowHeaderWidth(rowHeaderWidth);\n            _this.cache.setColumnHeaderHeight(columnHeaderHeight);\n            // ...however, we also clear the cached client size, so we can read it\n            // again when a new scroll begins. not safe to assume this won't change.\n            // TODO: maybe use the ResizeSensor?\n            _this.cache.setScrollContainerClientWidth(undefined);\n            _this.cache.setScrollContainerClientHeight(undefined);\n            //\n            // Writes (batched to avoid DOM thrashing)\n            //\n            // Quadrant-size sync'ing: make the quadrants precisely as big as they\n            // need to be to fit their variable-sized headers and/or frozen areas.\n            _this.maybesSetQuadrantRowHeaderSizes(rowHeaderWidth);\n            _this.maybeSetQuadrantMenuElementSizes(rowHeaderWidth, adjustedColumnHeaderHeight);\n            _this.maybeSetQuadrantSizes(leftQuadrantWidth, adjustedTopQuadrantHeight);\n            // Scrollbar clearance: tweak the quadrant bottom/right offsets to\n            // reveal the MAIN-quadrant scrollbars if they're visible.\n            _this.maybeSetQuadrantPositionOffset(QuadrantType.TOP, \"right\", rightScrollBarWidth);\n            _this.maybeSetQuadrantPositionOffset(QuadrantType.LEFT, \"bottom\", bottomScrollBarHeight);\n            // Scroll syncing: sync the scroll offsets of quadrants that may or may\n            // not have been around prior to this update.\n            _this.maybeSetQuadrantScrollOffset(QuadrantType.LEFT, \"scrollTop\");\n            _this.maybeSetQuadrantScrollOffset(QuadrantType.TOP, \"scrollLeft\");\n        };\n        _this.maybeSetQuadrantSizes = function (width, height) {\n            _this.maybesSetQuadrantSize(QuadrantType.LEFT, \"width\", width);\n            _this.maybesSetQuadrantSize(QuadrantType.TOP, \"height\", height);\n            _this.maybesSetQuadrantSize(QuadrantType.TOP_LEFT, \"width\", width);\n            _this.maybesSetQuadrantSize(QuadrantType.TOP_LEFT, \"height\", height);\n        };\n        _this.maybesSetQuadrantSize = function (quadrantType, dimension, value) {\n            var quadrant = _this.quadrantRefs[quadrantType].quadrant;\n            if (quadrant != null) {\n                quadrant.style[dimension] = value + \"px\";\n            }\n        };\n        _this.maybeSetQuadrantPositionOffset = function (quadrantType, side, value) {\n            var quadrant = _this.quadrantRefs[quadrantType].quadrant;\n            if (quadrant != null) {\n                quadrant.style[side] = value + \"px\";\n            }\n        };\n        _this.maybesSetQuadrantRowHeaderSizes = function (width) {\n            _this.maybeSetQuadrantRowHeaderSize(QuadrantType.MAIN, width);\n            _this.maybeSetQuadrantRowHeaderSize(QuadrantType.TOP, width);\n            _this.maybeSetQuadrantRowHeaderSize(QuadrantType.LEFT, width);\n            _this.maybeSetQuadrantRowHeaderSize(QuadrantType.TOP_LEFT, width);\n        };\n        _this.maybeSetQuadrantRowHeaderSize = function (quadrantType, width) {\n            var rowHeader = _this.quadrantRefs[quadrantType].rowHeader;\n            if (rowHeader != null) {\n                rowHeader.style.width = width + \"px\";\n            }\n        };\n        _this.maybeSetQuadrantMenuElementSizes = function (width, height) {\n            _this.maybeSetQuadrantMenuElementSize(QuadrantType.MAIN, width, height);\n            _this.maybeSetQuadrantMenuElementSize(QuadrantType.TOP, width, height);\n            _this.maybeSetQuadrantMenuElementSize(QuadrantType.LEFT, width, height);\n            _this.maybeSetQuadrantMenuElementSize(QuadrantType.TOP_LEFT, width, height);\n        };\n        _this.maybeSetQuadrantMenuElementSize = function (quadrantType, width, height) {\n            var menu = _this.quadrantRefs[quadrantType].menu;\n            if (menu != null) {\n                menu.style.width = width + \"px\";\n                menu.style.height = height + \"px\";\n            }\n        };\n        _this.maybeSetQuadrantScrollOffset = function (quadrantType, scrollKey, newOffset) {\n            var scrollContainer = _this.quadrantRefs[quadrantType].scrollContainer;\n            var scrollOffset = newOffset != null ? newOffset : _this.cache.getScrollOffset(scrollKey);\n            if (scrollContainer != null) {\n                scrollContainer[scrollKey] = scrollOffset;\n            }\n        };\n        _this.handleScrollOffsetChange = function (scrollKey, offset) {\n            _this.cache.setScrollOffset(scrollKey, offset);\n            var dependentQuadrantType = scrollKey === \"scrollLeft\" ? QuadrantType.TOP : QuadrantType.LEFT;\n            _this.maybeSetQuadrantScrollOffset(dependentQuadrantType, scrollKey);\n        };\n        // callbacks trigger too frequently unless we throttle scroll and wheel\n        // events. declare these functions on the component instance since\n        // they're stateful.\n        _this.throttledHandleMainQuadrantScroll = CoreUtils.throttleReactEventCallback(_this.handleMainQuadrantScroll);\n        _this.throttledHandleWheel = CoreUtils.throttleReactEventCallback(_this.handleWheel);\n        _this.cache = new TableQuadrantStackCache();\n        return _this;\n    }\n    /**\n     * Scroll the main quadrant to the specified scroll offset, keeping all other quadrants in sync.\n     */\n    TableQuadrantStack.prototype.scrollToPosition = function (scrollLeft, scrollTop) {\n        var scrollContainer = this.quadrantRefs[QuadrantType.MAIN].scrollContainer;\n        this.wasMainQuadrantScrollTriggeredByWheelEvent = false;\n        // this will trigger the main quadrant's scroll callback below\n        scrollContainer.scrollLeft = scrollLeft;\n        scrollContainer.scrollTop = scrollTop;\n        this.syncQuadrantViews();\n    };\n    /**\n     * Synchronizes quadrant sizes and scroll offsets based on the current\n     * column, row, and header sizes. Useful for correcting quadrant sizes after\n     * explicitly resizing columns and rows, for instance.\n     *\n     * Invoking this method imperatively is cheaper than providing columnWidths\n     * or rowHeights array props to TableQuadrantStack and forcing it to run\n     * expensive array diffs upon every update.\n     */\n    TableQuadrantStack.prototype.synchronizeQuadrantViews = function () {\n        this.syncQuadrantViews();\n    };\n    TableQuadrantStack.prototype.componentDidMount = function () {\n        this.emitRefs();\n        this.syncQuadrantViews();\n    };\n    TableQuadrantStack.prototype.componentDidUpdate = function (prevProps) {\n        // sync'ing quadrant views triggers expensive reflows, so we only call\n        // it when layout-affecting props change.\n        if (!CoreUtils.shallowCompareKeys(this.props, prevProps, {\n            include: SYNC_TRIGGER_PROP_KEYS,\n        })) {\n            this.emitRefs();\n            this.syncQuadrantViews();\n        }\n    };\n    TableQuadrantStack.prototype.render = function () {\n        var _a = this.props, grid = _a.grid, enableRowHeader = _a.enableRowHeader, bodyRenderer = _a.bodyRenderer, throttleScrolling = _a.throttleScrolling;\n        // use the more generic \"scroll\" event for the main quadrant to capture\n        // *both* scrollbar interactions and trackpad/mousewheel gestures.\n        var onMainQuadrantScroll = throttleScrolling\n            ? this.throttledHandleMainQuadrantScroll\n            : this.handleMainQuadrantScroll;\n        var onWheel = throttleScrolling ? this.throttledHandleWheel : this.handleWheel;\n        var baseProps = {\n            bodyRenderer: bodyRenderer,\n            enableRowHeader: enableRowHeader,\n            grid: grid,\n            onWheel: onWheel,\n        };\n        var shouldRenderLeftQuadrants = this.shouldRenderLeftQuadrants();\n        var maybeLeftQuadrant = shouldRenderLeftQuadrants ? (React.createElement(TableQuadrant, __assign({}, baseProps, { quadrantRef: this.quadrantRefHandlers[QuadrantType.LEFT].quadrant, quadrantType: QuadrantType.LEFT, columnHeaderCellRenderer: this.renderLeftQuadrantColumnHeader, menuRenderer: this.renderLeftQuadrantMenu, rowHeaderCellRenderer: this.renderLeftQuadrantRowHeader, scrollContainerRef: this.quadrantRefHandlers[QuadrantType.LEFT].scrollContainer }))) : undefined;\n        var maybeTopLeftQuadrant = shouldRenderLeftQuadrants ? (React.createElement(TableQuadrant, __assign({}, baseProps, { quadrantRef: this.quadrantRefHandlers[QuadrantType.TOP_LEFT].quadrant, quadrantType: QuadrantType.TOP_LEFT, columnHeaderCellRenderer: this.renderTopLeftQuadrantColumnHeader, menuRenderer: this.renderTopLeftQuadrantMenu, rowHeaderCellRenderer: this.renderTopLeftQuadrantRowHeader, scrollContainerRef: this.quadrantRefHandlers[QuadrantType.TOP_LEFT].scrollContainer }))) : undefined;\n        return (React.createElement(\"div\", { className: Classes.TABLE_QUADRANT_STACK },\n            React.createElement(TableQuadrant, __assign({}, baseProps, { bodyRef: this.props.bodyRef, onScroll: onMainQuadrantScroll, quadrantRef: this.quadrantRefHandlers[QuadrantType.MAIN].quadrant, quadrantType: QuadrantType.MAIN, columnHeaderCellRenderer: this.renderMainQuadrantColumnHeader, menuRenderer: this.renderMainQuadrantMenu, rowHeaderCellRenderer: this.renderMainQuadrantRowHeader, scrollContainerRef: this.quadrantRefHandlers[QuadrantType.MAIN].scrollContainer })),\n            React.createElement(TableQuadrant, __assign({}, baseProps, { quadrantRef: this.quadrantRefHandlers[QuadrantType.TOP].quadrant, quadrantType: QuadrantType.TOP, columnHeaderCellRenderer: this.renderTopQuadrantColumnHeader, menuRenderer: this.renderTopQuadrantMenu, rowHeaderCellRenderer: this.renderTopQuadrantRowHeader, scrollContainerRef: this.quadrantRefHandlers[QuadrantType.TOP].scrollContainer })),\n            maybeLeftQuadrant,\n            maybeTopLeftQuadrant));\n    };\n    // Ref handlers\n    // ============\n    TableQuadrantStack.prototype.generateQuadrantRefHandlers = function (quadrantType) {\n        var _this = this;\n        var reducer = function (agg, key) {\n            agg[key] = function (ref) { return (_this.quadrantRefs[quadrantType][key] = ref); };\n            return agg;\n        };\n        var refHandlers = [\n            \"columnHeader\",\n            \"menu\",\n            \"quadrant\",\n            \"rowHeader\",\n            \"scrollContainer\",\n        ];\n        return refHandlers.reduce(reducer, {});\n    };\n    // Emitters\n    // ========\n    TableQuadrantStack.prototype.emitRefs = function () {\n        setRef(this.props.quadrantRef, this.quadrantRefs[QuadrantType.MAIN].quadrant);\n        setRef(this.props.rowHeaderRef, this.quadrantRefs[QuadrantType.MAIN].rowHeader);\n        setRef(this.props.columnHeaderRef, this.quadrantRefs[QuadrantType.MAIN].columnHeader);\n        setRef(this.props.scrollContainerRef, this.quadrantRefs[QuadrantType.MAIN].scrollContainer);\n    };\n    // this function is named 'update' instead of 'set', because a 'set'\n    // function typically takes the new value as a parameter. we avoid that to\n    // keep the isHorizontal logic tree contained within this function.\n    TableQuadrantStack.prototype.updateScrollContainerClientSize = function (isHorizontal) {\n        var mainScrollContainer = this.quadrantRefs[QuadrantType.MAIN].scrollContainer;\n        if (isHorizontal) {\n            this.cache.setScrollContainerClientWidth(mainScrollContainer.clientWidth);\n            return this.cache.getScrollContainerClientWidth();\n        }\n        else {\n            this.cache.setScrollContainerClientHeight(mainScrollContainer.clientHeight);\n            return this.cache.getScrollContainerClientHeight();\n        }\n    };\n    TableQuadrantStack.prototype.maybeIncreaseToDefaultColumnHeaderHeight = function (height) {\n        return height <= QUADRANT_MIN_SIZE ? DEFAULT_COLUMN_HEADER_HEIGHT : height;\n    };\n    // Helpers\n    // =======\n    /**\n     * Returns the width or height of *only the grid* in the secondary quadrants\n     * (TOP, LEFT, TOP_LEFT), based on the number of frozen rows and columns.\n     */\n    TableQuadrantStack.prototype.getSecondaryQuadrantGridSize = function (dimension) {\n        var _a = this.props, grid = _a.grid, numFrozenColumns = _a.numFrozenColumns, numFrozenRows = _a.numFrozenRows;\n        var numFrozen = dimension === \"width\" ? numFrozenColumns : numFrozenRows;\n        var getterFn = dimension === \"width\" ? grid.getCumulativeWidthAt : grid.getCumulativeHeightAt;\n        // both getter functions do O(1) lookups.\n        return numFrozen > 0 ? getterFn(numFrozen - 1) : QUADRANT_MIN_SIZE;\n    };\n    /**\n     * Measures the desired width of the row header based on its tallest\n     * contents.\n     */\n    TableQuadrantStack.prototype.measureDesiredRowHeaderWidth = function () {\n        // the MAIN row header serves as the source of truth\n        var mainRowHeader = this.quadrantRefs[QuadrantType.MAIN].rowHeader;\n        if (mainRowHeader == null) {\n            return 0;\n        }\n        else {\n            // (alas, we must force a reflow to measure the row header's \"desired\" width)\n            mainRowHeader.style.width = \"auto\";\n            var desiredRowHeaderWidth = mainRowHeader.clientWidth;\n            return desiredRowHeaderWidth;\n        }\n    };\n    /**\n     * Measures the desired height of the column header based on its tallest\n     * contents.\n     */\n    TableQuadrantStack.prototype.measureDesiredColumnHeaderHeight = function () {\n        // unlike the row headers, the column headers are in a display-flex\n        // layout and are not actually bound by any fixed `height` that we set,\n        // so they'll grow freely to their necessary size. makes measuring easy!\n        var mainColumnHeader = this.quadrantRefs[QuadrantType.MAIN].columnHeader;\n        return mainColumnHeader == null ? 0 : mainColumnHeader.clientHeight;\n    };\n    TableQuadrantStack.prototype.shouldRenderLeftQuadrants = function (props) {\n        if (props === void 0) { props = this.props; }\n        var enableRowHeader = props.enableRowHeader, numFrozenColumns = props.numFrozenColumns;\n        return enableRowHeader || (numFrozenColumns != null && numFrozenColumns > 0);\n    };\n    // Resizing\n    TableQuadrantStack.prototype.adjustVerticalGuides = function (verticalGuides, quadrantType) {\n        var isFrozenQuadrant = quadrantType === QuadrantType.LEFT || quadrantType === QuadrantType.TOP_LEFT;\n        var scrollAmount = isFrozenQuadrant ? 0 : this.cache.getScrollOffset(\"scrollLeft\");\n        var rowHeaderWidth = this.cache.getRowHeaderWidth();\n        var adjustedVerticalGuides = verticalGuides != null\n            ? verticalGuides.map(function (verticalGuide) { return verticalGuide - scrollAmount + rowHeaderWidth; })\n            : verticalGuides;\n        return adjustedVerticalGuides;\n    };\n    TableQuadrantStack.prototype.adjustHorizontalGuides = function (horizontalGuides, quadrantType) {\n        var isFrozenQuadrant = quadrantType === QuadrantType.TOP || quadrantType === QuadrantType.TOP_LEFT;\n        var scrollAmount = isFrozenQuadrant ? 0 : this.cache.getScrollOffset(\"scrollTop\");\n        var columnHeaderHeight = this.cache.getColumnHeaderHeight();\n        var adjustedHorizontalGuides = horizontalGuides != null\n            ? horizontalGuides.map(function (horizontalGuide) { return horizontalGuide - scrollAmount + columnHeaderHeight; })\n            : horizontalGuides;\n        return adjustedHorizontalGuides;\n    };\n    // we want the user to explicitly pass a quadrantType. define defaultProps as a Partial to avoid\n    // declaring that and other required props here.\n    TableQuadrantStack.defaultProps = {\n        enableColumnInteractionBar: undefined,\n        enableRowHeader: true,\n        isHorizontalScrollDisabled: false,\n        isVerticalScrollDisabled: false,\n        throttleScrolling: true,\n        viewSyncDelay: DEFAULT_VIEW_SYNC_DELAY,\n    };\n    TableQuadrantStack = __decorate([\n        polyfill\n    ], TableQuadrantStack);\n    return TableQuadrantStack;\n}(AbstractComponent2));\nexport { TableQuadrantStack };\n//# sourceMappingURL=tableQuadrantStack.js.map"]},"metadata":{},"sourceType":"module"}