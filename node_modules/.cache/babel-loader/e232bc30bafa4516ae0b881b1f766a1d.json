{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// HACKHACK: workaround for https://github.com/palantir/tslint/issues/1768\n// eslint-disable  @typescript-eslint/adjacent-overload-signatures\n\n/**\n * A simple object for storing the client bounds of HTMLElements. Since\n * ClientRects are immutable, this object enables editing and some simple\n * manipulation methods.\n */\nvar Rect = function () {\n  function Rect(left, top, width, height) {\n    this.left = left;\n    this.top = top;\n    this.width = width;\n    this.height = height;\n  }\n  /**\n   * Returns the smallest Rect that entirely contains the supplied rects\n   */\n\n\n  Rect.union = function (anyRect0, anyRect1) {\n    var rect0 = Rect.wrap(anyRect0);\n    var rect1 = Rect.wrap(anyRect1);\n    var top = Math.min(rect0.top, rect1.top);\n    var left = Math.min(rect0.left, rect1.left);\n    var bottom = Math.max(rect0.top + rect0.height, rect1.top + rect1.height);\n    var right = Math.max(rect0.left + rect0.width, rect1.left + rect1.width);\n    var height = bottom - top;\n    var width = right - left;\n    return new Rect(left, top, width, height);\n  };\n  /**\n   * Returns a new Rect that subtracts the origin of the second argument\n   * from the first.\n   */\n\n\n  Rect.subtractOrigin = function (anyRect0, anyRect1) {\n    var rect0 = Rect.wrap(anyRect0);\n    var rect1 = Rect.wrap(anyRect1);\n    return new Rect(rect0.left - rect1.left, rect0.top - rect1.top, rect0.width, rect0.height);\n  };\n  /**\n   * Returns the CSS properties representing the absolute positioning of\n   * this Rect.\n   */\n\n\n  Rect.style = function (rect) {\n    return {\n      height: rect.height + \"px\",\n      left: rect.left + \"px\",\n      position: \"absolute\",\n      top: rect.top + \"px\",\n      width: rect.width + \"px\"\n    };\n  };\n  /**\n   * Given a ClientRect or Rect object, returns a Rect object.\n   */\n\n\n  Rect.wrap = function (rect) {\n    if (rect instanceof Rect) {\n      return rect;\n    } else {\n      return new Rect(rect.left, rect.top, rect.width, rect.height);\n    }\n  };\n\n  Rect.prototype.subtractOrigin = function (anyRect) {\n    return Rect.subtractOrigin(this, anyRect);\n  };\n\n  Rect.prototype.union = function (anyRect) {\n    return Rect.union(this, anyRect);\n  };\n\n  Rect.prototype.style = function () {\n    return Rect.style(this);\n  };\n\n  Rect.prototype.sizeStyle = function () {\n    return {\n      height: this.height + \"px\",\n      width: this.width + \"px\"\n    };\n  };\n\n  Rect.prototype.containsX = function (clientX) {\n    return clientX >= this.left && clientX <= this.left + this.width;\n  };\n\n  Rect.prototype.containsY = function (clientY) {\n    return clientY >= this.top && clientY <= this.top + this.height;\n  };\n\n  Rect.prototype.equals = function (rect) {\n    return rect != null && this.left === rect.left && this.top === rect.top && this.width === rect.width && this.height === rect.height;\n  };\n\n  Rect.ORIGIN = new Rect(0, 0, 0, 0);\n  return Rect;\n}();\n\nexport { Rect };","map":{"version":3,"sources":["../../../src/common/rect.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// HACKHACK: workaround for https://github.com/palantir/tslint/issues/1768\n// eslint-disable  @typescript-eslint/adjacent-overload-signatures\n/**\n * A simple object for storing the client bounds of HTMLElements. Since\n * ClientRects are immutable, this object enables editing and some simple\n * manipulation methods.\n */\nvar Rect = /** @class */ (function () {\n    function Rect(left, top, width, height) {\n        this.left = left;\n        this.top = top;\n        this.width = width;\n        this.height = height;\n    }\n    /**\n     * Returns the smallest Rect that entirely contains the supplied rects\n     */\n    Rect.union = function (anyRect0, anyRect1) {\n        var rect0 = Rect.wrap(anyRect0);\n        var rect1 = Rect.wrap(anyRect1);\n        var top = Math.min(rect0.top, rect1.top);\n        var left = Math.min(rect0.left, rect1.left);\n        var bottom = Math.max(rect0.top + rect0.height, rect1.top + rect1.height);\n        var right = Math.max(rect0.left + rect0.width, rect1.left + rect1.width);\n        var height = bottom - top;\n        var width = right - left;\n        return new Rect(left, top, width, height);\n    };\n    /**\n     * Returns a new Rect that subtracts the origin of the second argument\n     * from the first.\n     */\n    Rect.subtractOrigin = function (anyRect0, anyRect1) {\n        var rect0 = Rect.wrap(anyRect0);\n        var rect1 = Rect.wrap(anyRect1);\n        return new Rect(rect0.left - rect1.left, rect0.top - rect1.top, rect0.width, rect0.height);\n    };\n    /**\n     * Returns the CSS properties representing the absolute positioning of\n     * this Rect.\n     */\n    Rect.style = function (rect) {\n        return {\n            height: rect.height + \"px\",\n            left: rect.left + \"px\",\n            position: \"absolute\",\n            top: rect.top + \"px\",\n            width: rect.width + \"px\",\n        };\n    };\n    /**\n     * Given a ClientRect or Rect object, returns a Rect object.\n     */\n    Rect.wrap = function (rect) {\n        if (rect instanceof Rect) {\n            return rect;\n        }\n        else {\n            return new Rect(rect.left, rect.top, rect.width, rect.height);\n        }\n    };\n    Rect.prototype.subtractOrigin = function (anyRect) {\n        return Rect.subtractOrigin(this, anyRect);\n    };\n    Rect.prototype.union = function (anyRect) {\n        return Rect.union(this, anyRect);\n    };\n    Rect.prototype.style = function () {\n        return Rect.style(this);\n    };\n    Rect.prototype.sizeStyle = function () {\n        return {\n            height: this.height + \"px\",\n            width: this.width + \"px\",\n        };\n    };\n    Rect.prototype.containsX = function (clientX) {\n        return clientX >= this.left && clientX <= this.left + this.width;\n    };\n    Rect.prototype.containsY = function (clientY) {\n        return clientY >= this.top && clientY <= this.top + this.height;\n    };\n    Rect.prototype.equals = function (rect) {\n        return (rect != null &&\n            this.left === rect.left &&\n            this.top === rect.top &&\n            this.width === rect.width &&\n            this.height === rect.height);\n    };\n    Rect.ORIGIN = new Rect(0, 0, 0, 0);\n    return Rect;\n}());\nexport { Rect };\n//# sourceMappingURL=rect.js.map"]},"metadata":{},"sourceType":"module"}