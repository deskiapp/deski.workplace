{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { DISPLAYNAME_PREFIX, EditableText, HotkeysTarget2, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport * as Classes from \"../common/classes\";\nimport { Draggable } from \"../interactions/draggable\";\nimport { Cell } from \"./cell\";\n\nvar EditableCell2 = function (_super) {\n  __extends(EditableCell2, _super);\n\n  function EditableCell2() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.refHandlers = {\n      cell: function (ref) {\n        _this.cellRef = ref;\n      }\n    };\n    _this.state = {\n      isEditing: false,\n      savedValue: _this.props.value\n    };\n\n    _this.renderCell = function (_a) {\n      var _b;\n\n      var handleKeyDown = _a.handleKeyDown,\n          handleKeyUp = _a.handleKeyUp;\n\n      var _c = _this.props,\n          editableTextProps = _c.editableTextProps,\n          onCancel = _c.onCancel,\n          onChange = _c.onChange,\n          onConfirm = _c.onConfirm,\n          _d = _c.tabIndex,\n          tabIndex = _d === void 0 ? 0 : _d,\n          truncated = _c.truncated,\n          wrapText = _c.wrapText,\n          spreadableProps = __rest(_c, [\"editableTextProps\", \"onCancel\", \"onChange\", \"onConfirm\", \"tabIndex\", \"truncated\", \"wrapText\"]);\n\n      var _e = _this.state,\n          isEditing = _e.isEditing,\n          dirtyValue = _e.dirtyValue,\n          savedValue = _e.savedValue;\n      var interactive = spreadableProps.interactive || isEditing;\n      var cellContents = null;\n\n      if (isEditing) {\n        var className = editableTextProps ? editableTextProps.className : null;\n        cellContents = React.createElement(EditableText, __assign({}, editableTextProps, {\n          isEditing: true,\n          className: classNames(Classes.TABLE_EDITABLE_TEXT, Classes.TABLE_EDITABLE_NAME, className),\n          intent: spreadableProps.intent,\n          minWidth: null,\n          onCancel: _this.handleCancel,\n          onChange: _this.handleChange,\n          onConfirm: _this.handleConfirm,\n          onEdit: _this.handleEdit,\n          placeholder: \"\",\n          selectAllOnFocus: false,\n          value: dirtyValue\n        }));\n      } else {\n        var textClasses = classNames(Classes.TABLE_EDITABLE_TEXT, (_b = {}, _b[Classes.TABLE_TRUNCATED_TEXT] = truncated, _b[Classes.TABLE_NO_WRAP_TEXT] = !wrapText, _b));\n        cellContents = React.createElement(\"div\", {\n          className: textClasses\n        }, savedValue);\n      }\n\n      return React.createElement(Cell, __assign({}, spreadableProps, {\n        wrapText: wrapText,\n        truncated: false,\n        interactive: interactive,\n        cellRef: _this.refHandlers.cell,\n        onKeyDown: handleKeyDown,\n        onKeyPress: _this.handleKeyPress,\n        onKeyUp: handleKeyUp,\n        tabIndex: tabIndex\n      }), React.createElement(Draggable, {\n        onActivate: _this.handleCellActivate,\n        onDoubleClick: _this.handleCellDoubleClick,\n        preventDefault: false,\n        stopPropagation: interactive\n      }, cellContents));\n    };\n\n    _this.handleKeyPress = function () {\n      if (_this.state.isEditing || !_this.props.isFocused) {\n        return;\n      } // setting dirty value to empty string because apparently the text field will pick up the key and write it in there\n\n\n      _this.setState({\n        isEditing: true,\n        dirtyValue: \"\",\n        savedValue: _this.state.savedValue\n      });\n    };\n\n    _this.handleEdit = function () {\n      _this.setState({\n        isEditing: true,\n        dirtyValue: _this.state.savedValue\n      });\n    };\n\n    _this.handleCancel = function (value) {\n      // don't strictly need to clear the dirtyValue, but it's better hygiene\n      _this.setState({\n        isEditing: false,\n        dirtyValue: undefined\n      });\n\n      _this.invokeCallback(_this.props.onCancel, value);\n    };\n\n    _this.handleChange = function (value) {\n      _this.setState({\n        dirtyValue: value\n      });\n\n      _this.invokeCallback(_this.props.onChange, value);\n    };\n\n    _this.handleConfirm = function (value) {\n      _this.setState({\n        isEditing: false,\n        savedValue: value,\n        dirtyValue: undefined\n      });\n\n      _this.invokeCallback(_this.props.onConfirm, value);\n    };\n\n    _this.handleCellActivate = function (_event) {\n      return true;\n    };\n\n    _this.handleCellDoubleClick = function (_event) {\n      _this.handleEdit();\n    };\n\n    _this.hotkeys = [{\n      combo: \"f2\",\n      group: \"Table\",\n      label: \"Edit the currently focused cell\",\n      onKeyDown: _this.handleEdit\n    }];\n    return _this;\n  }\n\n  EditableCell2.prototype.componentDidMount = function () {\n    this.checkShouldFocus();\n  };\n\n  EditableCell2.prototype.componentDidUpdate = function (prevProps) {\n    var didPropsChange = !CoreUtils.shallowCompareKeys(this.props, prevProps, {\n      exclude: [\"style\"]\n    }) || !CoreUtils.deepCompareKeys(this.props, prevProps, [\"style\"]);\n    var value = this.props.value;\n\n    if (didPropsChange && value != null) {\n      this.setState({\n        savedValue: value,\n        dirtyValue: value\n      });\n    }\n\n    this.checkShouldFocus();\n  };\n\n  EditableCell2.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    return !CoreUtils.shallowCompareKeys(this.props, nextProps, {\n      exclude: [\"style\"]\n    }) || !CoreUtils.shallowCompareKeys(this.state, nextState) || !CoreUtils.deepCompareKeys(this.props, nextProps, [\"style\"]);\n  };\n\n  EditableCell2.prototype.render = function () {\n    return React.createElement(HotkeysTarget2, {\n      hotkeys: this.hotkeys\n    }, this.renderCell);\n  };\n\n  EditableCell2.prototype.checkShouldFocus = function () {\n    if (this.props.isFocused && !this.state.isEditing) {\n      // don't focus if we're editing -- we'll lose the fact that we're editing\n      this.cellRef.focus();\n    }\n  };\n\n  EditableCell2.prototype.invokeCallback = function (callback, value) {\n    // pass through the row and column indices if they were provided as props by the consumer\n    var _a = this.props,\n        rowIndex = _a.rowIndex,\n        columnIndex = _a.columnIndex;\n    callback === null || callback === void 0 ? void 0 : callback(value, rowIndex, columnIndex);\n  };\n\n  EditableCell2.displayName = DISPLAYNAME_PREFIX + \".EditableCell2\";\n  EditableCell2.defaultProps = {\n    truncated: true,\n    wrapText: false\n  };\n  return EditableCell2;\n}(React.Component);\n\nexport { EditableCell2 };","map":{"version":3,"sources":["../../../src/cell/editableCell2.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { DISPLAYNAME_PREFIX, EditableText, HotkeysTarget2, Utils as CoreUtils, } from \"@blueprintjs/core\";\nimport * as Classes from \"../common/classes\";\nimport { Draggable } from \"../interactions/draggable\";\nimport { Cell } from \"./cell\";\nvar EditableCell2 = /** @class */ (function (_super) {\n    __extends(EditableCell2, _super);\n    function EditableCell2() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.refHandlers = {\n            cell: function (ref) {\n                _this.cellRef = ref;\n            },\n        };\n        _this.state = {\n            isEditing: false,\n            savedValue: _this.props.value,\n        };\n        _this.renderCell = function (_a) {\n            var _b;\n            var handleKeyDown = _a.handleKeyDown, handleKeyUp = _a.handleKeyUp;\n            var _c = _this.props, editableTextProps = _c.editableTextProps, onCancel = _c.onCancel, onChange = _c.onChange, onConfirm = _c.onConfirm, _d = _c.tabIndex, tabIndex = _d === void 0 ? 0 : _d, truncated = _c.truncated, wrapText = _c.wrapText, spreadableProps = __rest(_c, [\"editableTextProps\", \"onCancel\", \"onChange\", \"onConfirm\", \"tabIndex\", \"truncated\", \"wrapText\"]);\n            var _e = _this.state, isEditing = _e.isEditing, dirtyValue = _e.dirtyValue, savedValue = _e.savedValue;\n            var interactive = spreadableProps.interactive || isEditing;\n            var cellContents = null;\n            if (isEditing) {\n                var className = editableTextProps ? editableTextProps.className : null;\n                cellContents = (React.createElement(EditableText, __assign({}, editableTextProps, { isEditing: true, className: classNames(Classes.TABLE_EDITABLE_TEXT, Classes.TABLE_EDITABLE_NAME, className), intent: spreadableProps.intent, minWidth: null, onCancel: _this.handleCancel, onChange: _this.handleChange, onConfirm: _this.handleConfirm, onEdit: _this.handleEdit, placeholder: \"\", selectAllOnFocus: false, value: dirtyValue })));\n            }\n            else {\n                var textClasses = classNames(Classes.TABLE_EDITABLE_TEXT, (_b = {},\n                    _b[Classes.TABLE_TRUNCATED_TEXT] = truncated,\n                    _b[Classes.TABLE_NO_WRAP_TEXT] = !wrapText,\n                    _b));\n                cellContents = React.createElement(\"div\", { className: textClasses }, savedValue);\n            }\n            return (React.createElement(Cell, __assign({}, spreadableProps, { wrapText: wrapText, truncated: false, interactive: interactive, cellRef: _this.refHandlers.cell, onKeyDown: handleKeyDown, onKeyPress: _this.handleKeyPress, onKeyUp: handleKeyUp, tabIndex: tabIndex }),\n                React.createElement(Draggable, { onActivate: _this.handleCellActivate, onDoubleClick: _this.handleCellDoubleClick, preventDefault: false, stopPropagation: interactive }, cellContents)));\n        };\n        _this.handleKeyPress = function () {\n            if (_this.state.isEditing || !_this.props.isFocused) {\n                return;\n            }\n            // setting dirty value to empty string because apparently the text field will pick up the key and write it in there\n            _this.setState({ isEditing: true, dirtyValue: \"\", savedValue: _this.state.savedValue });\n        };\n        _this.handleEdit = function () {\n            _this.setState({ isEditing: true, dirtyValue: _this.state.savedValue });\n        };\n        _this.handleCancel = function (value) {\n            // don't strictly need to clear the dirtyValue, but it's better hygiene\n            _this.setState({ isEditing: false, dirtyValue: undefined });\n            _this.invokeCallback(_this.props.onCancel, value);\n        };\n        _this.handleChange = function (value) {\n            _this.setState({ dirtyValue: value });\n            _this.invokeCallback(_this.props.onChange, value);\n        };\n        _this.handleConfirm = function (value) {\n            _this.setState({ isEditing: false, savedValue: value, dirtyValue: undefined });\n            _this.invokeCallback(_this.props.onConfirm, value);\n        };\n        _this.handleCellActivate = function (_event) {\n            return true;\n        };\n        _this.handleCellDoubleClick = function (_event) {\n            _this.handleEdit();\n        };\n        _this.hotkeys = [\n            {\n                combo: \"f2\",\n                group: \"Table\",\n                label: \"Edit the currently focused cell\",\n                onKeyDown: _this.handleEdit,\n            },\n        ];\n        return _this;\n    }\n    EditableCell2.prototype.componentDidMount = function () {\n        this.checkShouldFocus();\n    };\n    EditableCell2.prototype.componentDidUpdate = function (prevProps) {\n        var didPropsChange = !CoreUtils.shallowCompareKeys(this.props, prevProps, { exclude: [\"style\"] }) ||\n            !CoreUtils.deepCompareKeys(this.props, prevProps, [\"style\"]);\n        var value = this.props.value;\n        if (didPropsChange && value != null) {\n            this.setState({ savedValue: value, dirtyValue: value });\n        }\n        this.checkShouldFocus();\n    };\n    EditableCell2.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n        return (!CoreUtils.shallowCompareKeys(this.props, nextProps, { exclude: [\"style\"] }) ||\n            !CoreUtils.shallowCompareKeys(this.state, nextState) ||\n            !CoreUtils.deepCompareKeys(this.props, nextProps, [\"style\"]));\n    };\n    EditableCell2.prototype.render = function () {\n        return React.createElement(HotkeysTarget2, { hotkeys: this.hotkeys }, this.renderCell);\n    };\n    EditableCell2.prototype.checkShouldFocus = function () {\n        if (this.props.isFocused && !this.state.isEditing) {\n            // don't focus if we're editing -- we'll lose the fact that we're editing\n            this.cellRef.focus();\n        }\n    };\n    EditableCell2.prototype.invokeCallback = function (callback, value) {\n        // pass through the row and column indices if they were provided as props by the consumer\n        var _a = this.props, rowIndex = _a.rowIndex, columnIndex = _a.columnIndex;\n        callback === null || callback === void 0 ? void 0 : callback(value, rowIndex, columnIndex);\n    };\n    EditableCell2.displayName = DISPLAYNAME_PREFIX + \".EditableCell2\";\n    EditableCell2.defaultProps = {\n        truncated: true,\n        wrapText: false,\n    };\n    return EditableCell2;\n}(React.Component));\nexport { EditableCell2 };\n//# sourceMappingURL=editableCell2.js.map"]},"metadata":{},"sourceType":"module"}