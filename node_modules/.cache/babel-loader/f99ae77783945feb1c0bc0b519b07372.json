{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { EditableText } from \"@blueprintjs/core\";\nimport * as Classes from \"../common/classes\";\n\nvar EditableName = function (_super) {\n  __extends(EditableName, _super);\n\n  function EditableName(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    _this.handleEdit = function () {\n      _this.setState({\n        isEditing: true,\n        dirtyName: _this.state.savedName\n      });\n    };\n\n    _this.handleCancel = function (value) {\n      // don't strictly need to clear the dirtyName, but it's better hygiene\n      _this.setState({\n        isEditing: false,\n        dirtyName: undefined\n      });\n\n      _this.invokeCallback(_this.props.onCancel, value);\n    };\n\n    _this.handleChange = function (value) {\n      _this.setState({\n        dirtyName: value\n      });\n\n      _this.invokeCallback(_this.props.onChange, value);\n    };\n\n    _this.handleConfirm = function (value) {\n      _this.setState({\n        isEditing: false,\n        savedName: value,\n        dirtyName: undefined\n      });\n\n      _this.invokeCallback(_this.props.onConfirm, value);\n    };\n\n    _this.state = {\n      dirtyName: props.name,\n      isEditing: false,\n      savedName: props.name\n    };\n    return _this;\n  }\n\n  EditableName.prototype.componentDidUpdate = function (prevProps) {\n    var name = this.props.name;\n\n    if (name !== prevProps.name) {\n      this.setState({\n        savedName: name,\n        dirtyName: name\n      });\n    }\n  };\n\n  EditableName.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        intent = _a.intent,\n        name = _a.name;\n    var _b = this.state,\n        isEditing = _b.isEditing,\n        dirtyName = _b.dirtyName,\n        savedName = _b.savedName;\n    return React.createElement(EditableText, {\n      className: classNames(className, Classes.TABLE_EDITABLE_NAME),\n      defaultValue: name,\n      intent: intent,\n      minWidth: null,\n      onCancel: this.handleCancel,\n      onChange: this.handleChange,\n      onConfirm: this.handleConfirm,\n      onEdit: this.handleEdit,\n      placeholder: \"\",\n      selectAllOnFocus: true,\n      value: isEditing ? dirtyName : savedName\n    });\n  };\n\n  EditableName.prototype.invokeCallback = function (callback, value) {\n    var index = this.props.index;\n    callback === null || callback === void 0 ? void 0 : callback(value, index);\n  };\n\n  return EditableName;\n}(React.PureComponent);\n\nexport { EditableName };","map":{"version":3,"sources":["../../../src/headers/editableName.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { EditableText } from \"@blueprintjs/core\";\nimport * as Classes from \"../common/classes\";\nvar EditableName = /** @class */ (function (_super) {\n    __extends(EditableName, _super);\n    function EditableName(props, context) {\n        var _this = _super.call(this, props, context) || this;\n        _this.handleEdit = function () {\n            _this.setState({ isEditing: true, dirtyName: _this.state.savedName });\n        };\n        _this.handleCancel = function (value) {\n            // don't strictly need to clear the dirtyName, but it's better hygiene\n            _this.setState({ isEditing: false, dirtyName: undefined });\n            _this.invokeCallback(_this.props.onCancel, value);\n        };\n        _this.handleChange = function (value) {\n            _this.setState({ dirtyName: value });\n            _this.invokeCallback(_this.props.onChange, value);\n        };\n        _this.handleConfirm = function (value) {\n            _this.setState({ isEditing: false, savedName: value, dirtyName: undefined });\n            _this.invokeCallback(_this.props.onConfirm, value);\n        };\n        _this.state = {\n            dirtyName: props.name,\n            isEditing: false,\n            savedName: props.name,\n        };\n        return _this;\n    }\n    EditableName.prototype.componentDidUpdate = function (prevProps) {\n        var name = this.props.name;\n        if (name !== prevProps.name) {\n            this.setState({ savedName: name, dirtyName: name });\n        }\n    };\n    EditableName.prototype.render = function () {\n        var _a = this.props, className = _a.className, intent = _a.intent, name = _a.name;\n        var _b = this.state, isEditing = _b.isEditing, dirtyName = _b.dirtyName, savedName = _b.savedName;\n        return (React.createElement(EditableText, { className: classNames(className, Classes.TABLE_EDITABLE_NAME), defaultValue: name, intent: intent, minWidth: null, onCancel: this.handleCancel, onChange: this.handleChange, onConfirm: this.handleConfirm, onEdit: this.handleEdit, placeholder: \"\", selectAllOnFocus: true, value: isEditing ? dirtyName : savedName }));\n    };\n    EditableName.prototype.invokeCallback = function (callback, value) {\n        var index = this.props.index;\n        callback === null || callback === void 0 ? void 0 : callback(value, index);\n    };\n    return EditableName;\n}(React.PureComponent));\nexport { EditableName };\n//# sourceMappingURL=editableName.js.map"]},"metadata":{},"sourceType":"module"}