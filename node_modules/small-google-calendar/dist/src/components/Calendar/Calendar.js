import React from 'react';
import { CalendarContextProvider } from './CalendarContext';
import { getLocalDayName, getMonthName } from './utils';
import { useCalendar } from './hooks/useCalendar';
import { useShowingDays } from './hooks/useShowingDays';
import { isFunction } from '../shared/utils';
import BackNavigationArrow from '../Arrows/LeftArrow';
import ForwardNavigationArrow from '../Arrows/RightArrow';
import './index.css';
const Navigation = ({ showingYear, showingMonth, handleAction, }) => (React.createElement("div", { className: "calendar-navigation" },
    React.createElement("div", null,
        React.createElement("span", { className: "calendar-navigation__month" }, getMonthName(showingMonth)),
        React.createElement("span", { className: "calendar-navigation__year" }, showingYear)),
    React.createElement("div", null,
        React.createElement("button", { className: "calendar-navigation__btn", onClick: () => handleAction({ action: 'setPreviousShowingMonth' }) },
            React.createElement(BackNavigationArrow, null)),
        React.createElement("button", { className: "calendar-navigation__btn", onClick: () => handleAction({ action: 'setNextShowingMonth' }) },
            React.createElement(ForwardNavigationArrow, null)))));
const LocalDays = () => (React.createElement("div", { className: "local-days" }, [0, 1, 2, 3, 4, 5, 6].map((day, idx) => (React.createElement("div", { key: idx, className: "local-days__name" }, getLocalDayName(day, true))))));
const Days = ({ showingYear, showingMonth, selectedMonth, selectedDay, selectedYear, onChange, handleAction, }) => {
    const showingDays = useShowingDays({ showingYear, showingMonth });
    const getClassName = (position, day) => {
        const isActive = showingYear === selectedYear &&
            showingMonth === selectedMonth &&
            selectedDay === day;
        const isCurrentPosition = position === 'current';
        return `month-days__item ${position} ${isActive && isCurrentPosition ? 'active' : ''}`;
    };
    const getHandler = (position, day) => {
        switch (position) {
            case 'previous':
                return () => {
                    handleAction({
                        action: 'setSelectedDate',
                        payload: {
                            date: { year: showingYear, month: showingMonth - 1, day },
                            onChange,
                        },
                    });
                    handleAction({ action: 'setPreviousShowingMonth' });
                };
            case 'current':
                return () => {
                    handleAction({
                        action: 'setSelectedDate',
                        payload: {
                            date: { year: showingYear, month: showingMonth, day },
                            onChange,
                        },
                    });
                };
            case 'next':
                return () => {
                    handleAction({
                        action: 'setSelectedDate',
                        payload: {
                            date: { year: showingYear, month: showingMonth + 1, day },
                            onChange,
                        },
                    });
                    handleAction({ action: 'setNextShowingMonth' });
                };
        }
    };
    return (React.createElement("div", { className: "month-days" }, showingDays.map(({ day, position }, idx) => {
        const handler = getHandler(position, day);
        const className = getClassName(position, day);
        return (React.createElement("div", { key: idx, className: "month-days__item-container" },
            React.createElement("button", { className: className, onClick: () => handler() }, day)));
    })));
};
export const Calendar = ({ show = true, sizing = 'lg', onChange, children, }) => {
    const { showingYear, showingMonth, selectedDay, selectedMonth, selectedYear, selectedDate, handleAction, } = useCalendar();
    return (React.createElement("div", { className: `calendar-container ${sizing}` },
        React.createElement(CalendarContextProvider, { value: selectedDate },
            React.createElement("div", { className: "calendar-children" }, children && isFunction(children) ? children(selectedDate) : children),
            show && (React.createElement("div", { className: "calendar" },
                React.createElement(Navigation, { showingYear: showingYear, showingMonth: showingMonth, handleAction: handleAction }),
                React.createElement(LocalDays, null),
                React.createElement(Days, { showingYear: showingYear, showingMonth: showingMonth, selectedMonth: selectedMonth, selectedDay: selectedDay, selectedYear: selectedYear, handleAction: handleAction, onChange: onChange }))))));
};
